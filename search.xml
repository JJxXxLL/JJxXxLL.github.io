<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/05/12/%E5%8A%A8%E6%80%81%E5%9B%BE%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C/"/>
      <url>/2025/05/12/%E5%8A%A8%E6%80%81%E5%9B%BE%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="相关工作（Related-Work）"><a href="#相关工作（Related-Work）" class="headerlink" title="相关工作（Related Work）"></a>相关工作（Related Work）</h2><hr><h2 id="2-1-连续时间动态图（CTDG）上的异常检测"><a href="#2-1-连续时间动态图（CTDG）上的异常检测" class="headerlink" title="2.1 连续时间动态图（CTDG）上的异常检测"></a>2.1 连续时间动态图（CTDG）上的异常检测</h2><p>连续时间动态图（Continuous-Time Dynamic Graph, 简称 CTDG）是一种边流（edge stream）结构，其输入为带时间戳的边序列。CTDG 通常用于建模现实中随时间连续演化的图结构。</p><h3 id="无监督异常检测方法"><a href="#无监督异常检测方法" class="headerlink" title="无监督异常检测方法"></a>无监督异常检测方法</h3><p>目前大多数无监督异常检测技术主要针对某类特定异常。代表性方法包括：</p><ul><li><strong>Sedanspot [12]</strong>：专注于识别突发行为（bursts）和桥接边（连接稀疏子图的边）；</li><li><strong>MIDAS [4]</strong>：发现特定节点群体中交互的突增；</li><li><strong>F-FADE [6]</strong>：检测节点对之间交互的突然上升或社区结构的快速改变；</li><li><strong>AnoGraph [5]</strong>：识别稠密子图以及其中的异常边。</li></ul><p>这些方法通常通过增量计算提升效率，但缺乏可学习模块，因此难以捕捉复杂的异常行为模式，也难以推广到非预定义的异常类型。</p><h3 id="表示学习方法"><a href="#表示学习方法" class="headerlink" title="表示学习方法"></a>表示学习方法</h3><p>CTDG 中的表示学习旨在为每个新到达的边更新节点的表示，从而动态反映节点随时间演化的行为模式。</p><p>代表性方法包括：</p><ul><li><strong>JODIE [20]</strong>：基于 RNN 实现动态节点表示；</li><li><strong>DyRep [34]</strong>：结合深度时间点过程与 RNN；</li><li><strong>TGAT [39]</strong>：利用时间编码和图注意力机制建模邻居之间的时间依赖；</li><li><strong>DDGCL [33]</strong>：基于时间平滑性，通过对比学习获取节点表示；</li><li><strong>TGN [29]</strong>：引入 memory 模块记录节点历史行为并基于 RNN 更新；</li><li><strong>DGTCC [13]</strong>：通过前后状态的 memory 对比进行训练，假设 memory 更新过程是逐渐演化的。</li></ul><p>上述方法多数将表示学习结果输入到有监督分类器中，需要异常标签进行训练。而 <strong>SAD [32]</strong> 使用伪标签与对比学习结合，但依然依赖标签数据。</p><hr><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h3 id="静态图异常检测"><a href="#静态图异常检测" class="headerlink" title="静态图异常检测"></a>静态图异常检测</h3><p>许多方法专注于静态图上的异常检测，常采用图自监督学习以弥补标签缺失。典型方法包括：</p><ul><li><strong>ANEMONE [14]</strong>：比较由特征和由图结构+特征所学习的表示，若两者差异大则为异常；</li><li><strong>DOMINANT [10]</strong>：基于图自动编码器重构图结构与属性，通过重构误差判断异常。</li></ul><p>这些方法虽然能在静态图中表现良好，但难以扩展到动态图场景，因为节点表示需要随时间动态演化。</p><h3 id="离散时间动态图（DTDG）"><a href="#离散时间动态图（DTDG）" class="headerlink" title="离散时间动态图（DTDG）"></a>离散时间动态图（DTDG）</h3><p>DTDG（Discrete-Time Dynamic Graph）是另一种动态图形式，其输入为一系列离散时间点的图快照 $G_1, G_2, …, G_T$。</p><p>代表性方法包括：</p><ul><li><strong>Netwalk [40]</strong>：结合随机游走和自动编码器，识别表示差异显著的节点对；</li><li><strong>AddGraph [41]</strong>：使用 GCN 提取当前图中短期结构特征，结合 GRU 获取长期模式；</li><li><strong>TADDY [25]</strong>：利用 Transformer 进行多尺度图结构建模。</li></ul><p>这类方法以图快照为单位，存在一定延迟，因此不适合需要即时响应的任务（如安全监测）。此外，它们通常关注边的异常性，而非节点的动态状态演变。而本文的目标是<strong>检测节点在连续时间上的状态漂移</strong>，因此更适合使用 CTDG 结构。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SLADE</title>
      <link href="/2025/03/20/SLADE/"/>
      <url>/2025/03/20/SLADE/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://dl.acm.org/doi/pdf/10.1145/3637528.3671845">SLADE: Detecting Dynamic Anomalies in Edge Streams without Labels via Self-Supervised Learning</a></p><p>代码地址：<a href="https://github.com/jhsk777/SLADE">SLADE</a></p><hr><h2 id="1-引言（Introduction）"><a href="#1-引言（Introduction）" class="headerlink" title="1 引言（Introduction）"></a>1 引言（Introduction）</h2><p>在现实场景中进行图异常检测面临以下挑战：</p><h3 id="挑战-C1：检测延迟（Time-Delay-in-Detection）"><a href="#挑战-C1：检测延迟（Time-Delay-in-Detection）" class="headerlink" title="挑战 C1：检测延迟（Time Delay in Detection）"></a>挑战 C1：检测延迟（Time Delay in Detection）</h3><p>尽管大多数异常检测方法假设输入图是静态的，但现实中的图是随着交互事件不断演化的。因此，及时识别异常事件变得尤为重要。如果检测存在延迟，就有可能在此期间让恶意节点对正常节点造成损害。</p><p>然而，如果每次交互事件发生时都重新运行一次静态图异常检测算法，那么巨大的计算成本会造成严重的延迟。为此，我们应当将交互事件建模为<strong>边流（edge stream）</strong>，并使用<strong>增量计算（incremental computation）</strong>方式，在常数时间内评估每条新边是否异常。</p><p>过去一些研究（如文献[4,12]）已经提出了用于边流异常检测的增量算法。然而，这些方法大多只针对某一类异常（例如突发行为），缺乏可学习的模块，难以识别复杂的行为偏移模式。</p><h3 id="挑战-C2：状态的动态变化（Dynamically-Changing-States）"><a href="#挑战-C2：状态的动态变化（Dynamically-Changing-States）" class="headerlink" title="挑战 C2：状态的动态变化（Dynamically Changing States）"></a>挑战 C2：状态的动态变化（Dynamically Changing States）</h3><p>在现实网络中，用户的状态是随时间变化的。一个用户在某一时间段可能表现正常，但在另一个时间段却可能变成异常用户。</p><p>例如：一个正常用户的账号可能被黑客入侵并被用来发送垃圾广告。在这种情况下，该用户的状态会从“正常”转变为“异常”。这种类型的用户即为<strong>动态异常（dynamic anomalies）</strong>，比传统的静态异常检测难度更高。</p><p>解决这个挑战的一种方式是：追踪节点行为随时间的变化。这需要借助<strong>动态图表示学习（dynamic node representation learning）</strong>技术。然而，目前的动态图表示学习方法大多依赖于异常标签进行训练，而这些标签在现实中是稀缺的。</p><h3 id="挑战-C3：异常标签缺乏（Lack-of-Anomaly-Labels）"><a href="#挑战-C3：异常标签缺乏（Lack-of-Anomaly-Labels）" class="headerlink" title="挑战 C3：异常标签缺乏（Lack of Anomaly Labels）"></a>挑战 C3：异常标签缺乏（Lack of Anomaly Labels）</h3><p>图神经网络（GNN）等深度学习方法在图异常检测方面表现出色，但它们大多依赖于异常标签进行监督学习。然而，现实中的异常标签通常难以获取，尤其是动态异常。</p><p>为此，一些研究开始尝试使用<strong>无监督方法</strong>进行异常检测，例如在静态图中采用重构误差或对比学习等方式。但这些方法很难同时满足上述三大挑战：动态建模、增量处理、无监督学习。</p><h3 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h3><p>为了解决上述问题，本文提出了 <strong>SLADE</strong>（Self-supervised Learning for Anomaly Detection in Edge Streams）框架，实现了以下目标：</p><ul><li>无需任何异常标签，进行<strong>无监督学习</strong>；</li><li>利用两个<strong>自监督任务</strong>训练动态图模型；</li><li>在每条新边到来时，以<strong>常数时间</strong>更新节点状态，支持实时检测。</li></ul><p>这两个自监督任务包括：</p><ol><li><strong>最小化表示漂移</strong>（即让节点表示在短时间内保持稳定）；</li><li><strong>从短期交互中生成长期行为模式</strong>（如果生成失败，表示该节点偏离正常模式）。</li></ol><hr><h2 id="第-3-章：问题定义（Problem-Statement）"><a href="#第-3-章：问题定义（Problem-Statement）" class="headerlink" title="第 3 章：问题定义（Problem Statement）"></a>第 3 章：问题定义（Problem Statement）</h2><hr><h3 id="连续时间动态图定义"><a href="#连续时间动态图定义" class="headerlink" title="连续时间动态图定义"></a>连续时间动态图定义</h3><p>我们研究的对象是<strong>边流图（edge stream graph）</strong>，即一个随着时间不断增长的图。我们将其形式化地表示为：</p><p>$\mathcal{G} = { (u_s, u_d, t, e) }$</p><p>其中，每一个四元组表示一条<strong>带时间戳的边</strong>，具体含义如下：</p><ul><li>$u_s$：边的源节点（source node）；</li><li>$u_d$：边的目标节点（destination node）；</li><li>$t$：该边发生的时间戳（timestamp）；</li><li>$e$：该边的属性信息，例如交互类型、金额等（edge feature）。</li></ul><p>这组边随着时间不断到来，形成一个<strong>异构边序列</strong>，即边的类型和节点可能随时间发生变化。这样的结构属于<strong>连续时间动态图（CTDG）</strong>，广泛存在于诸如社交网络、金融系统、通信日志等现实场景中。</p><hr><h3 id="动态异常定义"><a href="#动态异常定义" class="headerlink" title="动态异常定义"></a>动态异常定义</h3><p>我们关注的并不是传统静态图中的孤立异常，而是<strong>节点行为随时间发生异常偏移</strong>的情况，即所谓的<strong>动态异常（dynamic anomalies）</strong>。</p><h4 id="什么是动态异常？"><a href="#什么是动态异常？" class="headerlink" title="什么是动态异常？"></a>什么是动态异常？</h4><ul><li>它不是由一条孤立边导致的；</li><li>而是一个节点在近期的行为模式，<strong>与其长期历史行为明显不一致</strong>。</li></ul><p>这种异常更加复杂且隐蔽，举例来说：</p><ul><li>某位用户长期习惯在白天浏览正常网页，但某天凌晨频繁访问可疑链接；</li><li>某个银行账户突然连续向多个从未交互的账户转账；</li><li>一个社交账号短时间内发送了大量以前从不发布的内容。</li></ul><p>这些“行为漂移”不容易通过传统图结构或静态异常检测方法捕捉到，因此构成了我们要解决的核心问题。</p><hr><h3 id="问题目标"><a href="#问题目标" class="headerlink" title="问题目标"></a>问题目标</h3><p>我们的目标是设计一种模型，能够：</p><blockquote><p>在每条新边到达时，<strong>实时地判断该边所涉及的节点是否处于异常状态</strong>。</p></blockquote><p>具体而言，假设当前新到达的边为 $(u_s, u_d, t, e)$，我们希望有一个异常评分函数：</p><p>$A: (u_s, u_d, t, e) \mapsto \mathbb{R}$</p><p>该函数输出一个实数值，表示该节点是否处于异常状态。</p><ul><li>分值越高，表示节点行为越异常；</li><li>该判断必须<strong>迅速且高效（最好是常数时间复杂度）</strong>完成，以满足实时检测的需求。</li></ul><hr><h3 id="模型要求"><a href="#模型要求" class="headerlink" title="模型要求"></a>模型要求</h3><p>为了实现上述目标，我们提出的模型需要满足以下三点：</p><ol><li><strong>无监督性（No Labels Required）</strong><br>  模型不能依赖任何预先标注的异常节点或异常边，因为现实中这些标签往往缺失或者难以获取。</li><li><strong>动态性（Temporal Adaptation）</strong><br>  节点的表示应随着新的边到达而不断更新，反映出其时间演化过程中的状态变化。</li><li><strong>增量计算（Incremental Inference）</strong><br>  每当有一条新边到来，模型应只处理该边及其相关节点的数据，<strong>而不重新处理整个图结构</strong>。</li></ol><p>为此，下一章我们将引入一个自监督学习框架 —— SLADE，它可以在边流图中自动学习节点的行为模式，并实现异常检测。</p><hr><h2 id="第-4-章：所提方法：SLADE"><a href="#第-4-章：所提方法：SLADE" class="headerlink" title="第 4 章：所提方法：SLADE"></a>第 4 章：所提方法：SLADE</h2><p>本章我们介绍 SLADE（Self-supervised Learning for Anomaly Detection in Edge Streams）方法，它是一种针对 <strong>连续时间动态图（CTDG）</strong> 中<strong>无监督的动态异常检测</strong>方法。</p><p>SLADE 背后的核心直觉是：</p><blockquote><p>正常节点的交互模式往往在结构上和时间上具有一致性，而异常节点则由于重复异常行为可能暴露自身，因而行为更加多变。</p></blockquote><p>基于这一点，作者提出了两个关键假设：</p><ul><li><strong>A1. 稳定的长期交互模式（Stable Long-Term Interaction Patterns）</strong>：<br>   正常节点倾向于在长期内重复类似的交互行为，这种模式在短时间窗口内的变化非常小。</li><li><strong>A2. 模式可恢复性（Potential for Restoration of Patterns）</strong>：<br>   可以仅通过节点近期的交互，准确还原其长期行为模式。</li></ul><p>为了捕捉满足 A1 和 A2 的正常行为模式，SLADE 利用两个自监督任务对模型进行训练：</p><ul><li><strong>S1. 时间对比任务（Temporal Contrast）</strong>：最小化短期内节点表示的漂移，服务于 A1。</li><li><strong>S2. 记忆生成任务（Memory Generation）</strong>：基于近期邻居信息生成节点长期行为表示，服务于 A2。</li></ul><p>若某个节点在 S1 或 S2 上表现较差（如生成失败或变化突兀），则被视为可能异常。</p><hr><h3 id="4-1-SLADE-的核心模块"><a href="#4-1-SLADE-的核心模块" class="headerlink" title="4.1 SLADE 的核心模块"></a>4.1 SLADE 的核心模块</h3><p>为了增量式学习每个节点的动态表示，SLADE 包含以下三个模块：</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20250402160711219.png" alt="image-20250402160711219"></p><ol><li><strong>记忆模块（Memory Module）</strong><ul><li>存储每个节点的长期交互模式；</li><li>用一个可更新的记忆向量 $\mathbf{s}_i$ 表示节点 $v_i$；</li><li>初始为零向量，随后由 GRU 逐步更新。</li></ul></li><li><strong>记忆更新器（Memory Updater）</strong><ul><li>每条边到达时，根据对端节点的记忆与时间差，生成消息向量；</li><li>用 GRU 结构将消息编码进当前节点记忆，实现历史行为演化。</li></ul></li><li><strong>记忆生成器（Memory Generator）</strong><ul><li>给定节点近期邻居，使用 TGAT 模型生成记忆向量；</li><li>该向量应逼近真实长期记忆向量，用以评估生成效果。</li></ul></li></ol><hr><h3 id="记忆更新细节"><a href="#记忆更新细节" class="headerlink" title="记忆更新细节"></a>记忆更新细节</h3><p>当一条边 $(v<em>i, v_j, t</em>{ij})$ 到达时，SLADE 会根据如下方式生成两端节点的消息：</p><ul><li>$\mathbf{m}<em>i = \mathrm{MLP}([\mathbf{s}_j | \phi(t</em>{ij} - t_{j}^{\mathrm{prev}})])$</li><li>$\mathbf{m}<em>j = \mathrm{MLP}([\mathbf{s}_i | \phi(t</em>{ij} - t_{i}^{\mathrm{prev}})])$</li></ul><p>其中：</p><ul><li>$\phi(\cdot)$ 是时间编码函数；</li><li>$[\cdot | \cdot]$ 表示向量拼接。</li></ul><p>然后使用 GRU 更新节点记忆：</p><p>$\mathbf{s}_i = \mathrm{GRU}(\mathbf{m}_i, \mathbf{s}_i^{\prime})$</p><hr><h3 id="记忆生成细节"><a href="#记忆生成细节" class="headerlink" title="记忆生成细节"></a>记忆生成细节</h3><p>给定节点 $v<em>i$，我们使用 TGAT 聚合其最近邻居的状态 ${(\mathbf{s}</em>{n<em>1}, t</em>{n<em>1}), …, (\mathbf{s}</em>{n<em>k}, t</em>{n_k})}$，计算生成记忆：</p><p>$\hat{\mathbf{s}}<em>i = \mathrm{TGAT}({\mathbf{s}</em>{n<em>j}, t - t</em>{n<em>j}}</em>{j=1}^k)$</p><hr><h3 id="4-2-训练目标与流程"><a href="#4-2-训练目标与流程" class="headerlink" title="4.2 训练目标与流程"></a>4.2 训练目标与流程</h3><p>SLADE 的训练目标是最小化两个自监督损失：</p><h3 id="1）时间对比损失（Temporal-Contrast-Loss）"><a href="#1）时间对比损失（Temporal-Contrast-Loss）" class="headerlink" title="1）时间对比损失（Temporal Contrast Loss）"></a>1）时间对比损失（Temporal Contrast Loss）</h3><p>该损失鼓励节点表示在短时间内尽可能平稳。</p><p>给定节点 $v_i$ 在时间 $t$ 前后的记忆向量分别为 $\mathbf{s}_i^{\prime}$ 与 $\mathbf{s}_i$，其时间对比损失为：</p><p>$\ell_c(v_i, t) = 1 - \cos(\mathbf{s}_i^{\prime}, \mathbf{s}_i)$</p><p>批次级别的总对比损失为：</p><p>$L<em>c = \frac{1}{|E_B|} \sum</em>{(v<em>i, v_j, t) \in E_B} \omega</em>{cs} \cdot \ell<em>c(v_i, t) + \omega</em>{cd} \cdot \ell_c(v_j, t)$</p><p>其中 $\omega<em>{cs}, \omega</em>{cd}$ 是源节点与目标节点的权重。</p><hr><h3 id="2）记忆生成损失（Memory-Generation-Loss）"><a href="#2）记忆生成损失（Memory-Generation-Loss）" class="headerlink" title="2）记忆生成损失（Memory Generation Loss）"></a>2）记忆生成损失（Memory Generation Loss）</h3><p>该损失衡量基于短期邻居生成的记忆向量与真实记忆之间的误差：</p><p>$\ell_g(v_i, t) = 1 - \cos(\hat{\mathbf{s}}_i, \mathbf{s}_i)$</p><p>总体生成损失为：</p><p>$L<em>g = \frac{1}{|E_B|} \sum</em>{(v<em>i, v_j, t) \in E_B} \omega</em>{gs} \cdot \ell<em>g(v_i, t) + \omega</em>{gd} \cdot \ell_g(v_j, t)$</p><hr><h3 id="最终损失函数"><a href="#最终损失函数" class="headerlink" title="最终损失函数"></a>最终损失函数</h3><p>最终总损失为上述两者之和：</p><p>$L = L_c + L_g$</p><p>注意：虽然训练中并不使用异常标签，但作者假设训练集中的大部分节点是正常的，因此模型能有效学习正常行为。</p><hr><h2 id="4-3-异常评分（Anomaly-Scoring）"><a href="#4-3-异常评分（Anomaly-Scoring）" class="headerlink" title="4.3 异常评分（Anomaly Scoring）"></a>4.3 异常评分（Anomaly Scoring）</h2><p>SLADE 在推理阶段根据两个评分函数对每个节点进行异常检测：</p><h3 id="1）时间对比评分（Temporal-Contrast-Score）"><a href="#1）时间对比评分（Temporal-Contrast-Score）" class="headerlink" title="1）时间对比评分（Temporal Contrast Score）"></a>1）时间对比评分（Temporal Contrast Score）</h3><p>衡量当前和之前的记忆向量之间的差异：</p><p>$s_{cc}(v_i, t) = 1 - \cos(\mathbf{s}_i^{\prime}, \mathbf{s}_i)$</p><p>该评分越高，表示当前行为偏离长期行为越严重，可能异常。</p><hr><h3 id="2）记忆生成评分（Memory-Generation-Score）"><a href="#2）记忆生成评分（Memory-Generation-Score）" class="headerlink" title="2）记忆生成评分（Memory Generation Score）"></a>2）记忆生成评分（Memory Generation Score）</h3><p>衡量当前记忆与由邻居生成记忆的相似度：</p><p>$s_{cg}(v_i, t) = 1 - \cos(\hat{\mathbf{s}}_i, \mathbf{s}_i)$</p><p>该评分越高，表示短期行为无法重建正常行为，可能异常。</p><hr><p>最终异常评分为两个得分的加权平均或合并，后续章节中作者会做消融实验验证各项得分的有效性。</p><hr><p>下一章是 <strong>第 5 章：讨论与分析（Discussion and Analysis）</strong>，如你希望我继续翻译，请告诉我！我也可以帮你画图梳理结构关系图。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地图可视化</title>
      <link href="/2025/03/20/map/"/>
      <url>/2025/03/20/map/</url>
      
        <content type="html"><![CDATA[<p>现在需要根据所给经纬度的范围，绘制对应的实际地图</p><p>有三种方法</p>]]></content>
      
      
      <categories>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Antiattack问题</title>
      <link href="/2025/02/20/Antiattack/"/>
      <url>/2025/02/20/Antiattack/</url>
      
        <content type="html"><![CDATA[<p>Q： 使用云服务器时，上传新的代码，终端运行python XXXX.py。但结果跑的是没修改过原来的代码。</p><p>A： 使用pip install -e .</p><p><code>pip install -e .</code> 是一个用于安装 Python 包的开发模式（可编辑模式）的命令，通常用于本地开发。它的作用如下：</p><hr><h3 id="1-可编辑模式（Editable-Mode）"><a href="#1-可编辑模式（Editable-Mode）" class="headerlink" title="1. 可编辑模式（Editable Mode）"></a><strong>1. 可编辑模式（Editable Mode）</strong></h3><ul><li><strong><code>-e</code></strong> 是 <code>--editable</code> 的缩写，表示以“可编辑”模式安装包。</li><li>安装后，包的代码会直接<strong>链接到源代码所在的目录</strong>（而不是复制到 <code>site-packages</code> 中）。</li><li><strong>修改代码后立即生效</strong>，无需重新安装包（适合开发调试）。</li></ul><hr><h3 id="2-的含义"><a href="#2-的含义" class="headerlink" title="2. . 的含义"></a><strong>2. <code>.</code> 的含义</strong></h3><ul><li><code>.</code> 表示当前目录，命令会在当前目录下查找 <code>setup.py</code> 或 <code>pyproject.toml</code> 文件。</li><li>根据这些文件中的配置（如包名、依赖、版本等）安装包。</li></ul><hr><h3 id="3-实际效果"><a href="#3-实际效果" class="headerlink" title="3. 实际效果"></a><strong>3. 实际效果</strong></h3><ul><li>包会被安装到 Python 环境的 <code>site-packages</code> 目录，但会生成一个 <strong><code>.pth</code> 文件</strong>或 <strong><code>egg-link</code> 文件</strong>，指向项目的本地目录。</li><li>例如：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/your/project</span><br></pre></td></tr></table></figure>修改项目中的代码后，下次导入包时会直接使用最新的代码。</li></ul><hr><h3 id="4-适用场景"><a href="#4-适用场景" class="headerlink" title="4. 适用场景"></a><strong>4. 适用场景</strong></h3><ul><li><strong>开发阶段</strong>：频繁修改代码时，无需反复执行 <code>pip install .</code>。</li><li><strong>依赖管理</strong>：其他项目可以通过 <code>pip install -e .</code> 直接依赖本地开发的包。</li></ul><hr><h3 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a><strong>5. 示例</strong></h3><p>假设你的项目目录结构如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_project/</span><br><span class="line">├── setup.py</span><br><span class="line">└── my_package/</span><br><span class="line">    └── __init__.py</span><br></pre></td></tr></table></figure></p><p>执行 <code>pip install -e .</code> 后：</p><ul><li><code>my_package</code> 会被安装到 Python 环境。</li><li>修改 <code>my_package/__init__.py</code> 后，改动会<strong>立即生效</strong>，无需重新安装。</li></ul><hr><h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a><strong>6. 注意事项</strong></h3><ul><li>需要项目目录包含 <code>setup.py</code> 或 <code>pyproject.toml</code> 文件（用于定义包信息）。</li><li>生产环境中一般<strong>不使用</strong> <code>-e</code> 模式，而是通过 <code>pip install .</code> 安装固定版本。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p><code>pip install -e .</code> 是一种高效的开发方式，允许代码修改后实时生效，适合需要频繁调试的 Python 项目。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Subset Node Representation Learning over Large Dynamic Graphs</title>
      <link href="/2025/02/20/DynamicPPE/"/>
      <url>/2025/02/20/DynamicPPE/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=10301657">[Subset Node Representation Learning over Large Dynamic Graphs])</a></p><p>代码地址：<a href="https://github.com/zjlxgxz/DynAnom">zjlxgxz/DynAnom: Codebase for KDD22 paper “Subset Node Anomaly Tracking over Large Dynamic Graphs”</a></p><hr><p>现实中的动态网络规模大，传统方法计算所有顶点的表示成本过高，因为特定应用通常只关注小部分节点。本文聚焦于在大规模动态网络中，为少量目标节点高效学习动态嵌入的问题。</p><p>由于在特定应用中可能只有一小部分节点是感兴趣的，因此随时间计算所有顶点的表示成本过高。因此，在这种典型用例下，为这些大规模动态网络高效地学习动态嵌入既具有重要意义，也面临技术挑战。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RustGraph-Robust Anomaly Detection in Dynamic Graphs by Jointly Learning Structural-Temporal Dependency</title>
      <link href="/2025/01/13/RustGraph/"/>
      <url>/2025/01/13/RustGraph/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=10301657">RustGraph</a></p><p>代码地址：<a href="https://github.com/aubreygjh/RustGraph">RustGraph IEEE TKDE</a></p><hr><h1 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h1><hr><p>这篇论文主要解决了在动态图中进行<strong>异常检测</strong>的两个关键问题：</p><ul><li><strong>问题1：</strong> 现有方法将结构和时间动态分开建模，无法充分捕捉二者之间的依赖关系。</li><li><strong>问题2：</strong> 现有方法依赖负采样生成噪声标签，导致模型对标签噪声的敏感性过高。</li></ul><h2 id="结构信息与时间动态的独立建模问题"><a href="#结构信息与时间动态的独立建模问题" class="headerlink" title="结构信息与时间动态的独立建模问题"></a><strong>结构信息与时间动态的独立建模问题</strong></h2><p>现有的动态图异常检测方法通常将<strong>图的拓扑结构</strong>和<strong>时间动态</strong>分开建模，导致未能充分利用结构与时间之间的相互依赖关系。大多数方法（如GCN+GRU组合）将这两个维度分别处理，忽视了两者之间的<strong>联合作用</strong>。这一独立建模的方式降低了模型的表现，因为在动态图中，结构的变化往往与时间的演变密切相关。</p><p><strong>RustGraph的解决方案</strong>：<br> RustGraph提出了一个<strong>结构-时间联合学习框架</strong>，通过一个变分结构-时间图自动编码器（VST-GAE）同时编码图的<strong>结构信息</strong>和<strong>时间信息</strong>。这种联合学习的方法能够更好地捕捉结构变化与时间依赖之间的关系，从而提高异常检测的精度。</p><h2 id="噪声标签问题"><a href="#噪声标签问题" class="headerlink" title="噪声标签问题"></a><strong>噪声标签问题</strong></h2><p>由于<strong>真实世界中的异常事件是稀缺的</strong>，很多现有方法通过<strong>负采样</strong>（例如随机替换正常边的端点）生成伪标签来训练模型。然而，这种生成方式容易引入<strong>噪声标签</strong>，即正常边被误标为异常，或异常边被误标为正常。这种噪声标签的存在会显著影响模型的鲁棒性，导致模型在实际应用中表现不稳定，尤其在数据中有较多扰动或标签不准确的情况下。</p><p><strong>RustGraph的解决方案</strong>：<br>   RustGraph通过设计一个<strong>鲁棒异常检测器</strong>来解决噪声标签问题。该方法结合<strong>结构正则化</strong>和<strong>标签平滑</strong>策略，利用图的结构信息作为高层次的约束，帮助模型避免过拟合噪声标签。此外，RustGraph还通过图重建和标签迭代的方式，逐步校正噪声标签，增强了模型对数据不可靠性的抗扰能力。</p><p>RustGraph通过联合学习结构和时间依赖关系，以及引入鲁棒的异常检测机制，解决了这两个问题，使得动态图异常检测更加精确和鲁棒。</p><hr><h1 id="动机和创新点"><a href="#动机和创新点" class="headerlink" title="动机和创新点"></a>动机和创新点</h1><hr><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a><strong>动机</strong></h3><p>本文的动机主要源于以下几个方面的挑战和需求：</p><ol><li><p><strong>动态图中的异常检测需求</strong></p><ul><li>在现实世界中，很多场景（如社交网络、金融系统、交通网络等）都产生动态变化的图数据，如何准确地<strong>检测动态图中的异常</strong>（如突发事件、恶意活动等）已成为一个重要研究问题。现有方法多半依赖于分开建模结构和时间，缺乏对二者联合建模的探索，这限制了异常检测的性能。</li></ul></li><li><p><strong>结构与时间的耦合关系未被充分利用</strong></p><ul><li>在动态图中，节点和边的<strong>拓扑结构</strong>随时间变化而发生改变，<strong>结构变化与时间动态之间存在复杂的相互依赖</strong>。现有的方法往往将这两者独立建模，无法有效捕捉其之间的相互作用。而<strong>RustGraph</strong>的提出正是基于这一动机：希望通过联合建模结构和时间信息，来提高异常检测的准确性。</li></ul></li><li><p><strong>标签噪声对异常检测的影响</strong></p><ul><li>在实际应用中，<strong>异常标签的稀缺性</strong>和<strong>高质量标注困难</strong>使得许多方法依赖于负采样等策略来生成伪标签，这可能会引入<strong>标签噪声</strong>，使得模型对异常数据的检测能力大大下降。RustGraph的创新动机是设计一种<strong>鲁棒的异常检测方法</strong>，能够有效抵御噪声标签带来的干扰，通过结构信息的正则化和标签平滑机制，使得模型在标签噪声较大的环境下仍然能够保持较好的性能。</li></ul></li><li><p><strong>提高模型在噪声环境下的鲁棒性</strong></p><ul><li>在实际应用中，图数据可能会受到各种<strong>噪声干扰</strong>（如节点或边的丢失、错误的标签等）。现有方法多忽视噪声标签带来的问题，导致模型的鲁棒性较差。RustGraph旨在通过设计鲁棒的图异常检测机制，使得模型在有噪声标签或扰动的情况下仍能有效检测异常。</li></ul></li></ol><h3 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a><strong>创新点</strong></h3><p>本文的创新点主要体现在以下几个方面：</p><ol><li><p><strong>结构-时间依赖的联合学习框架 (RustGraph)</strong></p><ul><li>现有的大多数动态图异常检测方法将<strong>结构信息</strong>和<strong>时间动态信息</strong>分开处理。RustGraph的创新之处在于它提出了一个<strong>结构-时间联合学习</strong>的框架，能够同时考虑图的拓扑结构和时间动态。通过这种方法，RustGraph能够更好地捕捉<strong>结构演变与时间变化之间的依赖关系</strong>，提升异常检测的精度。</li></ul></li><li><p><strong>变分结构-时间图自动编码器（VST-GAE）</strong></p><ul><li>为了解决结构和时间信息分离建模的问题，RustGraph设计了一个<strong>变分结构-时间图自动编码器</strong>（VST-GAE）。该模型通过引入<strong>变分推理</strong>来学习动态图的表示，同时将历史时间戳的结构信息作为先验，以提高对时间变化的捕捉能力。与传统的单纯基于变分自编码器（VAE）的结构不同，VST-GAE引入了<strong>图拉普拉斯特征变化</strong>来指导模型学习。</li></ul></li><li><p><strong>时间一致性图对比学习（TC-GCL）</strong></p><ul><li>RustGraph提出了<strong>时间一致性图对比学习</strong>（TC-GCL），这是一个创新性的<strong>对比学习</strong>方法。它通过最大化相邻快照中相同节点的表示之间的相似度，确保模型能够捕捉到节点在时间维度上的一致性。该方法<strong>无需图增强操作</strong>（如边扰动），因此在减少计算复杂度的同时，依然能够保留时间上的一致性，有效地提升了动态图异常检测的表现。</li></ul></li><li><p><strong>噪声标签的鲁棒学习</strong></p><ul><li>针对现有方法依赖负采样生成伪标签所带来的<strong>噪声标签问题</strong>，RustGraph提出了一个<strong>鲁棒异常检测器</strong>，该检测器通过引入<strong>结构正则化</strong>和<strong>标签平滑</strong>的策略，帮助模型对抗噪声标签。通过这些创新机制，RustGraph不仅能够缓解标签噪声的影响，还能在训练过程中通过图结构的约束，逐步优化模型，使其在标签不可靠的情况下仍能保持良好的性能。</li></ul></li></ol><p><strong>RustGraph</strong>的创新点在于联合学习图的结构与时间动态、提出了变分结构-时间图自动编码器（VST-GAE）和时间一致性图对比学习（TC-GCL）方法，并解决了噪声标签问题，提供了鲁棒的异常检测框架。其核心动机在于弥补现有方法在结构-时间建模和噪声标签处理方面的不足，进而提升动态图异常检测的精度和鲁棒性。</p><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><hr><p>好的！我将按照您的要求，确保文中所有公式的字母使用 LaTeX 格式，并用 $$ 包围公式，以下是完整重新生成的内容：</p><hr><h3 id="方法部分总结"><a href="#方法部分总结" class="headerlink" title="方法部分总结"></a><strong>方法部分总结</strong></h3><p>在该部分，主要从以下几个方面对 <strong>RustGraph</strong> 的设计进行了阐述：</p><hr><h3 id="（A）结构-时间图编码器"><a href="#（A）结构-时间图编码器" class="headerlink" title="（A）结构-时间图编码器"></a><strong>（A）结构-时间图编码器</strong></h3><h4 id="1-VST-GAE（变分结构-时间图自动编码器）"><a href="#1-VST-GAE（变分结构-时间图自动编码器）" class="headerlink" title="1. VST-GAE（变分结构-时间图自动编码器）"></a><strong>1. VST-GAE（变分结构-时间图自动编码器）</strong></h4><ul><li><p><strong>设计目标</strong>：<br>为了学习耦合结构-时间图的表示，文献提出了 <strong>变分结构-时间图自动编码器（VST-GAE）</strong>，将图的结构和时间依赖信息联合到统一框架中，用于动态图表示学习。</p></li><li><p><strong>后验分布推断</strong>：<br>对于给定图快照 (G^{t} = (A^{t}, X^{t}))，节点嵌入 (Z^{t}) 的后验分布通过以下公式推断：</p><script type="math/tex; mode=display">q\left(Z^{t}\vert A^{t}, X^{t}, h^{t - 1}\right) = \prod_{i = 1}^{N_{t}} q\left(Z_{i}^{t}\vert A^{t}, X^{t}, h^{t - 1}\right)</script><p>每个节点的潜在表示 (Z_{i}^{t}) 假设服从高斯分布：</p><script type="math/tex; mode=display">Z_{i}^{t} \sim \mathcal{N}\left(\mu_{i,enc}^{t}, \text{diag}\left(\left(\sigma_{i,enc}^{t}\right)^{2}\right)\right)</script><p>其中均值和标准差通过图神经网络（GNN）计算得到：</p><script type="math/tex; mode=display">\left(\mu_{enc}^{t}, \sigma_{enc}^{t}\right) = \text{GNN}\left(A^{t}, X^{t} \oplus h^{t - 1}\right)</script><ul><li>(q())：表示后验概率分布；</li><li>(\mathcal{N}())：表示高斯分布；</li><li>(\mu<em>{enc}^{t})、(\sigma</em>{enc}^{t})：分别为均值和标准差矩阵；</li><li>(GNN)：为图编码器（可采用 GraphSAGE）；</li><li>(\oplus)：表示连接操作符；</li><li>节点嵌入 (Z^{t} \in \mathbb{R}^{N_{t} \times d}) 通过重参数化技巧从高斯分布中采样得到。</li></ul></li></ul><hr><ul><li><p><strong>重构过程</strong>：<br>利用推断出的潜在变量 (Z^{t})，通过非线性解码器重建原始的邻接矩阵和节点特征：</p><script type="math/tex; mode=display">\hat{X}^{t} = \text{MLP}\left(Z^{t}\right)</script><script type="math/tex; mode=display">\hat{A}^{t} = \sigma\left(Z^{t} Z^{t^{\top}}\right)</script><p>其中，(\sigma) 表示 Sigmoid 激活函数，(\text{MLP}) 为多层感知机。</p></li></ul><hr><ul><li><p><strong>先验分布建模</strong>：<br>先验分布不是采用标准高斯分布，而是利用历史信息进行建模，其估计公式如下：</p><script type="math/tex; mode=display">p\left(Z^{t}\vert h^{t - 1}, \Delta u^{t}\right) = \prod_{i = 1}^{N_{t}} p\left(Z_{i}^{t}\vert h^{t - 1}, \Delta u^{t}\right)</script><p>其中每个节点的潜在表示假设服从高斯分布：</p><script type="math/tex; mode=display">Z_{i}^{t} \sim \mathcal{N}\left(\mu_{i,prior}^{t}, \text{diag}\left(\left(\sigma_{i,prior}^{t}\right)^{2}\right)\right)</script><p>均值和标准差通过一个多层感知机计算得到：</p><script type="math/tex; mode=display">\left(\mu_{prior}^{t}, \sigma_{prior}^{t}\right) = \text{MLP}\left(h^{t - 1} \oplus \Delta u^{t}\right)</script><p>其中：</p><script type="math/tex; mode=display">\Delta u^{t} = |u^{t} - u^{t - 1}|</script><p>表示当前时间快照和前一个时间快照中图拉普拉斯矩阵特征向量的差异。</p></li></ul><hr><ul><li><p><strong>隐藏状态更新</strong>：<br>对于隐藏状态向量 (h^{t})，使用 <strong>GraphGRU</strong> 进行更新，具体公式如下：</p><script type="math/tex; mode=display">X^{\prime t} = \phi^{x}\left(X^{t}\right) \oplus \phi^{z}\left(Z^{t}\right)</script><script type="math/tex; mode=display">z^{t} = \sigma\left(\text{GNN}_{xz}\left(A^{t}, X^{\prime t}\right) + \text{GNN}_{hz}\left(A^{t}, h^{t - 1}\right)\right)</script><script type="math/tex; mode=display">r^{t} = \sigma\left(\text{GNN}_{xr}\left(A^{t}, X^{\prime t}\right) + \text{GNN}_{hr}\left(A^{t}, h^{t - 1}\right)\right)</script><script type="math/tex; mode=display">h^{\prime} = \tanh\left(\text{GNN}_{xh}\left(A^{t}, X^{\prime t}\right) + \text{GNN}_{hh}\left(A^{t}, h^{t - 1} \circ r^{t}\right)\right)</script><script type="math/tex; mode=display">h^{t} = (1 - z^{t}) \circ h^{t - 1} + z^{t} \circ h^{\prime}</script><p>其中：</p><ul><li>(\phi^{x}) 和 (\phi^{z}) 是投影函数（如多层感知机）；</li><li>(\circ) 表示哈达玛积。</li></ul></li></ul><hr><ul><li><p><strong>损失函数</strong>：<br>VST-GAE 模块的整体损失函数由变分下界（Evidence Lower Bound, ELBO）推导得出：</p><script type="math/tex; mode=display">\mathcal{L}_{gen} = \mathbb{E}_{q\left(Z^{t}\vert A^{t}, X^{t}, h^{t - 1}\right)} \left[\log p\left(A^{t}, X^{t}\vert Z^{t}\right)\right] - \text{KL}\left(q\left(Z^{t}\vert A^{t}, X^{t}, h^{t - 1}\right) \parallel p\left(Z^{t}\vert h^{t - 1}, \Delta u^{t}\right)\right)</script><p>其中：</p><ul><li>第一项是重构损失，衡量通过潜在表示重构邻接矩阵和节点特征与真实值之间的误差；</li><li>第二项是 KL 散度，衡量后验分布与先验分布之间的差异，用作正则化项。</li></ul></li></ul><hr><h3 id="2-TC-GCL（时间一致图对比学习）"><a href="#2-TC-GCL（时间一致图对比学习）" class="headerlink" title="2. TC-GCL（时间一致图对比学习）"></a><strong>2. TC-GCL（时间一致图对比学习）</strong></h3><ul><li><p><strong>设计目标</strong>：<br>为了保持连续快照之间的语义一致性，提出了 <strong>时间一致图对比学习（TC-GCL）</strong>，将锚定时间戳 (t) 的相邻快照视为增强视图：</p><script type="math/tex; mode=display">\mathbb{Z}^{aug(t)} = \{Z^{t - 1}, Z^{t + 1}\}</script><p>……</p></li></ul><hr><p>由于篇幅较长，我将分段完成复述并严格按照您的要求处理。请确认以上部分是否符合您的期望，若确认无误，我会立即完成剩余部分！</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeneralDyG - A Generalizable Anomaly Detection Method in Dynamic Graphs</title>
      <link href="/2025/01/10/GeneralDyG/"/>
      <url>/2025/01/10/GeneralDyG/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://arxiv.org/pdf/2412.16447">2412.16447</a></p><p>代码地址：<a href="https://github.com/YXNTU/GeneralDyG">YXNTU/GeneralDyG</a></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本研究提出了GeneralDyG方法，通过对时间自我图进行采样，并依次提取结构和时间特征，以应对实现泛化性的三个关键挑战：数据多样性、动态特征捕获和计算成本。</p><p>引言</p><h3 id="引言部分总结"><a href="#引言部分总结" class="headerlink" title="引言部分总结"></a>引言部分总结</h3><ul><li>图在众多领域用于建模复杂系统，现实中图数据常随时间演变，如知识网络每月有新知识及连接变化。动态图挖掘受关注，其中异常检测对识别偏离正常模式的节点或边意义重大，可用于检测欺诈、垃圾邮件和网络入侵等，有助于增强系统安全与完整性。</li><li>深度学习方法虽推动了动态图异常检测进展，但缺乏跨任务或数据集的泛化性。现有方法存在对异常事件编码不佳、时间信息捕获能力弱等问题，像 SimpleDyG 丢弃拓扑结构信息不适合节点和边缘异常检测，TADDY 位置编码有缺陷，GDN 未整合时间值信息在特定数据集表现差。开发通用方法面临数据多样性、动态特征捕获和计算成本挑战。</li></ul><div class="table-container"><table><thead><tr><th>引用文献</th><th>方法名称</th><th>主要特点</th><th>在异常检测中的不足</th></tr></thead><tbody><tr><td>Deng 和 Hooi（2021）</td><td>GDN</td><td>将结构学习与图神经网络结合，利用注意力权重增强异常可解释性</td><td>在对时间数据建模时未整合特定时间值信息，在比特币 - Alpha 和比特币 - OTC 等时间敏感数据集上性能不佳</td></tr><tr><td>Cai 等人（2021）</td><td>StrGNN</td><td>提取以边为中心的 h - hop 封闭子图，用 GCN 建模结构信息，GRU 捕获快照间相关性</td><td>未提及（文中未着重说明其在泛化性方面的特定显著不足）</td></tr><tr><td>Park、Hoshi 和 Kemp（2018）</td><td>LSTM - VAE</td><td>融合 LSTM 和变分自编码器检测异常</td><td>未提及（文中未着重说明其在泛化性方面的特定显著不足）</td></tr><tr><td>Liu 等人（2021）</td><td>TADDY</td><td>使用 Transformer 处理多种编码并计算异常分数</td><td>节点位置特定编码可能导致结构信息模糊，在节点异常检测任务中效果欠佳；位置编码方法可能无法捕捉结构相似性及建模结构相互作用</td></tr><tr><td>Lee、Kim 和 Shin（2024）</td><td>SLADE</td><td>通过自监督学习检测动态边缘流中的异常</td><td>未提及（文中未着重说明其在泛化性方面的特定显著不足）</td></tr><tr><td>Tian 等人（2023）</td><td>SAD</td><td>采用半监督方法进行动态图异常检测</td><td>未提及（文中未着重说明其在泛化性方面的特定显著不足）</td></tr><tr><td>Wu、Fang 和 Liao（2024）</td><td>SimpleDyG</td><td>将动态图视为序列建模问题，有创新时间对齐技术</td><td>几乎丢弃所有拓扑结构信息，仅标记节点，在节点预测任务中丢失关键结构信息，不适合节点和边缘异常检测任务</td></tr></tbody></table></div><p>开发一种高度可泛化的动态图异常检测方法面临几个挑战，主要包括：</p><ol><li><strong>数据多样性</strong>：动态图数据集之间的差异，如拓扑结构、节点和边的属性，可能很大。该方法必须识别并适应广泛的特征分布。</li><li><strong>动态特征捕获</strong>：动态图中的异常可能发生在局部（例如，特定节点或边的异常行为）或全局（例如，网络拓扑的异常变化）。该方法必须捕获局部和全局动态特征。</li><li><strong>计算成本</strong>：动态图异常检测通常涉及大规模图数据，使得计算资源和时间效率成为重大挑战。</li></ol><p>主要贡献：</p><ul><li><p><strong>提出了一种新型时间自我图采样方法</strong>，在减少计算成本的同时保留了关键的时序和结构信息。</p></li><li><p><strong>设计了一个通用的GNN提取器TensGNN</strong>，能够同时处理节点和边的多属性特征。</p></li><li><p><strong>结合时间和拓扑结构信息的Transformer模型</strong>，有效提升了异常检测的准确性和通用性。</p></li><li><p>在四个真实世界数据集上的实验结果表明，GeneralDyG优于当前最先进的异常检测方法，尤其在具有高度动态特征的数据集上表现尤为显著。</p><hr></li></ul><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><div class="table-container"><table><thead><tr><th>相关工作分类</th><th>具体方法</th><th>方法描述</th></tr></thead><tbody><tr><td>动态图异常检测</td><td>M-GAT</td><td>采用多头注意力机制与模态内和模态间注意力模块，明确建模不同模态相关性，用于动态图中的异常节点检测</td></tr><tr><td></td><td>MTADGAT</td><td>结合两个并行的图注意力层，在时间和特征维度上捕获多元时间序列中的复杂依赖关系，进行异常检测</td></tr><tr><td></td><td>GDN</td><td>将结构学习与图神经网络相结合，利用注意力权重增强检测到的异常的可解释性</td></tr><tr><td></td><td>FuSAGNet</td><td>通过将稀疏自编码器与图神经网络相结合，优化重建和预测，对多元时间序列关系建模并预测未来行为，以检测异常</td></tr><tr><td></td><td>SEDANSPOT</td><td>一种用于检测边缘流中异常的随机算法</td></tr><tr><td></td><td>Midas</td><td>基于微簇的边缘流异常检测器，采用假设 - 验证的方法</td></tr><tr><td></td><td>Addgraph</td><td>利用 GCN 从切片中提取图结构信息，接着采用 GRU - attention 进行异常检测</td></tr><tr><td></td><td>StrGNN</td><td>提取以边为中心的 h - hop 封闭子图，使用 GCN 对快照上的结构信息进行建模，用 GRU 捕获快照之间的相关性来检测异常</td></tr><tr><td></td><td>SAD</td><td>引入半监督方法，利用时间记忆库和伪标签对比学习模块，有效利用有标签和无标签数据检测动态图流中的异常</td></tr><tr><td>动态图上的 Transformer</td><td>GraphERT</td><td>率先使用 Transformer，通过在图随机游走序列上采用掩码语言模型，将图结构学习与时间分析无缝集成</td></tr><tr><td></td><td>GraphLSTA</td><td>通过循环注意力机制有效提取和整合长期和短期时间特征，从而捕获动态图的演化模式</td></tr><tr><td></td><td>Taddy</td><td>使用 Transformer 处理基于扩散的空间编码、基于距离的空间编码和相对时间编码，随后通过池化层导出边缘表示以计算异常分数</td></tr><tr><td></td><td>SimpleDyG</td><td>将动态图重新解释为序列建模问题，并提出了一种创新的时间对齐技术，简化建模过程并捕获动态图的内在时间演化模式</td></tr></tbody></table></div><hr><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h4 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a><strong>符号说明</strong></h4><ul><li><p><strong>连续时间动态图（CTDG，Continuous-Time Dynamic Graph）</strong><br>动态图 <script type="math/tex">G = (V, E)</script> 被定义为一个包含节点集合 <script type="math/tex">V</script> 和时间有序边集合 <script type="math/tex">E</script> 的图，其中：</p><ul><li><script type="math/tex">V</script> 是所有参与时间边的节点集合；</li><li><script type="math/tex">E</script> 是按时间顺序排列的一系列边，表示节点之间的交互。</li></ul></li><li><p><strong>边的定义</strong><br>每一条边 <script type="math/tex">\delta(t) = (v_i, v_j, t, e_{ij})</script> 表示在时间 <script type="math/tex">t</script> 时节点 <script type="math/tex">v_i</script> 和节点 <script type="math/tex">v_j</script> 之间的交互，其关联特征为 <script type="math/tex">e_{ij}</script>。</p></li><li><p><strong>节点属性</strong><br>对于任意节点 <script type="math/tex">v_i, v_j \in V</script>，其属性分别记为 <script type="math/tex">x_{v_i}, x_{v_j} \in \mathbb{R}^d</script>。所有节点的属性可以表示为矩阵 <script type="math/tex">X \in \mathbb{R}^{n \times d}</script>，其中 <script type="math/tex">n</script> 是节点数量，<script type="math/tex">d</script> 是每个节点的属性维度。</p></li><li><p><strong>边属性</strong><br>对于任意边 <script type="math/tex">e_{ij} \in E</script>，其属性记为 <script type="math/tex">y_{e_{ij}} \in \mathbb{R}^d</script>。所有边的属性可以表示为矩阵 <script type="math/tex">Y \in \mathbb{R}^{m \times d}</script>，其中 <script type="math/tex">m</script> 是边的数量，<script type="math/tex">d</script> 是每条边的属性维度。</p></li><li><p><strong>异常事件</strong><br>本文中将<strong>节点</strong>和<strong>边</strong>的异常统称为<strong>异常事件（Anomalous Events）</strong>，分别用集合 <script type="math/tex">V</script> 和 <script type="math/tex">E</script> 表示异常的节点和边。因此，异常事件集合记为 <script type="math/tex">A</script>，而异常特征集合（即节点和边的属性集合）记为 <script type="math/tex">Z</script>。</p></li></ul><p><strong>问题定义</strong>： </p><p>本文旨在每个时间戳检测异常边和节点。基于上述符号，将动态图中的异常检测建模为计算异常分数的任务。</p><p>给定动态图 <script type="math/tex">G</script>，其中每个 <script type="math/tex">G_t = (V_t, E_t)</script> 表示时间戳 <script type="math/tex">t</script> 的图，异常检测目标是识别此演化结构中的异常边和节点。对于每条边 <script type="math/tex">e \in E_t</script> 和节点 <script type="math/tex">v \in V_t</script>，分别计算异常分数 <script type="math/tex">f(e)</script> 和 <script type="math/tex">f(v)</script>，<script type="math/tex">f</script> 是可学习的异常分数函数。异常分数量化边和节点的异常程度，分数 <script type="math/tex">f(e)</script> 或 <script type="math/tex">f(v)</script> 越高，表明边 <script type="math/tex">e</script> 或节点 <script type="math/tex">v</script> 异常可能性越大。</p><p>基于先前研究，在动态图异常检测中采用无监督方法。训练时，所有边和节点视为正常，测试时提供二元标签评估算法性能。具体而言，<script type="math/tex">y_e = 1</script> 表示 <script type="math/tex">e</script> 异常，<script type="math/tex">y_e = 0</script> 表示正常；<script type="math/tex">y_n = 1</script> 表示节点异常。需注意，异常标签通常不平衡，正常边和节点数量远多于异常的数量。</p><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>总体框架由三个主要组件构成：<strong>时间自我图采样</strong>、<strong>时间自我图 GNN 提取器</strong>和<strong>时间感知Transformer</strong>。图 1 展示了所提框架概览。</p><p>首先，在每个异常事件层面提取自我图，捕获 k-hop 时间动态，将其转换为保留时间和结构顺序的异常特征序列（图 1 (a)）。</p><p>接着，通过 GNN 模型处理这些序列，提取时间自我图的结构细节（图 1 (b)）。</p><p>最后，将原始序列特征和富含结构的序列特征都输入 Transformer，评估异常检测任务（图 1 (c)）。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20250110102528363.png" alt="image-20250110102528363"></p><hr><h2 id="Temporal-ego-graph-sampling"><a href="#Temporal-ego-graph-sampling" class="headerlink" title="Temporal ego-graph sampling"></a>Temporal ego-graph sampling</h2><hr><h4 id="1-动机与背景"><a href="#1-动机与背景" class="headerlink" title="1. 动机与背景"></a><strong>1. 动机与背景</strong></h4><p>在动态图中，节点和边的拓扑结构随时间不断变化，因此在进行异常检测时，不能简单地将整个图作为一个静态快照处理。为了更有效地捕获节点或边在不同时间上的局部动态特征，作者提出了 <strong>Temporal Ego-Graph Sampling</strong> 方法。</p><p><strong>核心目标：</strong>  </p><ul><li>在每个时间戳下，为待检测的<strong>异常事件（节点或边）</strong>提取一个包含<strong>时间信息</strong>的局部子图（ego-graph）。  </li><li>这种时间自我图（temporal ego-graph）能够捕获与该事件相关的<strong>历史交互信息</strong>，从而为后续的 GNN 和 Transformer 模块提供输入。</li></ul><h4 id="2-定义与符号说明"><a href="#2-定义与符号说明" class="headerlink" title="2. 定义与符号说明"></a><strong>2. 定义与符号说明</strong></h4><ul><li>给定一个<strong>动态图</strong> <script type="math/tex">G = (V, E)</script>，其中 <script type="math/tex">V</script> 表示节点集合，<script type="math/tex">E</script> 表示边集合。</li><li>对于每个异常事件 <script type="math/tex">a_i \in A</script>（其中 <script type="math/tex">A</script> 表示所有异常事件，包括节点和边），使用 <strong>k-hop 算法</strong> 提取以 <script type="math/tex">a_i</script> 为中心的时间自我图。</li><li><strong>k-hop 时间自我图</strong>：指在时间序列上，包含从中心事件 <script type="math/tex">a_i</script> 出发，沿着时间顺序最多 <script type="math/tex">k</script> 步（hop）内的所有相关事件的局部子图。</li></ul><h4 id="3-采样步骤"><a href="#3-采样步骤" class="headerlink" title="3. 采样步骤"></a><strong>3. 采样步骤</strong></h4><h5 id="步骤-1：构建时间序列"><a href="#步骤-1：构建时间序列" class="headerlink" title="步骤 1：构建时间序列"></a><strong>步骤 1：构建时间序列</strong></h5><p>对于每个待检测的异常事件 <script type="math/tex">a_i</script>，首先按照时间顺序提取与其有关的历史交互事件。这些历史事件构成一个<strong>时间序列</strong>，记为：</p><script type="math/tex; mode=display">w_i = \langle a_i^{(1)}, a_i^{(2)}, \dots, a_i^{(t)} \rangle</script><p>其中：</p><ul><li><script type="math/tex">a_i^{(t)}</script> 表示在时间 <script type="math/tex">t</script> 与中心事件 <script type="math/tex">a_i</script> 发生过交互的事件；</li><li>事件之间按时间顺序排列。</li></ul><h5 id="步骤-2：k-hop-邻居采样"><a href="#步骤-2：k-hop-邻居采样" class="headerlink" title="步骤 2：k-hop 邻居采样"></a><strong>步骤 2：k-hop 邻居采样</strong></h5><p>采用 <strong>k-hop 算法</strong> 提取与中心事件相关的邻居事件集：</p><ul><li><strong>1-hop 邻居</strong>：与中心事件直接发生交互的所有事件；</li><li><strong>2-hop 邻居</strong>：与 <strong>1-hop 邻居</strong> 发生交互的事件；</li><li>依次类推，直到 <script type="math/tex">k</script>-hop。</li></ul><p>这种采样方式能够在局部范围内捕获节点和边的时间动态特征。</p><h5 id="步骤-3：引入特殊标记符"><a href="#步骤-3：引入特殊标记符" class="headerlink" title="步骤 3：引入特殊标记符"></a><strong>步骤 3：引入特殊标记符</strong></h5><p>为了保留时间序列的层次结构信息，作者借鉴自然语言处理中的方法，为每一层的邻居事件添加特殊标记符，形成分层结构的输入序列。完整的输入序列形式如下：</p><script type="math/tex; mode=display">\text{input}_i = \langle \text{[KHS]}, a_i, \text{[KHS]}, a_i^{(1)}, a_i^{(2)}, \dots, \text{[KHS]}, a_i^{(k)} \rangle</script><p>其中：</p><ul><li><strong>[KHS]</strong> 是特殊标记符，用于分隔不同 hop 的事件集合；</li><li><script type="math/tex">a_i</script> 表示中心事件；</li><li><script type="math/tex">a_i^{(j)}</script> 表示第 <script type="math/tex">j</script> 层的邻居事件集合。</li></ul><p>这些特殊标记符有助于模型识别不同层次的邻居关系，确保 Transformer 在处理输入时能够更好地捕获邻居之间的时间顺序与层次关系。</p><h4 id="4-示例说明"><a href="#4-示例说明" class="headerlink" title="4. 示例说明"></a><strong>4. 示例说明</strong></h4><p>假设一个动态图中包含以下交互关系：</p><ul><li>在时间 <script type="math/tex">t_1</script>，节点 <script type="math/tex">v_1</script> 与节点 <script type="math/tex">v_2</script> 发生交互；</li><li>在时间 <script type="math/tex">t_2</script>，节点 <script type="math/tex">v_2</script> 与节点 <script type="math/tex">v_3</script> 发生交互；</li><li>在时间 <script type="math/tex">t_3</script>，节点 <script type="math/tex">v_3</script> 与节点 <script type="math/tex">v_4</script> 发生交互。</li></ul><p>现在我们希望针对时间 <script type="math/tex">t_3</script> 的异常事件（即节点 <script type="math/tex">v_3</script> 的交互）进行异常检测：</p><ol><li><strong>1-hop 邻居</strong>：提取与节点 <script type="math/tex">v_3</script> 直接交互的节点 <script type="math/tex">v_2</script> 和 <script type="math/tex">v_4</script>；</li><li><strong>2-hop 邻居</strong>：进一步提取与节点 <script type="math/tex">v_2</script> 和 <script type="math/tex">v_4</script> 发生交互的节点 <script type="math/tex">v_1</script>；</li><li><strong>构建时间序列</strong>：将这些节点按时间顺序排列，并添加特殊标记符，形成最终的输入序列。</li></ol><h4 id="5-优势分析"><a href="#5-优势分析" class="headerlink" title="5. 优势分析"></a><strong>5. 优势分析</strong></h4><ol><li><p><strong>局部动态特征的提取</strong><br>与传统的快照方法不同，Temporal Ego-Graph Sampling 通过逐层提取邻居信息，能够捕获节点和边在时间维度上的局部动态特征。这种局部化处理方式不仅减少了计算复杂度，还能更精确地建模异常事件的时间演化模式。</p></li><li><p><strong>减少计算成本</strong><br>相较于直接处理整个动态图，采样方法只关注与待检测事件相关的局部子图，大大降低了计算成本。这种方法特别适用于大规模动态图异常检测任务。</p></li><li><p><strong>增强模型的泛化能力</strong><br>通过引入 k-hop 时间邻居和特殊标记符，模型能够在不同类型的动态图上保持较好的泛化能力。实验结果表明，这种采样方法对不同数据集的异常检测任务均有显著提升。</p></li></ol><h4 id="6-数学表示与输入形式"><a href="#6-数学表示与输入形式" class="headerlink" title="6. 数学表示与输入形式"></a><strong>6. 数学表示与输入形式</strong></h4><p>假设中心事件为 <script type="math/tex">a_i</script>，其 k-hop 时间自我图采样得到的输入序列可以形式化表示为：</p><script type="math/tex; mode=display">\text{input}_i = \langle \text{[KHS]}, a_i, \text{[KHS]}, a_i^{(1)}, a_i^{(2)}, \ldots, a_i^{(k)}, \text{[KHS]} \rangle</script><p>其中每一层的事件集合按时间顺序排列，输入序列将作为后续 GNN 和 Transformer 模块的输入，用于提取特征并计算异常分数。</p><h4 id="7-Temporal-Ego-Graph-Sampling-与传统方法的区别"><a href="#7-Temporal-Ego-Graph-Sampling-与传统方法的区别" class="headerlink" title="7. Temporal Ego-Graph Sampling 与传统方法的区别"></a><strong>7. Temporal Ego-Graph Sampling 与传统方法的区别</strong></h4><div class="table-container"><table><thead><tr><th><strong>特性</strong></th><th><strong>传统快照方法</strong></th><th><strong>Temporal Ego-Graph Sampling</strong></th></tr></thead><tbody><tr><td><strong>处理方式</strong></td><td>整体快照，处理整个动态图</td><td>局部采样，处理局部 k-hop 时间子图</td></tr><tr><td><strong>时间维度建模</strong></td><td>时间维度通常被忽略或弱化</td><td>明确建模时间顺序，捕获历史动态特征</td></tr><tr><td><strong>计算成本</strong></td><td>高</td><td>低</td></tr><tr><td><strong>泛化能力</strong></td><td>对不同类型的数据集泛化能力较差</td><td>具有较强的泛化能力</td></tr><tr><td><strong>模型输入</strong></td><td>全图特征</td><td>分层时间自我图特征</td></tr></tbody></table></div><h4 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a><strong>8. 总结</strong></h4><p><strong>Temporal Ego-Graph Sampling</strong> 是 GeneralDyG 方法的核心模块之一，它通过 k-hop 时间邻居采样和分层结构构建，有效提取了局部动态特征，极大地提升了动态图异常检测的效率与准确性。与传统快照方法相比，这种采样方式在计算效率、泛化能力和特征提取效果上都有显著优势。</p><hr><h2 id="Temporal-ego-graph-GNN-extractor"><a href="#Temporal-ego-graph-GNN-extractor" class="headerlink" title="Temporal ego-graph GNN extractor"></a>Temporal ego-graph GNN extractor</h2><hr><h4 id="1-普通-GNN-的工作机制"><a href="#1-普通-GNN-的工作机制" class="headerlink" title="1. 普通 GNN 的工作机制"></a><strong>1. 普通 GNN 的工作机制</strong></h4><p><strong>普通 GNN 的核心思想：</strong><br>普通图神经网络（Graph Neural Networks, GNN）通过<strong>邻接矩阵</strong>和<strong>特征矩阵</strong>来对图中的节点进行表示更新。常见的 GNN（如 GCN, Graph Convolutional Network）采用图卷积的方式，将邻居节点的特征聚合到当前节点，从而更新节点的表示。</p><p>普通 GNN 的数学表示为：</p><script type="math/tex; mode=display">H^{(k+1)} = \sigma\left( \tilde{A} H^{(k)} W^{(k)} \right)</script><ul><li><script type="math/tex">H^{(k)}</script> 表示第 <script type="math/tex">k</script> 层的节点特征矩阵；</li><li><script type="math/tex">\tilde{A} = D^{-1/2} (A + I) D^{-1/2}</script> 是添加自环后的归一化邻接矩阵；</li><li><script type="math/tex">W^{(k)}</script> 是第 <script type="math/tex">k</script> 层的可学习权重矩阵；</li><li><script type="math/tex">\sigma</script> 是激活函数。</li></ul><p>普通 GNN 的特征聚合过程主要发生在节点层，<strong>边的作用仅通过邻接矩阵来间接影响节点特征更新</strong>。因此，普通 GNN 无法直接处理具有丰富边属性的动态图。</p><h4 id="2-Temporal-Ego-Graph-GNN-Extractor-的数学原理"><a href="#2-Temporal-Ego-Graph-GNN-Extractor-的数学原理" class="headerlink" title="2. Temporal Ego-Graph GNN Extractor 的数学原理"></a><strong>2. Temporal Ego-Graph GNN Extractor 的数学原理</strong></h4><p><strong>TensGNN 的设计理念：</strong><br>与普通 GNN 不同，Temporal Ego-Graph GNN Extractor（TensGNN）不仅对节点进行特征更新，还对<strong>边</strong>进行特征更新。其关键思想是交替使用节点层和边层，通过<strong>消息传递机制（Message Passing）</strong>在节点和边之间传递信息，从而实现对动态图的全面建模。</p><h5 id="（1）节点层的特征更新"><a href="#（1）节点层的特征更新" class="headerlink" title="（1）节点层的特征更新"></a><strong>（1）节点层的特征更新</strong></h5><p>在第 <script type="math/tex">k</script> 层节点特征更新时，每个节点 <script type="math/tex">v</script> 的特征不仅依赖于其邻居节点的特征，还依赖于连接该节点的边的特征。节点层的特征更新公式为：</p><script type="math/tex; mode=display">H_{v}^{(k+1)} = \sigma \left( T^T H_{e}^{(k)} W_{e}' \odot \bar{A}_{v} H_{v}^{(k)} W_{v} \right)</script><p>其中：</p><ul><li><script type="math/tex">H_{v}^{(k)}</script> 表示第 <script type="math/tex">k</script> 层的节点特征；</li><li><script type="math/tex">T</script> 是一个<strong>二值连接矩阵</strong>，<script type="math/tex">T_{ij} = 1</script> 表示节点 <script type="math/tex">i</script> 和边 <script type="math/tex">j</script> 相连；</li><li><script type="math/tex">H_{e}^{(k)}</script> 表示第 <script type="math/tex">k</script> 层的边特征；</li><li><script type="math/tex">\bar{A}_{v}</script> 是节点的归一化拉普拉斯-邻接矩阵；</li><li><script type="math/tex">W_{e}'</script> 和 <script type="math/tex">W_{v}</script> 为可学习的权重矩阵；</li><li><script type="math/tex">\odot</script> 表示哈达玛积（逐元素乘积）；</li><li><script type="math/tex">\sigma</script> 是激活函数。</li></ul><p>这一公式中，通过 <script type="math/tex">T^T H_{e}^{(k)}</script>，节点可以从与其相连的边中接收到信息，从而使节点特征更新时能够考虑边的属性。</p><h5 id="（2）边层的特征更新"><a href="#（2）边层的特征更新" class="headerlink" title="（2）边层的特征更新"></a><strong>（2）边层的特征更新</strong></h5><p>类似于节点层，在第 <script type="math/tex">k</script> 层边特征更新时，每条边的特征不仅依赖于其连接的节点特征，还依赖于边自身的特征。边层的特征更新公式为：</p><script type="math/tex; mode=display">H_{e}^{(k+1)} = \sigma \left( T H_{v}^{(k+1)} W_{v}' \odot \bar{A}_{e} H_{e}^{(k)} W_{e} \right)</script><p>其中：</p><ul><li><script type="math/tex">H_{e}^{(k)}</script> 表示第 <script type="math/tex">k</script> 层的边特征；</li><li><script type="math/tex">\bar{A}_{e}</script> 是边的归一化拉普拉斯-邻接矩阵；</li><li><script type="math/tex">W_{v}'</script> 和 <script type="math/tex">W_{e}</script> 为可学习的权重矩阵。</li></ul><p>这一公式中，通过 <script type="math/tex">T H_{v}^{(k+1)}</script>，边可以从与其相连的节点中接收到信息，从而在特征更新时考虑节点的属性。</p><h5 id="（3）消息传递机制的核心"><a href="#（3）消息传递机制的核心" class="headerlink" title="（3）消息传递机制的核心"></a><strong>（3）消息传递机制的核心</strong></h5><p>TensGNN 的消息传递机制与普通 GNN 的关键区别在于：</p><ol><li><p><strong>双向消息传递</strong>：普通 GNN 仅在节点之间进行消息传递，而 TensGNN 实现了<strong>节点与边之间的双向消息传递</strong>。节点通过连接的边接收信息，边通过连接的节点接收信息。</p></li><li><p><strong>交替更新</strong>：TensGNN 交替使用节点层和边层，这种交替更新方式可以逐层提取更丰富的动态特征，捕获节点与边之间的复杂交互关系。</p></li><li><p><strong>处理边特征</strong>：普通 GNN 通常只考虑节点特征，而 TensGNN 明确引入边特征的更新机制，适用于包含大量边属性的动态图建模。</p></li></ol><h4 id="3-TensGNN-与普通-GNN-的区别总结"><a href="#3-TensGNN-与普通-GNN-的区别总结" class="headerlink" title="3. TensGNN 与普通 GNN 的区别总结"></a><strong>3. TensGNN 与普通 GNN 的区别总结</strong></h4><div class="table-container"><table><thead><tr><th><strong>特性</strong></th><th><strong>普通 GNN</strong></th><th><strong>TensGNN（Temporal Ego-Graph GNN Extractor）</strong></th></tr></thead><tbody><tr><td><strong>消息传递范围</strong></td><td>仅在节点之间</td><td>节点与边之间双向消息传递</td></tr><tr><td><strong>边特征处理</strong></td><td>边仅通过邻接矩阵间接参与特征更新</td><td>显式建模边特征，边与节点交替更新</td></tr><tr><td><strong>适用场景</strong></td><td>静态图或边属性简单的动态图</td><td>动态图，尤其是边属性丰富的动态图</td></tr><tr><td><strong>特征更新机制</strong></td><td>节点特征基于邻居节点特征更新</td><td>节点特征和边特征交替更新，捕获节点-边复杂交互</td></tr><tr><td><strong>动态特征捕获能力</strong></td><td>弱</td><td>强</td></tr></tbody></table></div><h4 id="4-数学原理的直观理解"><a href="#4-数学原理的直观理解" class="headerlink" title="4. 数学原理的直观理解"></a><strong>4. 数学原理的直观理解</strong></h4><p>TensGNN 的交替更新机制可以看作是模拟了一种更为真实的图结构交互模式。在动态图中，节点之间的交互关系是通过边传递的，因此仅通过邻居节点更新节点特征可能会导致信息丢失。而 TensGNN 通过边层和节点层的交替更新，不仅能够捕获节点之间的直接关系，还能捕获通过边间接传递的动态信息。</p><p>这种机制类似于在一个社交网络中，消息不仅通过朋友（节点）传播，还会通过具体的交互行为（边）进行传递。因此，TensGNN 能够更好地模拟动态图中的实际动态特性，从而提升异常检测的效果。</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h4><p>Temporal Ego-Graph GNN Extractor 的数学原理通过引入边层与节点层的交替消息传递机制，克服了普通 GNN 在动态环境中信息不全面的问题。其核心优势在于双向消息传递和显式处理边特征，使其能够在包含复杂动态交互的场景中表现出色。</p><hr><h2 id="Temporal-Aware-Transformer"><a href="#Temporal-Aware-Transformer" class="headerlink" title="Temporal-Aware Transformer"></a>Temporal-Aware Transformer</h2><hr><h4 id="1-动机与背景-1"><a href="#1-动机与背景-1" class="headerlink" title="1. 动机与背景"></a><strong>1. 动机与背景</strong></h4><p>动态图异常检测任务需要同时建模<strong>时间动态特征</strong>和<strong>局部拓扑结构信息</strong>。传统的图神经网络（GNN）在处理图的结构信息方面表现出色，但在时间维度建模方面存在局限性。而 Transformer 擅长处理时间序列数据，能够捕获长距离依赖关系。因此，作者提出了 <strong>Temporal-Aware Transformer</strong>，结合 GNN 提取的结构特征和 Transformer 的自注意力机制，构建一个强大的动态图异常检测框架。</p><p>Temporal-Aware Transformer 的核心是<strong>基于核平滑（Kernel Smoothing）的注意力机制</strong>，能够同时捕获事件的时间顺序和拓扑信息，并计算节点或边的异常分数。</p><h4 id="2-Temporal-Aware-Transformer-的核心结构与公式"><a href="#2-Temporal-Aware-Transformer-的核心结构与公式" class="headerlink" title="2. Temporal-Aware Transformer 的核心结构与公式"></a><strong>2. Temporal-Aware Transformer 的核心结构与公式</strong></h4><p>Temporal-Aware Transformer 的主要流程包括以下三个步骤：</p><ol><li><strong>输入特征构建</strong>：从 <strong>Temporal Ego-Graph Sampling</strong> 得到的时间序列作为 Transformer 的输入特征。  </li><li><strong>基于核平滑的注意力计算</strong>：通过指数核函数计算事件之间的相似性，得到加权后的特征嵌入。  </li><li><strong>异常分数计算</strong>：使用嵌入特征计算每个节点或边的异常分数。</li></ol><h5 id="（1）输入特征表示"><a href="#（1）输入特征表示" class="headerlink" title="（1）输入特征表示"></a><strong>（1）输入特征表示</strong></h5><p>对于一个中心事件 <script type="math/tex">a_i</script>，通过 <strong>Temporal Ego-Graph Sampling</strong> 得到的 k-hop 时间邻居事件集合表示为：</p><script type="math/tex; mode=display">\text{input}_i = \langle \text{[KHS]}, a_i, \text{[KHS]}, a_i^{(1)}, a_i^{(2)}, \ldots, a_i^{(k)}, \text{[KHS]} \rangle</script><p>其中：</p><ul><li><strong>$a_i$</strong> 表示当前中心事件；</li><li><strong>$a_i^{(1)}, a_i^{(2)}, \ldots, a_i^{(k)}$</strong> 表示中心事件的 k-hop 邻居事件；</li><li><strong>[KHS]</strong> 是特殊标记符，用于区分不同 hop 层的邻居。</li></ul><p>每个事件 <script type="math/tex">a_i</script> 的特征向量表示为 <script type="math/tex">z_i \in \mathbb{R}^{d_{\text{in}}}</script>，整个输入序列可以用矩阵 <script type="math/tex">Z</script> 表示为：</p><script type="math/tex; mode=display">Z = [z_1, z_2, \ldots, z_n] \in \mathbb{R}^{n \times d_{\text{in}}}</script><p>其中 <strong>$n$</strong> 表示序列中事件的数量，<strong>$d_{\text{in}}$</strong> 表示每个事件的特征维度。</p><h5 id="（2）基于核平滑的注意力机制"><a href="#（2）基于核平滑的注意力机制" class="headerlink" title="（2）基于核平滑的注意力机制"></a><strong>（2）基于核平滑的注意力机制</strong></h5><p>Temporal-Aware Transformer 采用了一种<strong>基于指数核函数的注意力机制</strong>，其具体形式如下：</p><script type="math/tex; mode=display">F_{\text{exp}}(x, x') := \exp\left(\frac{\langle w_Q x, w_K x' \rangle}{\sqrt{d_{\text{out}}}}\right)</script><p>其中：</p><ul><li><strong>$x$ 和 $x’$</strong> 表示输入特征向量；</li><li><strong>$\langle \cdot, \cdot \rangle$</strong> 表示内积操作；</li><li><p><strong>$w_Q$ 和 $w_K$</strong> 为查询和键的线性变换，具体形式如下：</p><script type="math/tex; mode=display">w_Q = W \phi(z_i) + b,\quad w_K = W \phi(z_i) + b</script><p>其中 <strong>$\phi(z_i)$</strong> 表示通过 GNN 提取的结构特征，<strong>$W$ 和 $b$</strong> 为可学习的权重矩阵和偏置项。</p></li></ul><p>指数核函数的使用使得相似性度量更加平滑和灵活，能够更精确地捕获不同时间步之间事件的相关性。</p><h5 id="（3）值矩阵计算"><a href="#（3）值矩阵计算" class="headerlink" title="（3）值矩阵计算"></a><strong>（3）值矩阵计算</strong></h5><p>值矩阵 <script type="math/tex">w_V</script> 的计算公式如下：</p><script type="math/tex; mode=display">w_V = W z_i + b</script><p>其中 <strong>$z_i$</strong> 表示输入事件的原始特征，<strong>$W$ 和 $b$</strong> 为可学习的参数。</p><h5 id="（4）最终嵌入计算"><a href="#（4）最终嵌入计算" class="headerlink" title="（4）最终嵌入计算"></a><strong>（4）最终嵌入计算</strong></h5><p>基于核平滑的注意力机制通过对邻居事件的特征进行加权求和，计算得到中心事件的最终嵌入表示：</p><script type="math/tex; mode=display">\text{Attn}(z_i) = \frac{\sum_{z_j \in k\text{-DG}} F_{\text{exp}}(z_i, z_j) w_V z_j}{\sum_{z_w \in k\text{-DG}} F_{\text{exp}}(z_i, z_w)}</script><p>其中：</p><ul><li><strong>$k\text{-DG}$</strong> 表示中心事件的 k-hop 邻居集合；</li><li>分子部分通过指数核函数计算相似性后，对邻居事件特征进行加权求和；</li><li>分母部分是归一化项，确保注意力权重的总和为 1。</li></ul><p>最终的嵌入向量为：</p><script type="math/tex; mode=display">\text{Embed}(z_i) = \text{Attn}(z_i)</script><p>该嵌入向量同时包含了时间动态特征和结构信息，可用于后续的异常分数计算。</p><h4 id="3-异常分数计算"><a href="#3-异常分数计算" class="headerlink" title="3. 异常分数计算"></a><strong>3. 异常分数计算</strong></h4><p>对于每个事件 <script type="math/tex">z_i</script> 的嵌入向量，使用一个可学习的函数 <script type="math/tex">f</script> 计算其异常分数：</p><script type="math/tex; mode=display">\text{Score}(z_i) = f(z_i)</script><p>异常分数越高，表示该事件越可能为异常节点或边。</p><h4 id="4-Temporal-Aware-Transformer-的特点与优势"><a href="#4-Temporal-Aware-Transformer-的特点与优势" class="headerlink" title="4. Temporal-Aware Transformer 的特点与优势"></a><strong>4. Temporal-Aware Transformer 的特点与优势</strong></h4><ol><li><p><strong>时间与结构信息的有效结合</strong>  </p><ul><li>在注意力机制中引入 GNN 提取的结构特征，确保模型在计算注意力时能够同时关注<strong>时间顺序</strong>和<strong>局部拓扑结构信息</strong>。</li></ul></li><li><p><strong>基于核平滑的注意力机制</strong>  </p><ul><li>使用指数核函数计算邻居事件之间的相似性，使得模型对局部动态特征更为敏感，有助于精确检测异常模式。</li></ul></li><li><p><strong>支持长距离依赖建模</strong>  </p><ul><li>相较于 GNN 只能处理局部依赖关系，Transformer 能够建模长距离依赖，使得 Temporal-Aware Transformer 可以捕获跨多个时间步的长期依赖信息。</li></ul></li><li><p><strong>计算效率高</strong>  </p><ul><li>通过 <strong>Temporal Ego-Graph Sampling</strong> 提取局部时间子图，减少了全局计算量，提高了计算效率。</li></ul></li></ol><h4 id="5-与普通-Transformer-的区别"><a href="#5-与普通-Transformer-的区别" class="headerlink" title="5. 与普通 Transformer 的区别"></a><strong>5. 与普通 Transformer 的区别</strong></h4><div class="table-container"><table><thead><tr><th><strong>特性</strong></th><th><strong>普通 Transformer</strong></th><th><strong>Temporal-Aware Transformer</strong></th></tr></thead><tbody><tr><td><strong>输入特征</strong></td><td>时间序列或文本嵌入</td><td>时间自我图采样得到的事件特征</td></tr><tr><td><strong>注意力机制</strong></td><td>点积注意力</td><td>核平滑注意力机制</td></tr><tr><td><strong>时间信息建模</strong></td><td>通过位置编码（Positional Encoding）建模</td><td>结合时间自我图采样的时间顺序建模</td></tr><tr><td><strong>结构信息建模</strong></td><td>无显式结构信息建模</td><td>结合 GNN 提取的结构信息</td></tr><tr><td><strong>适用场景</strong></td><td>时间序列建模或自然语言处理</td><td>动态图异常检测</td></tr></tbody></table></div><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h4><p><strong>Temporal-Aware Transformer</strong> 通过引入基于指数核函数的注意力机制和 GNN 提取的结构特征，有效解决了动态图异常检测任务中时间动态特征与局部拓扑结构信息的建模问题。相比于普通 Transformer 和传统 GNN，Temporal-Aware Transformer 在灵活性、表达能力和泛化能力上表现更优。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20250110171018692.png" alt="image-20250110171018692"></p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DGraphFin数据集</title>
      <link href="/2025/01/09/DGraph%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>/2025/01/09/DGraph%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>网站地址：<a href="https://dgraph.xinye.com/introduction">dgraph-web</a></p><p>论文地址：<a href="https://arxiv.org/pdf/2207.03579">2207.03579</a></p><p>baseline：<a href="https://github.com/DGraphXinye/DGraphFin_baseline">DGraphXinye/DGraphFin_baseline: This is a repository contaning baseline code for DGraphFin Dataset</a></p><h1 id="DGraph"><a href="#DGraph" class="headerlink" title="DGraph"></a>DGraph</h1><p><em>DGraph</em>提供了来自各个领域（如金融网络和社交网络）的<strong>动态数据集的集合</strong>。DGraph 旨在帮助社区更好地探索和理解动态图的演变，<strong>以及</strong>评估动态图建模方法。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20250109104207679.png" alt="image-20250109104207679"></p><h1 id="DGraph-Fin"><a href="#DGraph-Fin" class="headerlink" title="DGraph-Fin"></a>DGraph-Fin</h1><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20250109105325373.png" alt="image-20250109105325373"></p><p><strong>标签：</strong>为了更好地了解实际的财务场景，我们将节点分为 foreground nodes （前景节点） 和 background nodes （后台节点）。前景节点是标记为正常 （Class 0） 和欺诈 （Class 1） 的节点，它们也是我们预测任务的节点。另一方面，背景节点与任务无关，但在维护图形的连接性方面发挥着重要作用。</p><p><strong>任务：</strong>DGraph-Fin 的任务是根据节点特征和图形结构信息检测欺诈用户。这是财务场景中的常见任务。我们将节点随机分成训练/验证/测试集，比例为 70：15：15。</p><p><strong>不断发展的模式：</strong>DGraph-Fin 中的每个边缘都包含时间信息，表示用户填写该紧急联系人的时间。为了保护隐私，使用加密的时间戳来表示时间</p><h3 id="DGraphFin-数据文件描述"><a href="#DGraphFin-数据文件描述" class="headerlink" title="DGraphFin 数据文件描述"></a><strong>DGraphFin 数据文件描述</strong></h3><p>文件 <strong>dgraphfin.npz</strong> 包含以下键值（keys）：</p><ul><li><p><strong>x</strong>：17 维节点特征。</p></li><li><p><strong>y</strong>：节点标签。<br>   数据集中共有 <strong>四种类别</strong>，每个类别的节点数量如下：</p><ul><li><strong>0</strong> 类：1,210,092 个节点</li><li><strong>1</strong> 类：15,509 个节点</li><li><strong>2</strong> 类：1,620,851 个节点</li><li><p><strong>3</strong> 类：854,098 个节点</p><p><strong>任务描述</strong>：</p></li><li><p><strong>类 1</strong> 表示欺诈用户，<strong>类 0</strong> 表示正常用户，模型需要预测这两个类别的节点。</p></li><li><strong>类 2 和类 3</strong> 表示背景用户。</li></ul></li><li><p>edge_index：形状为 (4300999, 2)边索引矩阵。</p><ul><li>每一行表示一条边，格式为 <code>(id_a, id_b)</code>，其中 <code>id_a</code> 和 <code>id_b</code> 是 <code>x</code> 中节点的索引。</li></ul></li><li><p><strong>edge_type</strong>：边的类型，共有 <strong>11 种不同类型的边</strong>。</p></li><li><p><strong>edge_timestamp</strong>：每条边的去敏化时间戳。</p></li><li><p>train_mask, valid_mask, test_mask：</p><ul><li><strong>类 0（正常用户）</strong>和 <strong>类 1（欺诈用户）</strong>的节点被随机划分为训练集、验证集和测试集，比例为 <strong>70% / 15% / 15%</strong>。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Graph Representation Learning with Neural Networks - A Survey</title>
      <link href="/2025/01/07/%E5%8A%A8%E6%80%81%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%BC%E8%BF%B0/"/>
      <url>/2025/01/07/%E5%8A%A8%E6%80%81%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://arxiv.org/pdf/2304.05729">2304.05729</a></p><p>代码地址</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUBANOM-Efficient Subgraph Anomaly Detection Framework over Dynamic Graphs</title>
      <link href="/2025/01/06/SUBANOM/"/>
      <url>/2025/01/06/SUBANOM/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=10411569">IEEE Xplore Full-Text PDF:</a></p><p>代码仓库：<a href="https://github.com/Baderlic/SubAnom">Baderlic/SubAnom: The code and data for SubAnom</a></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>给定一个动态图，如何通过节点嵌入有效地跟踪异常子图是一个重要的挑战。解决这一问题需要一个有效的评分机制和创新的异常子图检测策略。然而，现有方法主要集中于设计评分策略或使用孤立节点的图结构，这导致无法有效捕捉异常子图的结构信息。</p><p>在本文中，我们提出了一种名为 <strong>SUBANOM</strong> 的新型子图异常检测框架，该框架能够高效识别异常子图。SUBANOM 包括三个关键组件：</p><p>1）我们采用当前最先进的动态嵌入方法，高效计算节点嵌入，从而成功捕捉所有节点级别的异常；</p><p>2）我们设计了新的子图识别策略，包括 <strong>k-hop</strong> 和 <strong>三元闭包</strong>（triadic-closure），这些策略可以区分强邻居和弱邻居，从而有效捕捉异常结构信息；</p><p>3）为了量化异常子图，我们提出了基于 <strong>p-范数</strong> 的评分聚合函数。</p><p>这些迭代步骤使我们能够高效处理大规模动态图。</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20250106155950190.png" alt="image-20250106155950190"></p><p>在动态图中识别异常子图是一项至关重要的任务，具有广泛的应用场景，例如在社交网络中检测事件、在金融网络中识别异常用户群体，以及在用户-项目图中发现异常的评论者集群等。这类任务的核心在于有效地检测出随着时间变化而发生的图结构变化，尤其是局部子图中显著的异常行为。</p><p>现有的子图异常检测方法主要可以分为两类：<strong>基于结构的方法</strong>和<strong>基于表示学习的方法</strong>。</p><p><strong>基于结构的方法</strong>通常依赖用户指定的评分函数，通过复杂的优化算法对目标函数进行求解。然而，这类方法不仅计算成本高，在动态环境下也难以适用，因为动态图通常包含成千上万个快照，每个快照中又包含大量节点和边。</p><p>随着动态图表示学习技术的快速发展，<strong>基于表示学习</strong>的方法逐渐成为主流。这些方法通过节点嵌入来高效捕捉节点的异常信息，证明了在跟踪动态图中的异常节点方面具有较高的效率。然而，现有的基于表示学习的方法通常仅关注单个节点的异常检测，而忽略了局部子图的结构信息，从而无法识别隐藏的重要异常模式。</p><p>针对上述问题，本文提出了一个新颖的异常子图检测框架 <strong>SUBANOM</strong>，该框架基于动态节点嵌入，并通过创新的子图识别策略来有效捕捉局部异常子图结构。我们的研究旨在回答以下关键问题：<strong>如何基于动态节点嵌入有效地检测出子图级别的异常结构信息？</strong></p><p>我们提出的 <strong>SUBANOM</strong> 框架包含三个关键组件：</p><ol><li>设计了一种高效的动态节点嵌入算法，以动态维护节点表示并检测节点级别的异常；</li><li>提出了一种基于 <strong>k-hop 邻域</strong> 和 <strong>三元闭包</strong> 的子图生成策略，能够捕捉局部异常结构信息；</li><li>引入了多种异常评分聚合策略（如 <strong>p-范数聚合</strong>），对生成的子图进行量化评分。</li></ol><p>实验结果表明，与当前最先进的子图异常检测方法相比，<strong>SUBANOM</strong> 在多个真实世界的数据集上均取得了显著的性能提升。我们的方法不仅提高了检测精度，还在处理大规模动态图方面表现出较高的计算效率。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵理论复习1</title>
      <link href="/2024/12/22/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A01/"/>
      <url>/2024/12/22/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<p>1.2</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222162501404.png" alt="image-20241222162501404" style="zoom:50%;" /></p><p>1.4</p><p>投影</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222174646385.png" alt="image-20241222174646385"></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222174652186.png" alt="image-20241222174652186"></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222174700689.png" alt="image-20241222174700689"></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222174743519.png" alt="image-20241222174743519"></p>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构复习5</title>
      <link href="/2024/12/22/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A05/"/>
      <url>/2024/12/22/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A05/</url>
      
        <content type="html"><![CDATA[<h1 id="第5章-存储系统"><a href="#第5章-存储系统" class="headerlink" title="第5章  存储系统"></a>第5章  存储系统</h1><h2 id="存储器的分类和主要特点"><a href="#存储器的分类和主要特点" class="headerlink" title="存储器的分类和主要特点"></a>存储器的分类和主要特点</h2><p>Ø半导体存储器</p><p>Ø磁表面存储器</p><p>Ø光盘存储器</p><p>存储器存取方式:Ø随机存取存储器(RAM)Ø顺序存取存储器(SAM)</p><p>利用局部性原理：</p><p><strong>.</strong> <strong>以最便宜技术提供尽可能多的存储空间</strong></p><p><strong>.</strong> <strong>以最快的技术提供访问</strong></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222140102579.png" alt="image-20241222140102579" style="zoom:50%;" /></p><h2 id="Cache的三种映像关系：全相联、直接映像、组相联"><a href="#Cache的三种映像关系：全相联、直接映像、组相联" class="headerlink" title="Cache的三种映像关系：全相联、直接映像、组相联"></a>Cache的三种映像关系：全相联、直接映像、组相联</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222140211188.png" alt="image-20241222140211188" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222140226522.png" alt="image-20241222140226522" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222140241063.png" alt="image-20241222140241063" style="zoom:50%;" /></p><h2 id="主存地址Tag、Index、块内偏移三个字段的计算"><a href="#主存地址Tag、Index、块内偏移三个字段的计算" class="headerlink" title="主存地址Tag、Index、块内偏移三个字段的计算"></a>主存地址Tag、Index、块内偏移三个字段的计算</h2><h2 id="Cache块的替换策略"><a href="#Cache块的替换策略" class="headerlink" title="Cache块的替换策略"></a>Cache块的替换策略</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222141357364.png" alt="image-20241222141357364" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222141405729.png" alt="image-20241222141405729" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222141413292.png" alt="image-20241222141413292" style="zoom:50%;" /></p><h2 id="Cache的读写过程"><a href="#Cache的读写过程" class="headerlink" title="Cache的读写过程"></a>Cache的读写过程</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222142210405.png" alt="image-20241222142210405" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222142227250.png" alt="image-20241222142227250" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222142251143.png" alt="image-20241222142251143" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222142318999.png" alt="image-20241222142318999" style="zoom:50%;" /></p><h2 id="平均访存时间和CPU时间的计算"><a href="#平均访存时间和CPU时间的计算" class="headerlink" title="平均访存时间和CPU时间的计算"></a>平均访存时间和CPU时间的计算</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222144206820.png" alt="image-20241222144206820" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222144229291.png" alt="image-20241222144229291" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222145154873.png" alt="image-20241222145154873" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222145411312.png" alt="image-20241222145411312" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222145428167.png" alt="image-20241222145428167" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222145445736.png" alt="image-20241222145445736" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222145458729.png" alt="image-20241222145458729" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222145547346.png" alt="image-20241222145547346" style="zoom:50%;" /></p><h2 id="Cache失效率的类别，以及每种失效率的解决方法有哪些"><a href="#Cache失效率的类别，以及每种失效率的解决方法有哪些" class="headerlink" title="Cache失效率的类别，以及每种失效率的解决方法有哪些"></a>Cache失效率的类别，以及每种失效率的解决方法有哪些</h2><p>  按照产生失效的原因不同，可以把失效分为以下3类（简称为“3C”）：</p><p><strong>强制性失效（Compulsory Miss）</strong>：当第一次访问一个块时，该块不在Cache中，需从下一级存储器中调入Cache，这就是强制性失效。这种失效也称为首次访问失效。    </p><p>解决方法：减少强制性失效，可以<strong>增加块的大小</strong>。</p><p><strong>容量失效（Capacity Miss）</strong>：如果Cache容纳不了一个程序执行所需要的所有块，将会发生容量失效（还会发生强制失效），某些块将被丢弃，随后再被调入</p><p>解决方法：要减小容量失效，可以<strong>增大Cache的容量</strong>。</p><p><strong>冲突失效（Conflict Miss）</strong>：在组相联或直接映象Cache中，若太多的块映象到同一组（块）中，则某一个块被放弃，之后再重新调入，这时发生了冲突失效。</p><p>解决方法：冲突失效似乎是最容易减少的，只要采用<strong>全相联</strong>，就不会发生冲突失效。</p><p>1 增加<strong>块容量</strong>：</p><p>• 减少了<strong>强制性失效</strong>，利用了空间局部性；</p><p>• 减少Cache中块的数目，所以有可能会增加<strong>冲突失效</strong>。在Cache容量较小时，甚至还会增加<strong>容量失效</strong>。</p><p>2 提高<strong>相联度</strong></p><p>• 8路组相联在降低失效率方面的作用已经基本和全相联一样有效。也就是说，采用相联度超过8的方法实际意义不大。</p><p>• 2:1 Cache经验规则，它是指容量为<em>N</em> 的直接映象Cache的失效率与容量为<em>N/</em>2的两路组相联Cache的失效率差不多相同</p><p>增加块大小的方法会在<strong>降低失效率</strong>的同时增加<strong>失效开销</strong>，而提高相联度则是以<strong>增加命中时间为代价</strong>。</p><p>3 增大Cache容量</p><p>4 编译器优化</p><h2 id="虚拟地址到物理地址的转换过程，TLB表的原理和作用，与Cache的关系，访存时间的最好情况和最坏情况的判断"><a href="#虚拟地址到物理地址的转换过程，TLB表的原理和作用，与Cache的关系，访存时间的最好情况和最坏情况的判断" class="headerlink" title="虚拟地址到物理地址的转换过程，TLB表的原理和作用，与Cache的关系，访存时间的最好情况和最坏情况的判断"></a>虚拟地址到物理地址的转换过程，TLB表的原理和作用，与Cache的关系，访存时间的最好情况和最坏情况的判断</h2><p><strong>虚拟存储器</strong> 又称虚拟内存，将主存的用作辅助存储器(磁盘)高速缓存的技术。即将磁盘的一部分当作内存使用。</p><p><strong>采用虚拟存储器的目的</strong> Ø更有效地共享处理器和主存 Ø可以运行超过主存容量的程序</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222151539280.png" alt="image-20241222151539280" style="zoom:50%;" /></p><ol><li><p><strong>虚拟地址到物理地址的转换</strong>:</p><ul><li><p><strong>过程</strong>:<br>通过页表进行虚拟地址到物理地址的映射。如果页在内存中，直接存取；如果页在磁盘中，则触发缺页异常。<br>转换步骤：</p><ul><li>处理器产生虚拟地址。</li><li>页表将虚拟页号映射到物理页号，并加上页内偏移，生成物理地址。</li><li>如果有效位为0，表示缺页，操作系统处理缺页异常，将所需页面加载到内存。</li></ul></li><li><p><strong>TLB加速转换</strong>:<br>虚拟地址转换通常需要访问页表，耗费两个存储周期（一个获取物理地址，一个访问数据）。通过TLB（Translation Lookaside Buffer），缓存最近的虚拟地址和物理地址映射，命中时只需一个存储周期。</p></li></ul></li><li><strong>TLB表的原理和作用</strong>:<ul><li><strong>原理</strong>: <ul><li>TLB 是一种专门的高速缓存，存储最近使用过的页表项。</li><li>对虚拟地址的转换，通过查询TLB快速获取物理地址。如果TLB命中，则直接用物理地址访问内存；若TLB缺失，则查询页表补充TLB。</li></ul></li><li><strong>作用</strong>:<ul><li>加速地址转换过程，减少页表访问次数。</li><li>提高虚拟存储器的性能。</li></ul></li></ul></li><li><strong>TLB与Cache的关系</strong>:<ul><li><strong>两者结合</strong>: <ul><li>TLB 用于虚拟地址到物理地址的转换。</li><li>Cache 用于加速数据访问（物理地址）。</li></ul></li><li><strong>访存流程</strong>:<ul><li>处理器生成虚拟地址，TLB将其转换为物理地址。</li><li>使用物理地址在Cache中查找数据。</li></ul></li><li><strong>关系特点</strong>:<ul><li>TLB 负责地址转换，Cache 负责数据缓存。</li><li>TLB 命中与Cache命中分别决定访存时间的长短。<img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222152734263.png" alt="image-20241222152734263" style="zoom:50%;" /></li></ul></li></ul></li><li><strong>访存时间的最好与最坏情况</strong>:<ul><li><strong>最好情况</strong>: <ul><li>TLB命中且Cache命中，访问数据只需1个存储周期。</li></ul></li><li><strong>最坏情况</strong>: <ul><li>TLB缺失、页表缺页、Cache未命中。</li><li>涉及操作：处理缺页异常，加载页面，更新TLB和Cache，最差可能需访问磁盘。</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构复习4</title>
      <link href="/2024/12/21/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A04/"/>
      <url>/2024/12/21/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A04/</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-流水线技术及指令级并行"><a href="#第4章-流水线技术及指令级并行" class="headerlink" title="第4章  流水线技术及指令级并行"></a>第4章  流水线技术及指令级并行</h1><h2 id="1-流水线的概念、分类"><a href="#1-流水线的概念、分类" class="headerlink" title="1.流水线的概念、分类"></a>1.流水线的概念、分类</h2><ul><li><p><strong>概念</strong>：流水线是利用执行指令操作之间的并行性，实现多条指令重叠执行的技术。</p><ul><li>特点：<ul><li><strong>段数（Stage）</strong>：流水线分为多个阶段，每阶段完成指令的部分操作。</li><li><strong>吞吐量</strong>：单位时间内流水线输出的指令数量。</li><li><strong>瓶颈段</strong>：流水线中耗时最长的段，决定了整体性能。</li></ul></li></ul></li><li><p><strong>分类</strong>：</p><ol><li><p>按时间是否均匀：</p><ul><li>均匀流水线：每段时间相等。</li><li>非均匀流水线：段时间不等。</li></ul></li><li><p>按数据类型：</p><ul><li>标量流水线：处理标量数据。</li><li>向量流水线：处理向量数据。</li></ul></li><li><p>按功能：</p><ul><li>单功能流水线：实现单一功能（如浮点运算）。</li><li>多功能流水线：各段可进行不同操作。</li></ul></li><li><p>按工作方式：</p><ul><li>静态流水线：每段连接固定。</li><li>动态流水线：各段连接可变，控制更复杂。</li></ul></li><li><p>按规模：</p><ul><li>操作流水线</li><li>指令流水线</li><li>宏流水线</li></ul></li><li><p>连接方式</p><ul><li>线性流水线</li><li><p>非线性流水线</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220212433470.png" alt="image-20241220212433470" style="zoom:50%;" /></p></li></ul><p>解决访存冲突的办法：</p><p>1)将主存分为两个独立编址的存储器：<strong>指令存储器</strong>和<strong>数据存储器</strong>，CPU可分别独立访问。</p><p>2)<strong>低位交叉</strong>存取方式：可<strong>并行访问</strong>不在同一个存储体中的指令或数据。</p><p>3)指令预取：在重叠操作中，当前一条指令在执行过程中就需要提前取出后面的指令进行相应处理，这种提前取出后继指令进行相应处理，称为先行（预取）。</p></li></ol></li></ul><h2 id="2-流水线的时空图及性能指标计算"><a href="#2-流水线的时空图及性能指标计算" class="headerlink" title="2.流水线的时空图及性能指标计算"></a>2.流水线的时空图及性能指标计算</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220212631434.png" alt="image-20241220212631434" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100245773.png" alt="image-20241221100245773" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100300615.png" alt="image-20241221100300615" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100318452.png" alt="image-20241221100318452" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100332056.png" alt="image-20241221100332056" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100401227.png" alt="image-20241221100401227" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100414857.png" alt="image-20241221100414857" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100645458.png" alt="image-20241221100645458" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100701846.png" alt="image-20241221100701846" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100822536.png" alt="image-20241221100822536" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221100849151.png" alt="image-20241221100849151" style="zoom:50%;" /></p><p><strong>指令级并行</strong>(Instruction-Level Parallelism, ILP)</p><p>1.采用依靠<strong>硬件</strong>来发现和实现ILP(<strong>动态</strong>)，</p><p>2.依赖<strong>软件</strong>编译器来发现和实现ILP(<strong>静态</strong>)。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221102157328.png" alt="image-20241221102157328" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221102235371.png" alt="image-20241221102235371" style="zoom:50%;" /></p><h2 id="3-add-sub-addi-or-ori-lw-sw-beq每条指令在5级流水线的执行过程"><a href="#3-add-sub-addi-or-ori-lw-sw-beq每条指令在5级流水线的执行过程" class="headerlink" title="3.add, sub, addi, or, ori, lw, sw, beq每条指令在5级流水线的执行过程"></a>3.add, sub, addi, or, ori, lw, sw, beq每条指令在5级流水线的执行过程</h2><h2 id="4-结构冒险、数据冒险和控制冒险的判断，以及需要暂停的时钟周期数的判断（控制冒险的解决性能依赖于分支地址计算阶段和分支条件判断阶段）"><a href="#4-结构冒险、数据冒险和控制冒险的判断，以及需要暂停的时钟周期数的判断（控制冒险的解决性能依赖于分支地址计算阶段和分支条件判断阶段）" class="headerlink" title="4.结构冒险、数据冒险和控制冒险的判断，以及需要暂停的时钟周期数的判断（控制冒险的解决性能依赖于分支地址计算阶段和分支条件判断阶段）"></a>4.结构冒险、数据冒险和控制冒险的判断，以及需要暂停的时钟周期数的判断（控制冒险的解决性能依赖于分支地址计算阶段和分支条件判断阶段）</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221102955281.png" alt="image-20241221102955281" style="zoom:50%;" /></p><h2 id="5-结构冒险、数据冒险和控制冒险的解决办法"><a href="#5-结构冒险、数据冒险和控制冒险的解决办法" class="headerlink" title="5.结构冒险、数据冒险和控制冒险的解决办法"></a>5.结构冒险、数据冒险和控制冒险的解决办法</h2><p>结构冒险：</p><p>(1)： 插入暂停周期，即让流水线在完成前一条指令对数据的存储器访问时，暂停取后一条指令（指令存储器）的操作</p><p>(2)： 设置相互独立的指令存储器和数据存储器或设置相互独立的指令Cache和数据Cache</p><p>(1)： 预取指令技术（在重叠操作中，当前一条指令在执行过程中就需要提前取出后面的指令进行相应处理，这种提前取出后继指令进行相应处理，称为先行（预取）。）</p><p>解决数据冒险的一般方式：</p><ol><li>保持冒险，但要避免风险；(调度代码技术)</li><li>消除冒险，通过变化(transform)代码。</li></ol><p>解决数据冒险的一般技术：</p><p>•暂停流水线；</p><p>•使用相关专用数据通路；</p><p>•编译优化调度（静态调度）；</p><p>•动态调度。</p><p><strong>控制冒险</strong>是指因为程序的执行方向可能被改变而引起的相关。可能改变程序执行方向的指令通常有无条件转移、条件转移、子程序调用、中断、异常等。</p><h3 id="控制冒险性能影响及解决方法"><a href="#控制冒险性能影响及解决方法" class="headerlink" title="控制冒险性能影响及解决方法"></a><strong>控制冒险性能影响及解决方法</strong></h3><p>控制冒险会引入流水线停顿，导致吞吐率下降。为了降低控制冒险对性能的影响，通常会采取以下解决方案：</p><h4 id="1-停顿（Stalls）"><a href="#1-停顿（Stalls）" class="headerlink" title="(1) 停顿（Stalls）"></a><strong>(1) 停顿（Stalls）</strong></h4><p>最直接的方法是暂停流水线，等待分支条件判断完成。缺点是会严重影响性能，尤其是分支频率高的程序。</p><hr><h4 id="2-静态分支预测"><a href="#2-静态分支预测" class="headerlink" title="(2) 静态分支预测"></a><strong>(2) 静态分支预测</strong></h4><p>假设分支不会发生，继续执行顺序指令。如果预测正确，则无需停顿；如果预测错误，则需要清空错误指令并重新加载目标指令。</p><ul><li><strong>优点</strong>：实现简单，能减半控制冒险的影响。</li><li><strong>缺点</strong>：预测正确率一般较低（50%左右）。</li></ul><hr><h4 id="3-动态分支预测"><a href="#3-动态分支预测" class="headerlink" title="(3) 动态分支预测"></a><strong>(3) 动态分支预测</strong></h4><p>基于硬件的预测机制，通过记录分支历史信息预测分支是否会发生。动态分支预测的准确率可以达到90%左右，大幅降低控制冒险的性能损失。</p><ul><li>常用方法：<ol><li><strong>1位预测</strong>：只记录最近一次分支的结果。</li><li><strong>2位预测</strong>：只有连续两次错误预测时才改变预测方向，效果更稳定。</li><li><strong>转移目标缓存（BTB）</strong>：提前记录分支目标地址，减少分支地址计算的开销。</li></ol></li></ul><hr><h4 id="4-延迟分支（Delayed-Branching）"><a href="#4-延迟分支（Delayed-Branching）" class="headerlink" title="(4) 延迟分支（Delayed Branching）"></a><strong>(4) 延迟分支（Delayed Branching）</strong></h4><p>延迟分支技术允许编译器在分支指令后插入一条不会受分支影响的指令，从而减少分支延迟带来的性能损失。</p><ul><li><p><strong>限制</strong>：延迟槽中插入的指令有限，编译器需要额外优化代码。</p><p>  <img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221113128630.png" alt="image-20241221113128630" style="zoom:50%;" /></p></li></ul><h2 id="6-流水线中处理中断和异常的方法"><a href="#6-流水线中处理中断和异常的方法" class="headerlink" title="6.流水线中处理中断和异常的方法"></a>6.流水线中处理中断和异常的方法</h2><p>异常（Exception）事件是指在程序执行过程中，由于<strong>操作非法</strong>，例如除数为0，结果上溢等，或者用户程序试图执行去<strong>处理异特权指令</strong>等。这时处理机应该转向特定的程序常事件。</p><p>处理的方法一般是:</p><p>​    先向用户报告哪条指令引起了异常事件以及引起了何种异常事件，</p><p>​    然后继续用户程序的执行，或者结束用户程序的执行，返回到操作系统。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221161506869.png" alt="image-20241221161506869" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221161526425.png" alt="image-20241221161526425" style="zoom:50%;" /></p><p>非流水线处理机是在一条指令执行的过程中检测异常事件，当异常事件发生时处理机在该指令结束时转向异常事件处理程序，处理完毕后再返回到用户程序。</p><p> 在流水线上出现异常:</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221161641524.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221161709196.png" alt="image-20241221161709196" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221190132962.png" alt="image-20241221190132962" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221190147666.png" alt="image-20241221190147666" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221190425432.png" alt="image-20241221190425432" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221190630292.png" alt="image-20241221190630292" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221190651189.png" alt="image-20241221190651189" style="zoom:50%;" /></p><h2 id="7-记分牌-Tomasulo动态调度算法"><a href="#7-记分牌-Tomasulo动态调度算法" class="headerlink" title="7.记分牌/Tomasulo动态调度算法"></a>7.记分牌/Tomasulo动态调度算法</h2><p>打乱指令顺序主要有两种方法：</p><p>一种是在<strong>编译阶段静态</strong>的发现指令级并行，再重新排序和优化指令（静态调度）；</p><p>一种是在<strong>硬件执行</strong>指令时<strong>动态</strong>的发现指令级的并行，再重新排序指令（动态调度）。</p><p>编译器在完成指令调度时，受限于两个特性：</p><p>  * 一是程序的指令的<strong>逻辑顺序性</strong>；</p><p>  * 二是流水线功能部件的<strong>执行延迟</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221192920288.png" alt="image-20241221192920288" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221193041096.png" alt="image-20241221193041096" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221193613761.png" alt="image-20241221193613761" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221200734080.png" alt="image-20241221200734080" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221200757039.png" alt="image-20241221200757039" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221200813108.png" alt="image-20241221200813108" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221200834693.png" alt="image-20241221200834693" style="zoom:50%;" /></p><p>以下是总结记分牌算法所需记录信息的表格：</p><div class="table-container"><table><thead><tr><th><strong>类别</strong></th><th><strong>字段/内容</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>指令状态表</strong></td><td>当前指令的流水线阶段</td><td>记录每条指令在流水线四个阶段中的状态：<code>Issue</code>（发射）、<code>Read Operand</code>（读取操作数）、<code>Execute</code>（执行）、<code>Write Result</code>（写回）。</td></tr><tr><td><strong>功能部件状态表</strong></td><td><strong>Busy</strong></td><td>表示功能部件是否被占用。</td></tr><tr><td></td><td><strong>Op</strong></td><td>当前功能部件正在执行的操作类型（如加法、减法、乘法等）。</td></tr><tr><td></td><td><strong>Fi</strong></td><td>目标寄存器编号（指令结果需要写入的寄存器）。</td></tr><tr><td></td><td><strong>Fj 和 Fk</strong></td><td>源寄存器编号（指令的两个操作数）。</td></tr><tr><td></td><td><strong>Qj 和 Qk</strong></td><td>源寄存器 <code>Fj</code> 和 <code>Fk</code> 是否依赖其他功能单元的结果，以及依赖的功能单元编号。</td></tr><tr><td></td><td><strong>Rj 和 Rk</strong></td><td>标记源寄存器 <code>Fj</code> 和 <code>Fk</code> 的操作数是否已准备好（1 表示已准备，0 表示未准备）。</td></tr><tr><td><strong>寄存器状态表</strong></td><td>每个寄存器的状态</td><td>记录寄存器当前的状态，指示哪个功能单元负责生成该寄存器的值。</td></tr></tbody></table></div><hr><h3 id="记分牌记录信息概述"><a href="#记分牌记录信息概述" class="headerlink" title="记分牌记录信息概述"></a><strong>记分牌记录信息概述</strong></h3><ul><li><strong>指令状态表</strong>：跟踪每条指令的流水线执行阶段，确保按正确阶段推进。</li><li><strong>功能部件状态表</strong>：动态管理功能单元的使用状态，处理指令的数据依赖问题。</li><li><strong>寄存器状态表</strong>：管理寄存器的状态和依赖，避免数据冒险。</li></ul><p>这一表格清晰概括了记分牌的三部分信息及其作用，帮助实现指令的乱序执行和动态调度。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241221200640551.png" alt="image-20241221200640551" style="zoom:50%;" /></p><p><strong>记分牌的性能受限于以下几个方面：</strong></p><p>  (1) 程序指令中可开发的并行性，即是否存在可以并行执行的不相关的指令。</p><p>  (2) 记分牌容量。记分牌的容量决定了流水线能在多大范围内寻找不相关指令。流水线中可以同时容纳的指令数量又称为指令窗口。</p><p>  (3) 功能部件的数目和种类。功能部件的总数决定了结构冲突的严重程度。</p><p>  (4) 反相关和输出相关。引起计分牌中先读后写和写后写阻塞。</p><p>记分牌技术允许在<strong>资源充足</strong>时<strong>乱序执行</strong>。对于<strong>数据相关</strong>、名相关，通过检测后延迟相关指令的执行解决相关。由于乱序执行引起的<strong>名相关</strong>会增多，因此<strong>写后写</strong>与<strong>先读后写</strong>导致的阻塞也会更严重。</p><p>Tomasulo算法，采用<strong>寄存器换名技术</strong>，使用了大量的缓冲器即保留站作为虚拟寄存器暂时替代指令中的寄存器，以<strong>动态消除名相关</strong>。</p><p><strong>Tomasulo</strong>算法相对于记分牌技术主要的优点：</p><p>(1)具有分布的阻塞检测机制；</p><p>(2)<strong>寄存器换名</strong>消除了数据的<strong>写后写</strong>和<strong>先读后写</strong>相关导致的阻塞。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241222120042892.png" alt="image-20241222120042892" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构复习3</title>
      <link href="/2024/12/20/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A03/"/>
      <url>/2024/12/20/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-单周期MIPS处理器的设计"><a href="#第3章-单周期MIPS处理器的设计" class="headerlink" title="第3章  单周期MIPS处理器的设计"></a>第3章  单周期MIPS处理器的设计</h1><h2 id="1-add-sub-addi-subi-lw-sw-beq-j-每条指令在单周期处理器中的执行逻辑"><a href="#1-add-sub-addi-subi-lw-sw-beq-j-每条指令在单周期处理器中的执行逻辑" class="headerlink" title="1.add, sub, addi, subi, lw, sw, beq, j 每条指令在单周期处理器中的执行逻辑"></a>1.add, sub, addi, subi, lw, sw, beq, j 每条指令在单周期处理器中的执行逻辑</h2><h3 id="MIPS单周期处理器中各指令的执行逻辑"><a href="#MIPS单周期处理器中各指令的执行逻辑" class="headerlink" title="MIPS单周期处理器中各指令的执行逻辑"></a><strong>MIPS单周期处理器中各指令的执行逻辑</strong></h3><p>以下是 <strong>add、sub、addi、subi、lw、sw、beq 和 j</strong> 指令在单周期处理器中的执行逻辑，包括各个阶段和数据通路的工作流程。</p><hr><h3 id="1-R型指令：add-和-sub"><a href="#1-R型指令：add-和-sub" class="headerlink" title="1. R型指令：add 和 sub"></a><strong>1. R型指令：add 和 sub</strong></h3><p>R型指令用于<strong>寄存器之间的算术逻辑操作</strong>。</p><ul><li><p><strong>格式</strong>：  </p><script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][rd (5位)][shamt (5位)][funct (6位)]}</script></li><li><p><strong>示例</strong>：  </p><ul><li><code>add rd, rs, rt</code>：<script type="math/tex">\text{rd} = \text{rs} + \text{rt}</script>  </li><li><code>sub rd, rs, rt</code>：<script type="math/tex">\text{rd} = \text{rs} - \text{rt}</script>  </li></ul></li></ul><h4 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a><strong>执行逻辑</strong></h4><ol><li><p><strong>取指（Instruction Fetch）</strong>：<br>从指令存储器中取出指令，PC更新为 <script type="math/tex">PC + 4</script>。</p></li><li><p><strong>译码（Instruction Decode）</strong>：<br>读取指令中的寄存器地址字段：<code>rs</code>、<code>rt</code> 和 <code>rd</code>，从寄存器堆中读取 <code>rs</code> 和 <code>rt</code> 的值。</p></li><li><p><strong>执行（Execute）</strong>：  </p><ul><li>ALU 根据指令功能码（<code>funct</code> 字段）执行加法（<code>add</code>）或减法（<code>sub</code>）。  </li><li>控制信号 <code>ALUOp</code> 决定 ALU 执行加法或减法操作。</li></ul></li><li><p><strong>写回（Write Back）</strong>：<br>将 ALU 的结果写回寄存器 <code>rd</code>。</p></li></ol><hr><h3 id="2-I型指令：addi-和-subi"><a href="#2-I型指令：addi-和-subi" class="headerlink" title="2. I型指令：addi 和 subi"></a><strong>2. I型指令：addi 和 subi</strong></h3><p>I型指令用于<strong>立即数运算</strong>。</p><ul><li><p><strong>格式</strong>：  </p><script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][immediate (16位)]}</script></li><li><p><strong>示例</strong>：  </p><ul><li><code>addi rt, rs, imm</code>：<script type="math/tex">\text{rt} = \text{rs} + \text{imm}</script>  </li><li><code>subi rt, rs, imm</code>：<script type="math/tex">\text{rt} = \text{rs} - \text{imm}</script>  </li></ul></li></ul><h4 id="执行逻辑-1"><a href="#执行逻辑-1" class="headerlink" title="执行逻辑"></a><strong>执行逻辑</strong></h4><ol><li><p><strong>取指（Instruction Fetch）</strong>：<br>从指令存储器中取出指令，PC更新为 <script type="math/tex">PC + 4</script>。</p></li><li><p><strong>译码（Instruction Decode）</strong>：<br>读取寄存器 <code>rs</code> 的值，同时将立即数 <code>imm</code> 进行<strong>符号扩展</strong>（16位扩展到32位）。</p></li><li><p><strong>执行（Execute）</strong>：<br>ALU 执行加法或减法操作：  </p><ul><li>操作数：寄存器 <code>rs</code> 和扩展后的 <code>imm</code>。</li></ul></li><li><p><strong>写回（Write Back）</strong>：<br>将结果写回寄存器 <code>rt</code>。</p></li></ol><hr><h3 id="3-数据传输指令：lw-和-sw"><a href="#3-数据传输指令：lw-和-sw" class="headerlink" title="3. 数据传输指令：lw 和 sw"></a><strong>3. 数据传输指令：lw 和 sw</strong></h3><p><strong>lw</strong>（加载字） 和 <strong>sw</strong>（存储字） 用于数据传输。</p><ul><li><strong>格式</strong>：  <script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][offset (16位)]}</script></li></ul><h4 id="执行逻辑-2"><a href="#执行逻辑-2" class="headerlink" title="执行逻辑"></a><strong>执行逻辑</strong></h4><ul><li><strong>lw rt, offset(rs)</strong>：从存储器读取数据到寄存器 <code>rt</code>。  </li><li><strong>sw rt, offset(rs)</strong>：将寄存器 <code>rt</code> 的数据存入存储器。</li></ul><ol><li><p><strong>取指（Instruction Fetch）</strong>：<br>从指令存储器取出指令，PC更新为 <script type="math/tex">PC + 4</script>。</p></li><li><p><strong>译码（Instruction Decode）</strong>：<br>读取基址寄存器 <code>rs</code> 的值，并将偏移量 <code>offset</code> 进行符号扩展。</p></li><li><p><strong>地址计算（Execute）</strong>：<br>使用 ALU 计算目标地址：  </p><script type="math/tex; mode=display">\text{目标地址} = \text{rs} + \text{offset}</script></li><li><p><strong>内存访问（Memory Access）</strong>：  </p><ul><li><strong>lw</strong>：从存储器中读取数据，存入寄存器 <code>rt</code>。  </li><li><strong>sw</strong>：将寄存器 <code>rt</code> 的数据写入目标地址。</li></ul></li><li><p><strong>写回（Write Back）</strong>（仅 <code>lw</code>）：<br>将从存储器加载的数据写回寄存器 <code>rt</code>。</p></li></ol><hr><h3 id="4-分支指令：beq"><a href="#4-分支指令：beq" class="headerlink" title="4. 分支指令：beq"></a><strong>4. 分支指令：beq</strong></h3><p><strong>beq</strong> 指令用于条件分支。</p><ul><li><p><strong>格式</strong>：  </p><script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][offset (16位)]}</script></li><li><p><strong>示例</strong>：<code>beq rs, rt, offset</code>  </p><ul><li>如果 <script type="math/tex">rs == rt</script>，跳转到目标地址：  <script type="math/tex; mode=display">\text{目标地址} = \text{PC} + 4 + (\text{offset} << 2)</script></li></ul></li></ul><h4 id="执行逻辑-3"><a href="#执行逻辑-3" class="headerlink" title="执行逻辑"></a><strong>执行逻辑</strong></h4><ol><li><p><strong>取指（Instruction Fetch）</strong>：<br>取出指令，PC 更新为 <script type="math/tex">PC + 4</script>。</p></li><li><p><strong>译码（Instruction Decode）</strong>：<br>读取寄存器 <code>rs</code> 和 <code>rt</code> 的值，并符号扩展偏移量 <code>offset</code>。</p></li><li><p><strong>比较（Execute）</strong>：<br>ALU 比较 <code>rs</code> 和 <code>rt</code> 的值是否相等。</p></li><li><p><strong>分支判断</strong>：  </p><ul><li>若 <script type="math/tex">rs == rt</script>，更新 PC：  <script type="math/tex; mode=display">\text{PC} = \text{PC} + 4 + (\text{offset} << 2)</script></li><li>否则继续执行下一条指令。</li></ul></li></ol><hr><h3 id="5-跳转指令：j"><a href="#5-跳转指令：j" class="headerlink" title="5. 跳转指令：j"></a><strong>5. 跳转指令：j</strong></h3><p><strong>j</strong> 指令用于无条件跳转。</p><ul><li><p><strong>格式</strong>：  </p><script type="math/tex; mode=display">\text{[op (6位)][address (26位)]}</script></li><li><p><strong>示例</strong>：<code>j address</code>  </p><ul><li>跳转到目标地址：  <script type="math/tex; mode=display">\text{PC} = \text{Top 4 bits of PC} \, | \, (\text{address} << 2)</script></li></ul></li></ul><h4 id="执行逻辑-4"><a href="#执行逻辑-4" class="headerlink" title="执行逻辑"></a><strong>执行逻辑</strong></h4><ol><li><p><strong>取指（Instruction Fetch）</strong>：<br>取出指令，PC更新为 <script type="math/tex">PC + 4</script>。</p></li><li><p><strong>目标地址计算（Execute）</strong>：<br>拼接 PC 的高 4 位和指令的 26 位目标地址，得到跳转地址。</p></li><li><p><strong>PC更新</strong>：<br>将计算得到的目标地址写入 PC。</p></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><div class="table-container"><table><thead><tr><th><strong>指令</strong></th><th><strong>操作</strong></th><th><strong>执行过程</strong></th></tr></thead><tbody><tr><td><code>add</code></td><td><script type="math/tex">rd = rs + rt</script></td><td>取指 → 译码 → ALU运算 → 写回</td></tr><tr><td><code>sub</code></td><td><script type="math/tex">rd = rs - rt</script></td><td>取指 → 译码 → ALU运算 → 写回</td></tr><tr><td><code>addi</code></td><td><script type="math/tex">rt = rs + imm</script></td><td>取指 → 译码 → 符号扩展 → ALU运算 → 写回</td></tr><tr><td><code>subi</code></td><td><script type="math/tex">rt = rs - imm</script></td><td>取指 → 译码 → 符号扩展 → ALU运算 → 写回</td></tr><tr><td><code>lw</code></td><td><script type="math/tex">rt = Mem[rs + offset]</script></td><td>取指 → 译码 → 地址计算 → 内存读取 → 写回</td></tr><tr><td><code>sw</code></td><td><script type="math/tex">Mem[rs + offset] = rt</script></td><td>取指 → 译码 → 地址计算 → 内存写入</td></tr><tr><td><code>beq</code></td><td>若 <script type="math/tex">rs == rt</script> 则分支跳转</td><td>取指 → 译码 → 比较 → 更新PC</td></tr><tr><td><code>j</code></td><td>无条件跳转到目标地址</td><td>取指 → 目标地址计算 → 更新PC</td></tr></tbody></table></div><h2 id="2-上述指令的指令编码、代码、功能以及在单周期中的数据通路，条件分支指令的地址计算、单周期各功能部件的控制信号值判断"><a href="#2-上述指令的指令编码、代码、功能以及在单周期中的数据通路，条件分支指令的地址计算、单周期各功能部件的控制信号值判断" class="headerlink" title="2.上述指令的指令编码、代码、功能以及在单周期中的数据通路，条件分支指令的地址计算、单周期各功能部件的控制信号值判断"></a>2.上述指令的指令编码、代码、功能以及在单周期中的数据通路，条件分支指令的地址计算、单周期各功能部件的控制信号值判断</h2><h3 id="MIPS单周期处理器：指令编码、功能、数据通路与控制信号分析"><a href="#MIPS单周期处理器：指令编码、功能、数据通路与控制信号分析" class="headerlink" title="MIPS单周期处理器：指令编码、功能、数据通路与控制信号分析"></a><strong>MIPS单周期处理器：指令编码、功能、数据通路与控制信号分析</strong></h3><p>以下是 <strong>add、sub、addi、subi、lw、sw、beq 和 j</strong> 指令的<strong>指令编码</strong>、<strong>代码功能</strong>、<strong>单周期中的数据通路</strong>以及<strong>控制信号</strong>的详细解析，包括条件分支指令的地址计算。</p><hr><h3 id="1-R型指令：add-和-sub-1"><a href="#1-R型指令：add-和-sub-1" class="headerlink" title="1. R型指令：add 和 sub"></a><strong>1. R型指令：add 和 sub</strong></h3><h4 id="指令编码"><a href="#指令编码" class="headerlink" title="指令编码"></a><strong>指令编码</strong></h4><ul><li><strong>格式</strong>：  <script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][rd (5位)][shamt (5位)][funct (6位)]}</script></li><li><strong>示例编码</strong>：  <ul><li><code>add $t0, $t1, $t2</code>  <script type="math/tex; mode=display">op = 000000, rs = 01001, rt = 01010, rd = 01000, shamt = 00000, funct = 100000</script></li><li><code>sub $t0, $t1, $t2</code>  <script type="math/tex; mode=display">op = 000000, rs = 01001, rt = 01010, rd = 01000, shamt = 00000, funct = 100010</script></li></ul></li></ul><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><code>add</code>：寄存器加法，结果存储到 <code>rd</code>  <script type="math/tex; mode=display">\text{rd} = \text{rs} + \text{rt}</script></li><li><code>sub</code>：寄存器减法，结果存储到 <code>rd</code>  <script type="math/tex; mode=display">\text{rd} = \text{rs} - \text{rt}</script></li></ul><h4 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a><strong>数据通路</strong></h4><ol><li><strong>寄存器堆</strong>：  <ul><li>读取 <code>rs</code> 和 <code>rt</code> 两个寄存器的值。  </li></ul></li><li><strong>ALU</strong>：  <ul><li><code>add</code> 或 <code>sub</code> 操作，根据 <strong>funct</strong> 字段判断具体操作。  </li></ul></li><li><strong>写回</strong>：  <ul><li>将结果写回寄存器 <code>rd</code>。</li></ul></li></ol><h4 id="控制信号"><a href="#控制信号" class="headerlink" title="控制信号"></a><strong>控制信号</strong></h4><div class="table-container"><table><thead><tr><th>控制信号</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td><code>RegDst</code></td><td>1</td><td>写回寄存器目的地址为 <code>rd</code></td></tr><tr><td><code>RegWrite</code></td><td>1</td><td>使能寄存器写回</td></tr><tr><td><code>ALUSrc</code></td><td>0</td><td>ALU 第二个操作数来自寄存器</td></tr><tr><td><code>ALUOp</code></td><td>10</td><td>ALU 控制信号，R型指令判断功能码</td></tr></tbody></table></div><hr><h3 id="2-I型指令：addi-和-subi-1"><a href="#2-I型指令：addi-和-subi-1" class="headerlink" title="2. I型指令：addi 和 subi"></a><strong>2. I型指令：addi 和 subi</strong></h3><h4 id="指令编码-1"><a href="#指令编码-1" class="headerlink" title="指令编码"></a><strong>指令编码</strong></h4><ul><li><strong>格式</strong>：  <script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][immediate (16位)]}</script></li><li><strong>示例编码</strong>：  <ul><li><code>addi $t0, $t1, 5</code>  <script type="math/tex; mode=display">op = 001000, rs = 01001, rt = 01000, immediate = 0000 0000 0000 0101</script></li></ul></li></ul><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><code>addi</code>：寄存器与立即数加法，结果存储到 <code>rt</code>  <script type="math/tex; mode=display">\text{rt} = \text{rs} + \text{immediate}</script></li></ul><h4 id="数据通路-1"><a href="#数据通路-1" class="headerlink" title="数据通路"></a><strong>数据通路</strong></h4><ol><li><strong>寄存器堆</strong>：  <ul><li>读取 <code>rs</code> 的值。  </li></ul></li><li><strong>立即数扩展</strong>：  <ul><li>将 16 位 <code>immediate</code> 进行符号扩展为 32 位。  </li></ul></li><li><strong>ALU</strong>：  <ul><li>执行加法操作：<code>rs + imm</code>。  </li></ul></li><li><strong>写回</strong>：  <ul><li>将结果写回寄存器 <code>rt</code>。</li></ul></li></ol><h4 id="控制信号-1"><a href="#控制信号-1" class="headerlink" title="控制信号"></a><strong>控制信号</strong></h4><div class="table-container"><table><thead><tr><th>控制信号</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td><code>RegDst</code></td><td>0</td><td>写回寄存器目的地址为 <code>rt</code></td></tr><tr><td><code>RegWrite</code></td><td>1</td><td>使能寄存器写回</td></tr><tr><td><code>ALUSrc</code></td><td>1</td><td>ALU 第二个操作数来自立即数</td></tr><tr><td><code>ALUOp</code></td><td>00</td><td>ALU 控制信号为加法操作</td></tr></tbody></table></div><hr><h3 id="3-数据传输指令：lw-和-sw-1"><a href="#3-数据传输指令：lw-和-sw-1" class="headerlink" title="3. 数据传输指令：lw 和 sw"></a><strong>3. 数据传输指令：lw 和 sw</strong></h3><h4 id="指令编码-2"><a href="#指令编码-2" class="headerlink" title="指令编码"></a><strong>指令编码</strong></h4><ul><li><strong>格式</strong>：  <script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][offset (16位)]}</script></li><li><strong>示例编码</strong>：  <ul><li><code>lw $t0, 4($t1)</code>  <script type="math/tex; mode=display">op = 100011, rs = 01001, rt = 01000, offset = 0000 0000 0000 0100</script></li></ul></li></ul><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><strong>lw</strong>：加载字到寄存器  <script type="math/tex; mode=display">\text{rt} = \text{Mem}[rs + offset]</script></li><li><strong>sw</strong>：存储寄存器值到内存  <script type="math/tex; mode=display">\text{Mem}[rs + offset] = \text{rt}</script></li></ul><h4 id="数据通路-2"><a href="#数据通路-2" class="headerlink" title="数据通路"></a><strong>数据通路</strong></h4><ol><li><strong>寄存器堆</strong>：  <ul><li>读取基址寄存器 <code>rs</code>。  </li></ul></li><li><strong>立即数扩展</strong>：  <ul><li>偏移量 <code>offset</code> 符号扩展为 32 位。  </li></ul></li><li><strong>ALU</strong>：  <ul><li>计算内存地址：<code>rs + offset</code>。  </li></ul></li><li><strong>数据存储器</strong>：  <ul><li><code>lw</code>：从内存中读取数据写入 <code>rt</code>。  </li><li><code>sw</code>：将 <code>rt</code> 的数据写入内存。</li></ul></li></ol><h4 id="控制信号-2"><a href="#控制信号-2" class="headerlink" title="控制信号"></a><strong>控制信号</strong></h4><div class="table-container"><table><thead><tr><th>控制信号</th><th>lw 值</th><th>sw 值</th><th>功能</th></tr></thead><tbody><tr><td><code>MemRead</code></td><td>1</td><td>0</td><td>使能内存读取</td></tr><tr><td><code>MemWrite</code></td><td>0</td><td>1</td><td>使能内存写入</td></tr><tr><td><code>ALUSrc</code></td><td>1</td><td>1</td><td>ALU 第二个操作数为偏移量</td></tr><tr><td><code>RegWrite</code></td><td>1</td><td>0</td><td><code>lw</code> 需写回寄存器</td></tr></tbody></table></div><hr><h3 id="4-分支指令：beq-1"><a href="#4-分支指令：beq-1" class="headerlink" title="4. 分支指令：beq"></a><strong>4. 分支指令：beq</strong></h3><h4 id="指令编码-3"><a href="#指令编码-3" class="headerlink" title="指令编码"></a><strong>指令编码</strong></h4><ul><li><strong>格式</strong>：  <script type="math/tex; mode=display">\text{[op (6位)][rs (5位)][rt (5位)][offset (16位)]}</script></li></ul><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><code>beq</code>：若两个寄存器相等，则跳转  <script type="math/tex; mode=display">\text{PC} = \text{PC} + 4 + (\text{offset} << 2)</script></li></ul><h4 id="数据通路-3"><a href="#数据通路-3" class="headerlink" title="数据通路"></a><strong>数据通路</strong></h4><ol><li><strong>寄存器堆</strong>：  <ul><li>读取 <code>rs</code> 和 <code>rt</code> 的值。  </li></ul></li><li><strong>ALU</strong>：  <ul><li>比较 <code>rs</code> 和 <code>rt</code>，生成 <code>Zero</code> 信号。  </li></ul></li><li><strong>PC更新</strong>：  <ul><li>若 <code>Zero = 1</code>，跳转地址：<code>PC + 4 + (offset &lt;&lt; 2)</code>。</li></ul></li></ol><h4 id="控制信号-3"><a href="#控制信号-3" class="headerlink" title="控制信号"></a><strong>控制信号</strong></h4><div class="table-container"><table><thead><tr><th>控制信号</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td><code>Branch</code></td><td>1</td><td>使能分支跳转</td></tr><tr><td><code>ALUOp</code></td><td>01</td><td>ALU 控制信号进行比较操作</td></tr></tbody></table></div><hr><h3 id="5-跳转指令：j-1"><a href="#5-跳转指令：j-1" class="headerlink" title="5. 跳转指令：j"></a><strong>5. 跳转指令：j</strong></h3><h4 id="指令编码-4"><a href="#指令编码-4" class="headerlink" title="指令编码"></a><strong>指令编码</strong></h4><ul><li><strong>格式</strong>：  <script type="math/tex; mode=display">\text{[op (6位)][address (26位)]}</script></li></ul><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><code>j</code>：无条件跳转  <script type="math/tex; mode=display">\text{PC} = \text{Top 4 bits of PC} \, | \, (\text{address} << 2)</script></li></ul><h4 id="数据通路-4"><a href="#数据通路-4" class="headerlink" title="数据通路"></a><strong>数据通路</strong></h4><ol><li><strong>目标地址计算</strong>：  <ul><li>将指令中的 26 位地址左移2位，与 PC 高 4 位拼接。  </li></ul></li><li><strong>PC更新</strong>：  <ul><li>将计算得到的目标地址写入 PC。</li></ul></li></ol><h4 id="控制信号-4"><a href="#控制信号-4" class="headerlink" title="控制信号"></a><strong>控制信号</strong></h4><div class="table-container"><table><thead><tr><th>控制信号</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td><code>Jump</code></td><td>1</td><td>使能无条件跳转</td></tr></tbody></table></div><hr><h3 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a><strong>总结表格</strong></h3><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th><th>关键控制信号</th></tr></thead><tbody><tr><td><code>add</code></td><td><script type="math/tex">rd = rs + rt</script></td><td><code>RegDst=1, ALUSrc=0, RegWrite=1</code></td></tr><tr><td><code>sub</code></td><td><script type="math/tex">rd = rs - rt</script></td><td><code>RegDst=1, ALUSrc=0, RegWrite=1</code></td></tr><tr><td><code>addi</code></td><td><script type="math/tex">rt = rs + imm</script></td><td><code>RegDst=0, ALUSrc=1, RegWrite=1</code></td></tr><tr><td><code>lw</code></td><td><script type="math/tex">rt = \text{Mem}[rs + offset]</script></td><td><code>MemRead=1, ALUSrc=1, RegWrite=1</code></td></tr><tr><td><code>sw</code></td><td><script type="math/tex">\text{Mem}[rs + offset] = rt</script></td><td><code>MemWrite=1, ALUSrc=1, RegWrite=0</code></td></tr><tr><td><code>beq</code></td><td>若 <script type="math/tex">rs == rt</script> 则分支跳转</td><td><code>Branch=1, ALUSrc=0, ALUOp=01</code></td></tr><tr><td><code>j</code></td><td>无条件跳转到目标地址</td><td><code>Jump=1</code></td></tr></tbody></table></div><p>以下是您需要的 <strong>add</strong>、<strong>sub</strong>、<strong>addi</strong>、<strong>subi</strong>、<strong>lw</strong>、<strong>sw</strong>、<strong>beq</strong> 和 <strong>j</strong> 指令的操作码及相关信息总结：</p><hr><h3 id="1-R型指令"><a href="#1-R型指令" class="headerlink" title="1. R型指令"></a><strong>1. R型指令</strong></h3><p>R型指令的操作码固定为 <strong><code>000000</code></strong>，具体功能由 <strong>功能码（funct）</strong> 决定。</p><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th><th>操作码（op）</th><th>功能码（funct）</th></tr></thead><tbody><tr><td><code>add</code></td><td>加法</td><td><code>000000</code></td><td><code>100000</code></td></tr><tr><td><code>sub</code></td><td>减法</td><td><code>000000</code></td><td><code>100010</code></td></tr></tbody></table></div><hr><h3 id="2-I型指令"><a href="#2-I型指令" class="headerlink" title="2. I型指令"></a><strong>2. I型指令</strong></h3><p>I型指令的功能由操作码（<code>op</code>）直接决定。</p><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th><th>操作码（op）</th></tr></thead><tbody><tr><td><code>addi</code></td><td>加法（立即数）</td><td><code>001000</code></td></tr><tr><td><code>subi</code></td><td>减法（立即数）</td><td><strong>（无标准指令，在MIPS中未定义）</strong></td></tr><tr><td><code>lw</code></td><td>加载字</td><td><code>100011</code></td></tr><tr><td><code>sw</code></td><td>存储字</td><td><code>101011</code></td></tr><tr><td><code>beq</code></td><td>分支（相等跳转）</td><td><code>000100</code></td></tr></tbody></table></div><hr><h3 id="3-J型指令"><a href="#3-J型指令" class="headerlink" title="3. J型指令"></a><strong>3. J型指令</strong></h3><p>J型指令的功能由操作码（<code>op</code>）直接决定。</p><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th><th>操作码（op）</th></tr></thead><tbody><tr><td><code>j</code></td><td>无条件跳转</td><td><code>000010</code></td></tr></tbody></table></div><hr><h3 id="4-总结表格"><a href="#4-总结表格" class="headerlink" title="4. 总结表格"></a><strong>4. 总结表格</strong></h3><div class="table-container"><table><thead><tr><th>指令类型</th><th>指令</th><th>功能</th><th>操作码（op）</th><th>功能码（funct，R型指令专用）</th></tr></thead><tbody><tr><td>R型</td><td><code>add</code></td><td>加法</td><td><code>000000</code></td><td><code>100000</code></td></tr><tr><td></td><td><code>sub</code></td><td>减法</td><td><code>000000</code></td><td><code>100010</code></td></tr><tr><td>I型</td><td><code>addi</code></td><td>加法（立即数）</td><td><code>001000</code></td><td>-</td></tr><tr><td></td><td><code>subi</code></td><td>减法（立即数，未定义）</td><td><strong>N/A</strong></td><td>-</td></tr><tr><td></td><td><code>lw</code></td><td>加载字</td><td><code>100011</code></td><td>-</td></tr><tr><td></td><td><code>sw</code></td><td>存储字</td><td><code>101011</code></td><td>-</td></tr><tr><td></td><td><code>beq</code></td><td>分支（相等跳转）</td><td><code>000100</code></td><td>-</td></tr><tr><td>J型</td><td><code>j</code></td><td>无条件跳转</td><td><code>000010</code></td><td>-</td></tr></tbody></table></div><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><ol><li><p><strong><code>subi</code> 指令</strong>：在标准 MIPS 指令集中，<code>subi</code> 并未被定义，可以通过 <code>addi</code> 使用负数立即数来替代。例如：</p><script type="math/tex; mode=display">\text{subi rt, rs, imm} \quad \text{等价于} \quad \text{addi rt, rs, -imm}</script></li><li><p><strong>R型指令</strong> 使用 <code>funct</code> 字段指定具体功能，其 <code>op</code> 始终为 <code>000000</code>。</p></li><li><p><strong>I型和J型指令</strong> 直接通过 <code>op</code> 字段来确定功能，无需 <code>funct</code> 字段。</p></li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220195518838.png" alt="image-20241220195518838" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220195541292.png" alt="image-20241220195541292" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220195604428.png" alt="image-20241220195604428" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220195638411.png" alt="image-20241220195638411" style="zoom:50%;" /></p><h3 id="题目分析与解答"><a href="#题目分析与解答" class="headerlink" title="题目分析与解答"></a><strong>题目分析与解答</strong></h3><p>题目中要求我们分析 MIPS 指令（AND、LD 和 BEQ）在执行过程中涉及的关键路径，并根据每个模块的延迟时间计算总延迟。</p><hr><h3 id="1-问题分析"><a href="#1-问题分析" class="headerlink" title="1. 问题分析"></a><strong>1. 问题分析</strong></h3><ul><li>每条指令的执行会经过不同的数据路径，关键路径是指令执行时耗时最长的路径。</li><li><p><strong>已知每个模块的延迟时间</strong>：</p><ul><li><strong>指令存储器</strong>：400ps  </li><li><strong>加法器</strong>：100ps  </li><li><strong>ALU</strong>：120ps  </li><li><strong>寄存器堆</strong>：200ps  </li><li><strong>数据存储器</strong>：350ps  </li><li><strong>控制单元</strong>：100ps  </li></ul></li><li><p>需要计算的三种指令：</p><ol><li><strong>AND 指令</strong>（R型指令）：涉及寄存器堆和 ALU。  </li><li><strong>LD 指令</strong>（加载指令）：涉及寄存器堆、ALU 和数据存储器。  </li><li><strong>BEQ 指令</strong>（分支指令）：涉及寄存器堆、ALU 和控制单元。</li></ol></li></ul><hr><h3 id="2-关键路径分析"><a href="#2-关键路径分析" class="headerlink" title="2. 关键路径分析"></a><strong>2. 关键路径分析</strong></h3><h4 id="1-AND-指令（R型指令）"><a href="#1-AND-指令（R型指令）" class="headerlink" title="(1) AND 指令（R型指令）"></a><strong>(1) AND 指令（R型指令）</strong></h4><ul><li>路径：<code>PC -&gt; 指令存储器 -&gt; 寄存器堆 -&gt; ALU -&gt; 寄存器堆</code><ul><li><strong>指令存储器</strong>：400ps  </li><li><strong>寄存器堆</strong>（读取）：200ps  </li><li><strong>ALU</strong>：120ps  </li><li><strong>寄存器堆</strong>（写入）：不计入关键路径，因为写操作发生在时钟边沿。</li></ul></li><li><strong>总延迟时间</strong>：  <script type="math/tex; mode=display">\text{400ps + 200ps + 120ps = 920ps}</script></li></ul><h4 id="2-LD-指令（I型指令）"><a href="#2-LD-指令（I型指令）" class="headerlink" title="(2) LD 指令（I型指令）"></a><strong>(2) LD 指令（I型指令）</strong></h4><ul><li>路径：<code>PC -&gt; 指令存储器 -&gt; 寄存器堆 -&gt; ALU -&gt; 数据存储器 -&gt; 寄存器堆</code><ul><li><strong>指令存储器</strong>：400ps  </li><li><strong>寄存器堆</strong>（读取）：200ps  </li><li><strong>ALU</strong>：120ps  </li><li><strong>数据存储器</strong>：350ps  </li><li><strong>寄存器堆</strong>（写入）：不计入关键路径。</li></ul></li><li><strong>总延迟时间</strong>：  <script type="math/tex; mode=display">\text{400ps + 200ps + 120ps + 350ps = 1070ps}</script></li></ul><h4 id="3-BEQ-指令（分支指令）"><a href="#3-BEQ-指令（分支指令）" class="headerlink" title="(3) BEQ 指令（分支指令）"></a><strong>(3) BEQ 指令（分支指令）</strong></h4><ul><li>路径：<code>PC -&gt; 指令存储器 -&gt; 寄存器堆 -&gt; ALU -&gt; 控制单元</code><ul><li><strong>指令存储器</strong>：400ps  </li><li><strong>寄存器堆</strong>（读取）：200ps  </li><li><strong>ALU</strong>：120ps  </li><li><strong>控制单元</strong>：100ps  </li></ul></li><li><strong>总延迟时间</strong>：  <script type="math/tex; mode=display">\text{400ps + 200ps + 120ps + 100ps = 1020ps}</script></li></ul><hr><h3 id="3-总结表格"><a href="#3-总结表格" class="headerlink" title="3. 总结表格"></a><strong>3. 总结表格</strong></h3><div class="table-container"><table><thead><tr><th><strong>指令类型</strong></th><th><strong>涉及模块</strong></th><th><strong>延迟时间（ps）</strong></th></tr></thead><tbody><tr><td><strong>AND</strong></td><td>指令存储器 -&gt; 寄存器堆 -&gt; ALU</td><td>920</td></tr><tr><td><strong>LD</strong></td><td>指令存储器 -&gt; 寄存器堆 -&gt; ALU -&gt; 数据存储器</td><td>1070</td></tr><tr><td><strong>BEQ</strong></td><td>指令存储器 -&gt; 寄存器堆 -&gt; ALU -&gt; 控制单元</td><td>1020</td></tr></tbody></table></div><hr><h3 id="4-结果"><a href="#4-结果" class="headerlink" title="4. 结果"></a><strong>4. 结果</strong></h3><ul><li><strong>AND 指令关键路径延迟时间</strong>：920ps  </li><li><strong>LD 指令关键路径延迟时间</strong>：1070ps  </li><li><strong>BEQ 指令关键路径延迟时间</strong>：1020ps  </li></ul><h2 id="3-中断和异常的处理时机"><a href="#3-中断和异常的处理时机" class="headerlink" title="3.中断和异常的处理时机"></a>3.中断和异常的处理时机</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220210432176.png" alt="image-20241220210432176" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241220210449904.png" alt="image-20241220210449904" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构复习2</title>
      <link href="/2024/12/19/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A02/"/>
      <url>/2024/12/19/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-指令系统原理与示例"><a href="#第2章-指令系统原理与示例" class="headerlink" title="第2章  指令系统原理与示例"></a>第2章  指令系统原理与示例</h1><h2 id="1-指令集系统结构的分类：指令集系统的不同结构"><a href="#1-指令集系统结构的分类：指令集系统的不同结构" class="headerlink" title="1.指令集系统结构的分类：指令集系统的不同结构"></a>1.指令集系统结构的分类：指令集系统的不同结构</h2><p>根据课件内容，<strong>指令集系统结构（Instruction Set Architecture, ISA）</strong> 的分类可以根据<strong>处理器内部数据的存储类型</strong>和<strong>操作数访问方式</strong>进行划分。</p><hr><h3 id="1-根据处理器内部数据存储类型分类"><a href="#1-根据处理器内部数据存储类型分类" class="headerlink" title="1. 根据处理器内部数据存储类型分类"></a><strong>1. 根据处理器内部数据存储类型分类</strong></h3><p>指令集系统结构的最根本区别在于<strong>处理器内部数据的存储类型</strong>，主要分为以下三类：</p><h4 id="1-堆栈系统结构（Stack-Architecture）"><a href="#1-堆栈系统结构（Stack-Architecture）" class="headerlink" title="(1) 堆栈系统结构（Stack Architecture）"></a><strong>(1) 堆栈系统结构（Stack Architecture）</strong></h4><ul><li><strong>特点</strong>：<ul><li>操作数<strong>隐含地</strong>位于栈顶，不需要显式指定。</li><li>操作数通过 <code>push</code> 和 <code>pop</code> 指令进行堆栈操作。</li></ul></li><li><strong>优点</strong>：<ul><li>指令长度较短（因为操作数隐含）。</li></ul></li><li><strong>缺点</strong>：<ul><li>数据操作效率较低，需要频繁的堆栈存取。</li><li>操作顺序受到栈顶限制（无法乱序操作）。</li></ul></li></ul><h4 id="2-累加器系统结构（Accumulator-Architecture）"><a href="#2-累加器系统结构（Accumulator-Architecture）" class="headerlink" title="(2) 累加器系统结构（Accumulator Architecture）"></a><strong>(2) 累加器系统结构（Accumulator Architecture）</strong></h4><ul><li><strong>特点</strong>：<ul><li>一个操作数隐含在累加器中，另一个操作数需要显式指定。</li><li>计算结果存储在累加器中。</li></ul></li><li><strong>优点</strong>：<ul><li>指令长度较短。</li><li>简单易实现，适用于早期计算机。</li></ul></li><li><strong>缺点</strong>：<ul><li>累加器的内容需要频繁存取内存，导致效率低。</li></ul></li></ul><h4 id="3-通用寄存器系统结构（General-Purpose-Register-GPR-Architecture）"><a href="#3-通用寄存器系统结构（General-Purpose-Register-GPR-Architecture）" class="headerlink" title="(3) 通用寄存器系统结构（General Purpose Register, GPR Architecture）"></a><strong>(3) 通用寄存器系统结构（General Purpose Register, GPR Architecture）</strong></h4><ul><li><strong>特点</strong>：<ul><li>操作数存储在一组寄存器中，所有操作数需要显式指定。</li><li>通过 <code>load</code> 和 <code>store</code> 指令访问内存。</li></ul></li><li><strong>优点</strong>：<ul><li>数据访问效率高，寄存器访问速度快于内存。</li><li>灵活性强，可以随机访问寄存器中的任意数据。</li></ul></li><li><strong>缺点</strong>：<ul><li>指令长度较长，需要显式指定寄存器。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218102324813.png" alt="image-20241218102324813" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218102340856.png" alt="image-20241218102340856" style="zoom:50%;" /></p><hr><h3 id="2-根据寄存器与存储器的操作模式分类"><a href="#2-根据寄存器与存储器的操作模式分类" class="headerlink" title="2. 根据寄存器与存储器的操作模式分类"></a><strong>2. 根据寄存器与存储器的操作模式分类</strong></h3><p>在通用寄存器结构的基础上，还可以根据<strong>寄存器与存储器的访问方式</strong>进一步分类：</p><h4 id="1-寄存器-存储器系统（Register-Memory-Architecture）"><a href="#1-寄存器-存储器系统（Register-Memory-Architecture）" class="headerlink" title="(1) 寄存器-存储器系统（Register-Memory Architecture）"></a><strong>(1) 寄存器-存储器系统（Register-Memory Architecture）</strong></h4><ul><li><strong>特点</strong>：<ul><li>指令可以直接访问存储器中的数据，也可以访问寄存器中的数据。</li><li>一部分操作数可以在内存中，另一部分可以在寄存器中。</li></ul></li><li><strong>优点</strong>：<ul><li>减少了 <code>load</code> 和 <code>store</code> 指令的数量，指令更简洁。</li></ul></li><li><strong>缺点</strong>：<ul><li>存储器访问速度较慢，影响性能。</li></ul></li><li><strong>示例</strong>：Intel 8086。</li></ul><h4 id="2-寄存器-寄存器系统（Register-Register-Architecture，也称-Load-Store-Architecture）"><a href="#2-寄存器-寄存器系统（Register-Register-Architecture，也称-Load-Store-Architecture）" class="headerlink" title="(2) 寄存器-寄存器系统（Register-Register Architecture，也称 Load-Store Architecture）"></a><strong>(2) 寄存器-寄存器系统（Register-Register Architecture，也称 Load-Store Architecture）</strong></h4><ul><li><strong>特点</strong>：<ul><li>所有运算操作数必须从内存加载到寄存器中。</li><li>通过 <code>load</code> 指令将数据从内存加载到寄存器，通过 <code>store</code> 指令将寄存器数据存回内存。</li></ul></li><li><strong>优点</strong>：<ul><li>存储器操作与计算操作分离，有利于流水线设计。</li><li>寄存器的使用频率高，数据访问速度快。</li></ul></li><li><strong>缺点</strong>：<ul><li>需要更多的 <code>load</code> 和 <code>store</code> 指令，代码量较大。</li></ul></li><li><strong>示例</strong>：MIPS、ARM。</li></ul><h4 id="3-存储器-存储器系统（Memory-Memory-Architecture）"><a href="#3-存储器-存储器系统（Memory-Memory-Architecture）" class="headerlink" title="(3) 存储器-存储器系统（Memory-Memory Architecture）"></a><strong>(3) 存储器-存储器系统（Memory-Memory Architecture）</strong></h4><ul><li><strong>特点</strong>：<ul><li>指令的所有操作数都可以直接存储在存储器中。</li><li>不需要专门的寄存器。</li></ul></li><li><strong>优点</strong>：<ul><li>指令长度较短，不需要显式指定寄存器。</li></ul></li><li><strong>缺点</strong>：<ul><li>存储器访问频繁，性能较低。</li><li>实际上几乎不存在这种系统结构。</li></ul></li><li><strong>示例</strong>：理论模型，实际中几乎不采用。</li></ul><hr><h3 id="3-示例：不同系统结构对操作的实现"><a href="#3-示例：不同系统结构对操作的实现" class="headerlink" title="3. 示例：不同系统结构对操作的实现"></a><strong>3. 示例：不同系统结构对操作的实现</strong></h3><p>假设有一个简单的计算任务 (C = A + B)，且 (A)、(B)、(C) 都存储在存储器中，以下是三种系统结构的实现方式：</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218102522846.png" alt="image-20241218102522846" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218102539367.png" alt="image-20241218102539367" style="zoom:50%;" /></p><h4 id="1-堆栈结构（Stack-Architecture）"><a href="#1-堆栈结构（Stack-Architecture）" class="headerlink" title="(1) 堆栈结构（Stack Architecture）"></a><strong>(1) 堆栈结构（Stack Architecture）</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUSH A      // 将 A 压入堆栈</span><br><span class="line">PUSH B      // 将 B 压入堆栈</span><br><span class="line">ADD         // 弹出栈顶两个操作数相加，将结果压入栈顶</span><br><span class="line">POP C       // 将结果存入 C</span><br></pre></td></tr></table></figure><h4 id="2-累加器结构（Accumulator-Architecture）"><a href="#2-累加器结构（Accumulator-Architecture）" class="headerlink" title="(2) 累加器结构（Accumulator Architecture）"></a><strong>(2) 累加器结构（Accumulator Architecture）</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOAD A      // 将 A 加载到累加器中</span><br><span class="line">ADD B       // 累加器中的值加上 B，结果存入累加器</span><br><span class="line">STORE C     // 将累加器中的结果存入 C</span><br></pre></td></tr></table></figure><h4 id="3-通用寄存器结构（General-Purpose-Register-Architecture）"><a href="#3-通用寄存器结构（General-Purpose-Register-Architecture）" class="headerlink" title="(3) 通用寄存器结构（General Purpose Register Architecture）"></a><strong>(3) 通用寄存器结构（General Purpose Register Architecture）</strong></h4><ul><li><strong>寄存器-存储器系统：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOAD R1, A  // 将 A 加载到寄存器 R1 中</span><br><span class="line">ADD R1, B   // R1 的值加上 B，结果存入 R1</span><br><span class="line">STORE C, R1 // 将 R1 中的结果存入 C</span><br></pre></td></tr></table></figure></li><li><strong>寄存器-寄存器系统：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOAD R1, A  // 将 A 加载到寄存器 R1 中</span><br><span class="line">LOAD R2, B  // 将 B 加载到寄存器 R2 中</span><br><span class="line">ADD R3, R1, R2  // R1 和 R2 相加，结果存入 R3</span><br><span class="line">STORE C, R3 // 将 R3 中的结果存入 C</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-通用寄存器结构的扩展"><a href="#4-通用寄存器结构的扩展" class="headerlink" title="4. 通用寄存器结构的扩展"></a><strong>4. 通用寄存器结构的扩展</strong></h3><p>在通用寄存器系统中，根据指令集设计，还存在一些扩展类型：</p><ol><li><p><strong>扩展累加器计算机</strong>：</p><ul><li>累加器外增加多个寄存器。</li><li>提升灵活性和性能。</li></ul></li><li><p><strong>寄存器-寄存器系统中的 ALU 指令特性</strong>：</p><ul><li>包含两个操作数（源操作数）和一个结果（目的操作数）。</li><li>操作数可以是 0~3 个寄存器或存储器操作数。</li></ul></li></ol><hr><h3 id="5-设计原则与现代趋势"><a href="#5-设计原则与现代趋势" class="headerlink" title="5. 设计原则与现代趋势"></a><strong>5. 设计原则与现代趋势</strong></h3><ol><li><strong>寄存器比存储器快</strong>：  <ul><li>寄存器存储的数据访问速度快于存储器，现代设计更多使用寄存器。</li></ul></li><li><strong>编译器效率</strong>：  <ul><li>通用寄存器结构适合现代编译器优化，可以提高代码效率和运行速度。</li></ul></li><li><strong>流水线与并行化</strong>：  <ul><li>寄存器-寄存器系统的 Load-Store 模式有利于流水线实现，是现代 RISC 架构的基础。</li></ul></li></ol><hr><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218103538093.png" alt="image-20241218103538093" style="zoom:50%;" /></p><h2 id="2-存储器寻址：大小端模式及地址对齐"><a href="#2-存储器寻址：大小端模式及地址对齐" class="headerlink" title="2.存储器寻址：大小端模式及地址对齐"></a>2.存储器寻址：大小端模式及地址对齐</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218103923218.png" alt="image-20241218103923218" style="zoom:50%;" /></p><p><strong>小端模式的优势</strong>：便于计算地址偏移。例如，数据的最低字节总是存储在起始地址，直接操作低地址即可。</p><p><strong>大端模式的优势</strong>：更接近人类阅读习惯，便于调试与观察。</p><hr><p><strong>地址对齐</strong>指的是存储器中数据的地址必须是特定字节大小的整数倍，从而提高硬件访问效率。</p><h4 id="1-对齐的定义"><a href="#1-对齐的定义" class="headerlink" title="(1) 对齐的定义"></a><strong>(1) 对齐的定义</strong></h4><p>如果一个大小为 ( s ) 字节的数据存储在地址 ( A )，并且满足：</p><script type="math/tex; mode=display">A \mod s = 0</script><p>则称该地址为<strong>对齐的地址</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218104334410.png" alt="image-20241218104334410" style="zoom:50%;" /></p><h4 id="2-对齐的优点"><a href="#2-对齐的优点" class="headerlink" title="(2) 对齐的优点"></a><strong>(2) 对齐的优点</strong></h4><ol><li><strong>简化硬件设计</strong>：对齐的访问可以直接在一条存储器操作中完成，而不需要多次访问。</li><li><strong>提高访问效率</strong>：非对齐数据需要分两次（或更多次）读取，增加了访问开销。</li></ol><hr><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218104733938.png" alt="image-20241218104733938"></h4><h2 id="3-MIPS系统结构：MIPS指令集结构"><a href="#3-MIPS系统结构：MIPS指令集结构" class="headerlink" title="3.MIPS系统结构：MIPS指令集结构"></a>3.MIPS系统结构：MIPS指令集结构</h2><h3 id="MIPS指令集结构"><a href="#MIPS指令集结构" class="headerlink" title="MIPS指令集结构"></a><strong>MIPS指令集结构</strong></h3><p>MIPS（Microprocessor without Interlocked Pipeline Stages）是一个经典的RISC（精简指令集计算机）架构，强调简单性和高效性，适用于流水线设计和编译器优化。以下是关于<strong>MIPS指令集结构</strong>的详细介绍：</p><hr><h3 id="1-MIPS指令集的主要特点"><a href="#1-MIPS指令集的主要特点" class="headerlink" title="1. MIPS指令集的主要特点"></a><strong>1. MIPS指令集的主要特点</strong></h3><ol><li><strong>固定长度指令编码</strong><ul><li>每条指令的长度为 <strong>32 位</strong>。</li><li>指令格式统一，便于流水线操作和硬件译码。</li></ul></li><li><strong>精简指令集</strong><ul><li>指令集数量少，指令功能简单。</li><li>所有复杂的功能通过软件组合多条简单指令实现。</li></ul></li><li><strong>寄存器-寄存器结构（Load/Store架构）</strong><ul><li>只有 <code>load</code> 和 <code>store</code> 指令访问存储器。</li><li>其他运算指令的操作数都来自寄存器。</li></ul></li><li><strong>通用寄存器</strong><ul><li>提供 32 个 32 位的通用寄存器（R0 ~ R31），用于数据操作。</li><li>R0 的值始终为 0，用于常数操作。</li></ul></li><li><strong>面向流水线设计</strong><ul><li>每条指令占用流水线的一个阶段，充分利用硬件资源。</li></ul></li></ol><hr><h3 id="2-MIPS指令格式"><a href="#2-MIPS指令格式" class="headerlink" title="2. MIPS指令格式"></a><strong>2. MIPS指令格式</strong></h3><p>MIPS指令分为三种格式：</p><ol><li><p><strong>R型指令（Register）</strong></p><ul><li>用于寄存器之间的算术、逻辑和移位操作。</li><li><p>格式：</p><script type="math/tex; mode=display">\text{[op (6 位)][rs (5 位)][rt (5 位)][rd (5 位)][shamt (5 位)][funct (6 位)]}</script><ul><li><code>op</code>：操作码，决定指令类型。</li><li><code>rs</code>：源寄存器1。</li><li><code>rt</code>：源寄存器2。</li><li><code>rd</code>：目标寄存器。</li><li><code>shamt</code>：移位操作中用于指定移位位数。</li><li><code>funct</code>：功能码，用于进一步区分指令。</li></ul><p><strong>示例</strong>：加法指令 <code>add rd, rs, rt</code></p><ul><li>功能：将 <code>rs</code> 和 <code>rt</code> 寄存器的值相加，结果存入 <code>rd</code>。</li></ul></li></ul></li><li><p><strong>I型指令（Immediate）</strong></p><ul><li>用于立即数运算、加载和存储操作，以及分支指令。</li><li><p>格式：</p><script type="math/tex; mode=display">\text{[op (6 位)][rs (5 位)][rt (5 位)][immediate (16 位)]}</script><ul><li><code>immediate</code>：16 位立即数。</li></ul><p><strong>示例</strong>：<code>addi rt, rs, immediate</code></p><ul><li>功能：将 <code>rs</code> 寄存器的值与 <code>immediate</code> 相加，结果存入 <code>rt</code>。</li></ul></li></ul></li><li><p><strong>J型指令（Jump）</strong></p><ul><li>用于跳转指令。</li><li><p>格式：</p><script type="math/tex; mode=display">\text{[op (6 位)][address (26 位)]}</script><ul><li><code>address</code>：目标地址。</li></ul><p><strong>示例</strong>：<code>j address</code></p><ul><li>功能：跳转到 <code>address</code> 指定的地址。</li></ul></li></ul></li></ol><hr><h3 id="3-MIPS指令类型"><a href="#3-MIPS指令类型" class="headerlink" title="3. MIPS指令类型"></a><strong>3. MIPS指令类型</strong></h3><p>MIPS指令按照功能分为以下几类：</p><h4 id="1-数据传输指令"><a href="#1-数据传输指令" class="headerlink" title="(1) 数据传输指令"></a><strong>(1) 数据传输指令</strong></h4><ul><li><strong>Load 指令</strong>：<ul><li>从内存中加载数据到寄存器。</li><li>示例：<code>lw rt, offset(rs)</code>  <ul><li>功能：将存储器地址 <code>rs + offset</code> 中的数据加载到寄存器 <code>rt</code>。</li></ul></li></ul></li><li><strong>Store 指令</strong>：<ul><li>将寄存器数据存储到内存。</li><li>示例：<code>sw rt, offset(rs)</code>  <ul><li>功能：将寄存器 <code>rt</code> 的数据存储到地址 <code>rs + offset</code>。</li></ul></li></ul></li></ul><h4 id="2-算术与逻辑指令"><a href="#2-算术与逻辑指令" class="headerlink" title="(2) 算术与逻辑指令"></a><strong>(2) 算术与逻辑指令</strong></h4><ul><li><strong>算术指令</strong>：<ul><li>加法：<code>add rd, rs, rt</code>（寄存器加法）  <ul><li>功能：将 <code>rs</code> 和 <code>rt</code> 的值相加，结果存入 <code>rd</code>。</li></ul></li><li>加立即数：<code>addi rt, rs, immediate</code>  <ul><li>功能：将 <code>rs</code> 与 <code>immediate</code> 相加，结果存入 <code>rt</code>。</li></ul></li><li>减法：<code>sub rd, rs, rt</code>  <ul><li>功能：将 <code>rs</code> 减去 <code>rt</code>，结果存入 <code>rd</code>。</li></ul></li></ul></li><li><strong>逻辑指令</strong>：<ul><li>与：<code>and rd, rs, rt</code>  </li><li>或：<code>or rd, rs, rt</code>  </li><li>异或：<code>xor rd, rs, rt</code>  </li></ul></li></ul><h4 id="3-移位指令"><a href="#3-移位指令" class="headerlink" title="(3) 移位指令"></a><strong>(3) 移位指令</strong></h4><ul><li>左移：<code>sll rd, rt, shamt</code>  <ul><li>功能：将 <code>rt</code> 左移 <code>shamt</code> 位，结果存入 <code>rd</code>。</li></ul></li><li>右移：<code>srl rd, rt, shamt</code>  <ul><li>功能：将 <code>rt</code> 逻辑右移 <code>shamt</code> 位，结果存入 <code>rd</code>。</li></ul></li></ul><h4 id="4-分支与跳转指令"><a href="#4-分支与跳转指令" class="headerlink" title="(4) 分支与跳转指令"></a><strong>(4) 分支与跳转指令</strong></h4><ul><li><strong>条件分支</strong>：<ul><li><code>beq rs, rt, offset</code>：若 <code>rs == rt</code>，跳转到 <code>PC + offset</code>。</li><li><code>bne rs, rt, offset</code>：若 <code>rs != rt</code>，跳转到 <code>PC + offset</code>。</li></ul></li><li><strong>无条件跳转</strong>：<ul><li><code>j address</code>：跳转到指定地址。</li><li><code>jal address</code>：跳转到指定地址，并保存返回地址到寄存器 <code>$ra</code>。</li></ul></li></ul><h4 id="5-浮点操作指令"><a href="#5-浮点操作指令" class="headerlink" title="(5) 浮点操作指令"></a><strong>(5) 浮点操作指令</strong></h4><ul><li>单精度浮点加法：<code>add.s fd, fs, ft</code>  <ul><li>功能：将浮点寄存器 <code>fs</code> 和 <code>ft</code> 相加，结果存入 <code>fd</code>。</li></ul></li><li>单精度浮点乘法：<code>mul.s fd, fs, ft</code>  </li></ul><hr><h3 id="4-MIPS的寄存器组织"><a href="#4-MIPS的寄存器组织" class="headerlink" title="4. MIPS的寄存器组织"></a><strong>4. MIPS的寄存器组织</strong></h3><p>MIPS指令集架构提供以下寄存器：</p><ol><li><strong>32 个通用寄存器</strong>（GPRs, General Purpose Registers）<ul><li>例如：<code>$t0 ~ $t9</code>（临时寄存器），<code>$s0 ~ $s7</code>（保存寄存器）。</li><li><code>$zero</code>：值始终为 0。</li><li><code>$ra</code>：保存返回地址。</li><li><code>$sp</code>：堆栈指针。</li></ul></li><li><strong>32 个浮点寄存器</strong><ul><li>用于浮点数运算。</li></ul></li></ol><hr><h3 id="5-MIPS寻址模式"><a href="#5-MIPS寻址模式" class="headerlink" title="5. MIPS寻址模式"></a><strong>5. MIPS寻址模式</strong></h3><p>MIPS支持以下几种寻址方式：</p><ol><li><strong>立即数寻址</strong>：<ul><li>操作数直接包含在指令中。</li><li>示例：<code>addi $t0, $t1, 5</code>（将 5 加到 <code>$t1</code> 中）。</li></ul></li><li><strong>寄存器寻址</strong>：<ul><li>操作数存储在寄存器中。</li><li>示例：<code>add $t0, $t1, $t2</code>。</li></ul></li><li><strong>基址寻址</strong>：<ul><li>使用寄存器值作为基地址，加上偏移量获得操作数地址。</li><li>示例：<code>lw $t0, 4($t1)</code>。</li></ul></li><li><strong>PC 相对寻址</strong>：<ul><li>基于程序计数器（PC）的偏移量指定目标地址。</li><li>示例：<code>beq $t0, $t1, offset</code>。</li></ul></li><li><strong>伪直接寻址</strong>：<ul><li>用于跳转指令，目标地址由指令中 26 位地址和当前 PC 拼接计算。</li><li>示例：<code>j address</code>。</li></ul></li></ol><hr><h3 id="6-MIPS的优缺点"><a href="#6-MIPS的优缺点" class="headerlink" title="6. MIPS的优缺点"></a><strong>6. MIPS的优缺点</strong></h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h4><ul><li><strong>简单性</strong>：指令设计简单，便于硬件实现和流水线优化。</li><li><strong>固定长度指令</strong>：简化了硬件的指令译码和控制。</li><li><strong>寄存器使用高效</strong>：编译器可以灵活分配寄存器，提高性能。</li><li><strong>适合嵌入式应用</strong>：代码量小、运行效率高。</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h4><ul><li><strong>代码密度低</strong>：由于固定长度指令，某些复杂操作需要多条指令完成。</li><li><strong>内存操作限制</strong>：仅能通过 <code>load</code> 和 <code>store</code> 指令访问存储器。</li></ul><hr><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a><strong>7. 总结</strong></h3><p>MIPS指令集结构以简单、高效为核心，采用固定长度指令和 Load/Store 架构，便于流水线优化和硬件实现。其简单性和灵活性使得 MIPS 在教学和嵌入式系统中得到广泛应用。</p>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构复习1</title>
      <link href="/2024/12/18/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A01/"/>
      <url>/2024/12/18/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-量化设计与分析基础"><a href="#第1章-量化设计与分析基础" class="headerlink" title="第1章 量化设计与分析基础"></a><strong>第1章 量化设计与分析基础</strong></h1><h2 id="1-计算机的分类类别"><a href="#1-计算机的分类类别" class="headerlink" title="1.计算机的分类类别"></a>1.计算机的分类类别</h2><p> <strong>Flynn分类法</strong>（基于<strong>指令流</strong>和<strong>数据流</strong>数量）</p><ul><li><strong>SISD (Single Instruction Single Data)</strong>  <ul><li>单指令单数据流  </li><li>适用于单处理器系统（Uniprocessors）。</li></ul></li><li><strong>MISD (Multiple Instruction Single Data)</strong>  <ul><li>多指令单数据流  </li><li>特殊情况，通常不常见，具体实例较少（???）。</li></ul></li><li><strong>SIMD (Single Instruction Multiple Data)</strong>  <ul><li>单指令多数据流  </li><li>适合并行处理，常用于向量处理器和图形处理。  </li><li>示例：Illiac-IV、CM-2。  </li></ul></li><li><strong>MIMD (Multiple Instruction Multiple Data)</strong>  <ul><li>多指令多数据流  </li><li>常用于多核处理器和并行计算。  </li><li>示例：SPARCCenter、T3D。  </li></ul></li></ul><h2 id="2-计算机系统结构定义和计算机的设计任务：指令集结构概念及要素"><a href="#2-计算机系统结构定义和计算机的设计任务：指令集结构概念及要素" class="headerlink" title="2.计算机系统结构定义和计算机的设计任务：指令集结构概念及要素"></a>2.计算机系统结构定义和计算机的设计任务：指令集结构概念及要素</h2><p>计算机系统结构（现代定义）：是在满足<strong>功能、性能和价格</strong>目标的条件下，<strong>设计、选择和互连</strong>硬件部件构成计算机。</p><p>系统结构覆盖：</p><p>​    <strong>指令系统设计</strong></p><p>​    <strong>组成</strong>（Organization）:计算机设计方面的高层次:CPU内部结构、存储器、I/O系统、多处理器、网络</p><p>​    <strong>硬件</strong>: 计算机的具体实现技术:详细逻辑设计、封装、冷却系统、板级设计，功耗等</p><p>根据课件内容，关于<strong>指令集结构概念及要素</strong>，整理如下重点内容：</p><hr><h3 id="指令集结构（Instruction-Set-Architecture-ISA）的概念"><a href="#指令集结构（Instruction-Set-Architecture-ISA）的概念" class="headerlink" title="指令集结构（Instruction Set Architecture, ISA）的概念"></a><strong>指令集结构（Instruction Set Architecture, ISA）的概念</strong></h3><p>指令集结构（ISA）是计算机系统中<strong>软件与硬件的接口</strong>，它定义了计算机能够执行的指令、数据类型、寄存器组织、存储访问等内容。<br> ISA 的作用是：</p><ol><li><strong>为程序员提供一个编程视角</strong>：定义可见的机器语言属性。</li><li><strong>硬件实现的基础</strong>：硬件执行程序操作时需严格遵循 ISA。</li><li><strong>软件与硬件的桥梁</strong>：指令集使操作系统和应用程序能够在不同硬件实现上运行。</li></ol><hr><h3 id="指令集结构的七个要素"><a href="#指令集结构的七个要素" class="headerlink" title="指令集结构的七个要素"></a><strong>指令集结构的七个要素</strong></h3><p>指令集结构设计需要考虑以下七个关键要素：</p><ol><li><strong>寄存器组织（Register Organization）</strong><ul><li>早期<strong>累加器结构</strong>：操作数依赖累加器（单寄存器）。</li><li>现代<strong>通用寄存器结构</strong>：支持多个寄存器，提升数据访问速度，减少对内存的依赖。<br>   <strong>示例</strong>：32位ARM架构中有16个通用寄存器。</li></ul></li><li><strong>存储器访问（Memory Access）</strong><ul><li>定义数据如何存储和读取：<ul><li><strong>字节访问</strong>（Byte-level access）</li><li><strong>地址对齐规则</strong>（Address Alignment）：数据的存储地址需对齐字边界。</li></ul></li></ul></li><li><strong>寻址方式（Addressing Modes）</strong><ul><li>定义指令如何指定操作数的位置：<ul><li><strong>直接寻址</strong>：操作数的地址直接在指令中给出。</li><li><strong>间接寻址</strong>：操作数的地址存储在寄存器或内存中。</li><li><strong>偏移寻址</strong>：基地址加上一个偏移量确定操作数位置。</li><li><strong>立即数寻址</strong>：操作数直接作为指令的一部分给出。</li></ul></li></ul></li><li><strong>操作数类型和大小（Operand Types and Sizes）</strong><ul><li>定义支持的数据类型和数据宽度：<ul><li><strong>数据类型</strong>：8位字符、16位短整型、32位整型、64位浮点数等。</li><li><strong>操作数数量</strong>：单操作数、双操作数、三操作数等。</li></ul></li></ul></li><li><strong>操作类型（Operation Types）</strong><ul><li>指令支持的基本操作，主要包括：<ul><li><strong>数据传输</strong>：如 Load（加载）、Store（存储）。</li><li><strong>算术/逻辑运算</strong>：如加法、减法、AND、OR等。</li><li><strong>控制流指令</strong>：如跳转、条件分支、子程序调用与返回。</li></ul></li></ul></li><li><strong>控制流指令（Control Flow Instructions）</strong><ul><li>定义程序如何跳转和执行：<ul><li><strong>条件跳转</strong>：根据条件执行跳转操作。</li><li><strong>无条件跳转</strong>：直接转移程序的执行位置。</li><li><strong>子程序调用/返回</strong>：用于函数的调用和返回。</li></ul></li></ul></li><li><strong>指令编码（Instruction Encoding）</strong><ul><li>定义指令如何编码和存储：<ul><li><strong>固定长度指令</strong>：每条指令的长度相等，便于硬件并行处理。</li><li><strong>可变长度指令</strong>：根据操作的复杂性，指令长度可以变化，节省存储空间。</li></ul></li></ul></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>指令集结构（ISA）是计算机系统的核心组成部分，它决定了程序与硬件的交互方式。ISA的设计主要围绕<strong>寄存器组织、存储访问、寻址方式、操作数类型、操作类型、控制流指令</strong>及<strong>指令编码</strong>等七个要素展开。</p><p>在现代计算机设计中，精简指令集（RISC）和复杂指令集（CISC）是两种主要的ISA设计风格：</p><ul><li><strong>RISC</strong>：指令简单、执行快速，适合硬件优化。</li><li><strong>CISC</strong>：指令复杂、功能强大，适合减少指令数量。</li></ul><h2 id="3-实现技术的趋势：技术发展的趋势"><a href="#3-实现技术的趋势：技术发展的趋势" class="headerlink" title="3.实现技术的趋势：技术发展的趋势"></a>3.实现技术的趋势：技术发展的趋势</h2><p><strong>摩尔定律</strong>：集成在芯片上的晶体管数量每两年翻一番，性能提升的同时成本下降。</p><h3 id="性能趋势：带宽改进优于时延"><a href="#性能趋势：带宽改进优于时延" class="headerlink" title="性能趋势：带宽改进优于时延"></a><strong>性能趋势：带宽改进优于时延</strong></h3><ul><li><strong>带宽（Bandwidth）</strong>：在给定时间内完成的工作总量。</li><li><strong>时延（Latency）</strong>：一个事件从开始到结束所需的时间。</li><li>经验法则：<ul><li>带宽提升的速度要<strong>优于时延的改善速度</strong>。</li></ul></li><li>改进方向：<ul><li>处理器性能提高，更多关注<strong>并行化技术</strong>（如多核处理器）和<strong>带宽扩展</strong>。</li></ul></li></ul><h2 id="4-集成电路功耗的趋势：功耗的概念"><a href="#4-集成电路功耗的趋势：功耗的概念" class="headerlink" title="4.集成电路功耗的趋势：功耗的概念"></a>4.集成电路功耗的趋势：功耗的概念</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218094807510.png" alt="image-20241218094807510" style="zoom:50%;" /></p><h2 id="5-可靠性：提高可靠性的方法"><a href="#5-可靠性：提高可靠性的方法" class="headerlink" title="5.可靠性：提高可靠性的方法"></a>5.可靠性：提高可靠性的方法</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218094938998.png" alt="image-20241218094938998" style="zoom:50%;" /></p><h2 id="6-测量、报告和总结计算机性能：计算机主要性能指标"><a href="#6-测量、报告和总结计算机性能：计算机主要性能指标" class="headerlink" title="6.测量、报告和总结计算机性能：计算机主要性能指标"></a>6.测量、报告和总结计算机性能：计算机主要性能指标</h2><hr><h3 id="1-响应时间（Response-Time）"><a href="#1-响应时间（Response-Time）" class="headerlink" title="1. 响应时间（Response Time）"></a><strong>1. 响应时间（Response Time）</strong></h3><p><strong>定义</strong>：  </p><ul><li>响应时间是指<strong>从任务开始到完成</strong>所经历的总时间，包括<strong>处理时间</strong>、<strong>等待时间</strong>和<strong>I/O时间</strong>。</li></ul><p><strong>特点</strong>：  </p><ul><li>包括：  <ul><li><strong>CPU执行时间</strong>（实际处理时间）。  </li><li><strong>等待时间</strong>（I/O等待、调度等开销）。  </li></ul></li></ul><hr><h3 id="2-吞吐量（Throughput）"><a href="#2-吞吐量（Throughput）" class="headerlink" title="2. 吞吐量（Throughput）"></a><strong>2. 吞吐量（Throughput）</strong></h3><p><strong>定义</strong>：  </p><ul><li>吞吐量是系统在<strong>单位时间内完成的任务数量</strong>。  </li></ul><p><strong>公式</strong>：  </p><script type="math/tex; mode=display">\text{吞吐量} = \frac{\text{总任务数量}}{\text{总执行时间}}</script><p><strong>特点</strong>：  </p><ul><li>适用于衡量系统处理能力，尤其是多任务并发环境。  </li></ul><hr><h3 id="3-执行时间（Execution-Time）"><a href="#3-执行时间（Execution-Time）" class="headerlink" title="3. 执行时间（Execution Time）"></a><strong>3. 执行时间（Execution Time）</strong></h3><p><strong>定义</strong>：  </p><ul><li>执行时间是程序实际运行所需的时间，主要指CPU完成任务的时间。  </li></ul><p><strong>公式</strong>：  </p><script type="math/tex; mode=display">\text{执行时间} = \text{时钟周期数} \times \text{时钟周期时间}</script><p>或者：  </p><script type="math/tex; mode=display">\text{执行时间} = \frac{\text{时钟周期数}}{\text{时钟频率}}</script><hr><h3 id="4-MIPS（百万条指令每秒，Million-Instructions-Per-Second）"><a href="#4-MIPS（百万条指令每秒，Million-Instructions-Per-Second）" class="headerlink" title="4. MIPS（百万条指令每秒，Million Instructions Per Second）"></a><strong>4. MIPS（百万条指令每秒，Million Instructions Per Second）</strong></h3><p><strong>定义</strong>：  </p><ul><li>MIPS表示CPU每秒执行的<strong>百万条指令数量</strong>，是衡量程序运行速度的指标。  </li></ul><p><strong>公式</strong>：  </p><script type="math/tex; mode=display">\text{MIPS} = \frac{\text{指令数量}}{\text{执行时间} \times 10^6}</script><p><strong>特点</strong>：  </p><ul><li>MIPS受指令集（ISA）的影响较大，适用于同一架构间的性能比较。  </li></ul><hr><h3 id="5-CPU时间（CPU-Time）"><a href="#5-CPU时间（CPU-Time）" class="headerlink" title="5. CPU时间（CPU Time）"></a><strong>5. CPU时间（CPU Time）</strong></h3><p><strong>定义</strong>：  </p><ul><li>CPU时间是指<strong>CPU实际用于执行程序的时间</strong>，不包括等待时间。</li></ul><p><strong>公式</strong>：  </p><script type="math/tex; mode=display">\text{CPU时间} = \text{指令数量} \times \text{CPI} \times \text{时钟周期时间}</script><p>或者：  </p><script type="math/tex; mode=display">\text{CPU时间} = \frac{\text{指令数量} \times \text{CPI}}{\text{时钟频率}}</script><p><strong>分类</strong>：  </p><ol><li><strong>用户CPU时间（User CPU Time）</strong>：CPU用于执行用户程序的时间。  </li><li><strong>系统CPU时间（System CPU Time）</strong>：CPU用于操作系统内核代码的时间。</li></ol><hr><h3 id="6-CPI（每条指令的平均时钟周期数，Cycles-Per-Instruction）"><a href="#6-CPI（每条指令的平均时钟周期数，Cycles-Per-Instruction）" class="headerlink" title="6. CPI（每条指令的平均时钟周期数，Cycles Per Instruction）"></a><strong>6. CPI（每条指令的平均时钟周期数，Cycles Per Instruction）</strong></h3><p><strong>定义</strong>：  </p><ul><li>CPI表示<strong>每条指令平均需要的时钟周期数</strong>，是衡量程序执行效率的重要指标。</li></ul><p><strong>公式</strong>：  </p><script type="math/tex; mode=display">\text{CPI} = \frac{\text{总时钟周期数}}{\text{指令数量}}</script><p><strong>特点</strong>：  </p><ul><li><strong>CPI越低</strong>，程序的执行效率越高。  </li><li>影响CPI的因素包括：  <ul><li>指令集设计（RISC vs CISC）。  </li><li>硬件流水线的效率。  </li><li>缓存命中率。</li></ul></li></ul><hr><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a><strong>总结对比</strong></h3><div class="table-container"><table><thead><tr><th>指标</th><th>定义</th><th>公式</th><th>特点</th></tr></thead><tbody><tr><td>响应时间</td><td>从任务开始到完成的总时间，包括等待时间等。</td><td>-</td><td>用户感知性能的重要指标。</td></tr><tr><td>吞吐量</td><td>单位时间内完成的任务数。</td><td><script type="math/tex">\text{吞吐量} = \frac{\text{任务数}}{\text{时间}}</script></td><td>反映系统的整体处理能力。</td></tr><tr><td>执行时间</td><td>程序完成所需的CPU实际执行时间。</td><td><script type="math/tex">\text{执行时间} = \text{时钟周期数} \times \text{时钟周期时间}</script></td><td>衡量程序性能的直接指标。</td></tr><tr><td>MIPS</td><td>每秒执行的百万条指令数。</td><td><script type="math/tex">\text{MIPS} = \frac{\text{指令数量}}{\text{时间} \times 10^6}</script></td><td>受指令集结构影响，适用同一架构。</td></tr><tr><td>CPU时间</td><td>CPU实际用于执行程序的时间。</td><td><script type="math/tex">\text{CPU时间} = \text{指令数量} \times \text{CPI} \times \text{时钟周期时间}</script></td><td>包括用户时间和系统时间。</td></tr><tr><td>CPI</td><td>每条指令平均消耗的时钟周期数。</td><td><script type="math/tex">\text{CPI} = \frac{\text{时钟周期数}}{\text{指令数}}</script></td><td>反映硬件流水线和程序执行效率。</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101043539.png" alt="image-20241218101043539" style="zoom:50%;" /></p><h2 id="7-计算机设计的量化原则：Amdahl定律"><a href="#7-计算机设计的量化原则：Amdahl定律" class="headerlink" title="7.计算机设计的量化原则：Amdahl定律"></a>7.计算机设计的量化原则：Amdahl定律</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101218632.png" alt="image-20241218101218632" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101242285.png" alt="image-20241218101242285" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101257037.png" alt="image-20241218101257037" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101321836.png" alt="image-20241218101321836" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101344721.png" alt="image-20241218101344721" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101422497.png" alt="image-20241218101422497" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101538993.png" alt="image-20241218101538993" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101606466.png" alt="image-20241218101606466" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241218101620216.png" alt="image-20241218101620216" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Partitioning Message Passing for Graph Fraud Detection</title>
      <link href="/2024/12/14/PMP/"/>
      <url>/2024/12/14/PMP/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://openreview.net/pdf?id=tEgrUrUuwA">PMP.pdf</a></p><p>代码仓库：<a href="https://github.com/Xtra-Computing/PMP">Xtra-Computing/PMP</a></p><h1 id="1-背景及创新点"><a href="#1-背景及创新点" class="headerlink" title="1.背景及创新点"></a>1.背景及创新点</h1><h2 id="1-问题背景与挑战"><a href="#1-问题背景与挑战" class="headerlink" title="1. 问题背景与挑战"></a>1. <strong>问题背景与挑战</strong></h2><p>在使用图神经网络进行图欺诈检测时，主要面临两个挑战：</p><p><strong>标签不平衡（Label Imbalance）</strong></p><p>图数据通常存在标签不平衡的问题，即欺诈和非欺诈的节点标签数量差异很大。例如，在一个社交网络中，可能大多数节点代表的是正常用户，只有少部分节点代表欺诈用户。这种不平衡的标签分布会导致模型对少数类（欺诈类）预测不准确，从而影响整体检测效果。</p><p><strong>同质性-异质性混合（Homophily-Heterophily Mixture）</strong></p><p>图数据中存在着同质性（Homophily）和异质性（Heterophily）的混合关系：</p><ul><li><strong>同质性</strong>指的是图中节点之间具有相似的属性或标签，通常是图神经网络的假设基础（例如，社交网络中的好友节点往往有相似的兴趣）。</li><li><strong>异质性</strong>则指的是图中某些节点之间存在明显的差异，例如不同类别或标签的节点连接在一起。</li></ul><p>传统的图神经网络模型倾向于利用同质性关系，忽略异质性节点的贡献，但在实际的图欺诈检测任务中，异质性节点的信息同样重要，因为欺诈节点往往和非欺诈节点之间有着不同的行为模式或特征。</p><h2 id="2-现有方法的不足"><a href="#2-现有方法的不足" class="headerlink" title="2. 现有方法的不足"></a>2. <strong>现有方法的不足</strong></h2><p>当前大多数基于GNN的图欺诈检测模型倾向于通过“排除”异质邻居（即标签不同的节点）来增强模型的同质性假设，认为这样能够提高模型的预测准确性。然而，这种方法忽略了异质邻居中可能包含的有价值信息。特别是在图欺诈检测任务中，欺诈节点与正常节点之间的差异性可能正是模型检测欺诈行为的关键。</p><h2 id="3-创新点"><a href="#3-创新点" class="headerlink" title="3. 创新点"></a>3. <strong>创新点</strong></h2><p><strong>In this paper, we argue that complicated trainable or predetermined strategies for excluding het-erophilic neighbors are unnecessary. Instead, the key of applying GNNs on fraud graphs is to distinguish neighbors during the message passing process, rather than exclusion. A powerful modelshould inherently have the capacity to adaptively modulate the information derived from both ho-mophilic and heterophilic neighbors.</strong></p><p><strong>在本文中，我们认为排除异质性邻居的复杂可训练或预定策略是没有必要的。相反，将GNN应用于欺诈图的关键是在消息传递过程中区分邻居，而不是排除。一个强大的模型应该本身具备适应性地调节来自同质性和异质性邻居信息的能力。</strong></p><p>在PMP的<strong>邻居聚合</strong>阶段，采用不同的聚合函数分别处理同质性和异质性邻居。这确保了参数共享仅限于同一类别的节点，从而防止梯度被多数类别节点主导。对于类别未知的邻居，我们将它们的聚合函数配置为同标签邻居聚合函数的灵活组合，组合权重由与中心节点相关的适应性标量函数决定。</p><p>此外，由于欺诈图是同质性-异质性混合的，不同节点从同质性邻居和异质性邻居获得的信息量应根据节点的不同而适应性调整。为此将聚合函数的参数矩阵视为相对于中心节点的权重生成器的输出。这样每个节点可以在不增加额外参数的情况下，适应性地调整来自不同类别邻居的影响。</p><p>理论分析证明，PMP可被解释为<strong>节点特定的谱卷积</strong>，即每个节点拥有自己的谱图滤波器。与统一的图滤波器相比，这种方法更适合具有同质性和异质性混合的图，因为统一图滤波器无法平衡两者。</p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h1><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241214235615424.png" alt="image-20241214235615424" style="zoom:50%;" /></p><h2 id="1-PMP方法的基本构思"><a href="#1-PMP方法的基本构思" class="headerlink" title="1. PMP方法的基本构思"></a>1. <strong>PMP方法的基本构思</strong></h2><p>PMP方法的核心思想是将邻居根据类别（欺诈、良性、未标记）进行区分，并为不同类别的邻居采用不同的聚合函数。这种方法通过区分邻居类别来防止标签不平衡问题，避免良性节点对梯度的主导作用，从而增强模型对少数类别（如欺诈节点）的学习能力。</p><ul><li><strong>欺诈邻居</strong>：通过聚合函数 <script type="math/tex">f^{(l)}_\text{fr}</script> 来处理。</li><li><strong>良性邻居</strong>：通过聚合函数 <script type="math/tex">f^{(l)}_\text{be}</script> 来处理。</li><li><strong>未标记邻居</strong>：通过灵活的聚合函数 <script type="math/tex">f^{(l)}_\text{un}</script> 来处理。</li></ul><h2 id="2-消息传递过程"><a href="#2-消息传递过程" class="headerlink" title="2. 消息传递过程"></a>2. <strong>消息传递过程</strong></h2><p>在第 <script type="math/tex">l</script> 层的消息传递过程中，PMP的操作通过以下公式进行：</p><script type="math/tex; mode=display">h^{(l)}_i = \text{Comb}^{(l-1)} \left( f^{(l-1)}_\text{self}(h^{(l-1)}_i), f^{(l-1)}_\text{fr}, f^{(l-1)}_\text{be}, f^{(l-1)}_\text{un} \right)</script><p>其中：</p><ul><li><script type="math/tex">h^{(l)}_i</script> 表示节点 <script type="math/tex">v_i</script> 在第 <script type="math/tex">l</script> 层的隐藏表示。</li><li><strong>Comb</strong> 是一个组合函数，将自节点的特征和聚合的邻居消息结合起来。</li><li><script type="math/tex">f^{(l-1)}_\text{self}(h^{(l-1)}_i)</script> 是节点 <script type="math/tex">v_i</script> 在第 <script type="math/tex">l-1</script> 层的自特征。</li><li><script type="math/tex">f^{(l-1)}_\text{fr}, f^{(l-1)}_\text{be}, f^{(l-1)}_\text{un}</script> 分别是处理欺诈、良性和未标记邻居信息的聚合函数。</li></ul><p>这种方式使得每个邻居类别（欺诈、良性、未标记）有独立的聚合函数，减少了标签不平衡问题，尤其避免了良性节点对梯度的主导作用。</p><h2 id="3-未标记邻居的处理"><a href="#3-未标记邻居的处理" class="headerlink" title="3. 未标记邻居的处理"></a>3. <strong>未标记邻居的处理</strong></h2><p>对于未标记邻居，PMP采用了一种加权组合的方式进行处理。</p><script type="math/tex; mode=display">W^{(l)}_\text{un} = \alpha^{(l)}_i W^{(l)}_\text{fr} + (1 - \alpha^{(l)}_i) W^{(l)}_\text{be}</script><p>其中，<script type="math/tex">\alpha^{(l)}_i</script> 是一个自适应标量，控制未标记邻居与欺诈邻居或良性邻居的相似度。具体来说：</p><ul><li>当 <script type="math/tex">\alpha^{(l)}_i</script> 较大时，未标记邻居更倾向于被视为欺诈节点。</li><li>当 <script type="math/tex">\alpha^{(l)}_i</script> 较小时，未标记邻居更倾向于被视为良性节点。</li></ul><p>该标量 <script type="math/tex">\alpha^{(l)}_i</script> 是通过以下公式计算的：</p><script type="math/tex; mode=display">\alpha^{(l)}_i = \Phi(h^{(l-1)}_i)</script><ul><li><script type="math/tex">\Phi</script> 是一个单层的多层感知机（MLP）函数，输入为节点 <script type="math/tex">v_i</script> 的隐藏特征 <script type="math/tex">h^{(l-1)}_i</script>，输出为一个标量 <script type="math/tex">\alpha^{(l)}_i</script>，表示未标记邻居的标签倾向。</li></ul><p>通过这种方法，PMP可以动态地调整未标记邻居的处理方式，而不是硬性地对其赋予一个固定标签，能够灵活地处理不确定的连接。</p><h2 id="4-自适应权重生成"><a href="#4-自适应权重生成" class="headerlink" title="4. 自适应权重生成"></a>4. <strong>自适应权重生成</strong></h2><p>PMP方法通过为每个节点生成特定的权重矩阵，使得每个节点的邻居信息聚合具有自适应性。具体来说，针对每个节点 <script type="math/tex">v_i</script>，聚合函数使用的权重矩阵 <script type="math/tex">W^{(l)}_\text{fr}</script> 和 <script type="math/tex">W^{(l)}_\text{be}</script> 不是固定的，而是通过基于节点特征生成的学习型权重矩阵来调整。公式如下：</p><script type="math/tex; mode=display">W^{(l)}_{\text{fr},i} = \Psi_{\text{fr}}(h^{(l)}_i), \quad W^{(l)}_{\text{be},i} = \Psi_{\text{be}}(h^{(l)}_i)</script><ul><li><script type="math/tex">\Psi_{\text{fr}}</script> 和 <script type="math/tex">\Psi_{\text{be}}</script> 是两个单层的MLP模型，用于生成节点特定的权重矩阵。</li><li>这些权重矩阵是动态生成的，确保模型可以根据每个节点的特征适应性地调整对不同类别邻居的影响。</li></ul><p>这种基于节点特征生成权重矩阵的方式，避免了传统方法中使用共享权重矩阵的弊端，从而使得每个节点能够更好地适应其特定的邻居结构。</p><h2 id="5-谱图卷积的解释"><a href="#5-谱图卷积的解释" class="headerlink" title="5. 谱图卷积的解释"></a>5. <strong>谱图卷积的解释</strong></h2><p>PMP通过谱图卷积的视角解释其模型行为。每个节点的消息传递过程可以看作是一个自适应的谱图卷积操作，具体为：</p><script type="math/tex; mode=display">H(v_i) = g^{\text{fr}}_i(L) X W_{\text{fr}} + g^{\text{be}}_i(L) X W_{\text{be}}</script><ul><li><script type="math/tex">g^{\text{fr}}_i(L)</script> 和 <script type="math/tex">g^{\text{be}}_i(L)</script> 是分别针对欺诈邻居和良性邻居的谱图卷积滤波器。</li><li><script type="math/tex">X</script> 是节点特征矩阵，<script type="math/tex">W_{\text{fr}}</script> 和 <script type="math/tex">W_{\text{be}}</script> 是对应的权重矩阵。</li><li><script type="math/tex">L</script> 是归一化的拉普拉斯矩阵，用于表示图的结构。</li></ul><p>PMP确保每个节点都有一个专属的谱图滤波器，这意味着每个节点能够根据其具体的图结构背景来适应性地处理邻居的信息。这种方法优于传统的统一图滤波器，因为它能够更好地处理图中的同质性和异质性混合。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241215110751987.png" alt="image-20241215110751987" style="zoom:50%;" /></p><p>图展示了PMP方法在Barabási–Albert图上的实验结果，包括以下两部分：</p><h3 id="a-图结构"><a href="#a-图结构" class="headerlink" title="(a) 图结构"></a>(a) 图结构</h3><p>这是一个包含500个节点的Barabási–Albert图，其中10%的节点为欺诈节点（红色表示），90%的节点为良性节点（蓝色表示）。节点的特征分布如下：</p><ul><li>良性节点的特征服从高斯分布 <script type="math/tex">\mathcal{N}(1, 1)</script>。</li><li>欺诈节点的特征服从高斯分布 <script type="math/tex">\mathcal{N}(5, 1)</script>。</li></ul><p>这部分展示了良性和欺诈节点在网络中的混合情况，强调了同质性（良性节点聚集）和异质性（欺诈节点与良性节点混合）的共存。</p><h3 id="b-谱卷积滤波器"><a href="#b-谱卷积滤波器" class="headerlink" title="(b) 谱卷积滤波器"></a>(b) 谱卷积滤波器</h3><p>这部分展示了PMP方法针对一个随机节点 <script type="math/tex">v_i</script> 的谱卷积滤波器 <script type="math/tex">g^\text{fr}_i(\Lambda)</script> 和 <script type="math/tex">g^\text{be}_i(\Lambda)</script> 的频谱响应：</p><ul><li><strong>蓝色曲线：</strong> <script type="math/tex">g^\text{fr}_i(\Lambda)</script> 表示欺诈邻居的滤波器响应。</li><li><strong>橙色曲线：</strong> <script type="math/tex">g^\text{be}_i(\Lambda)</script> 表示良性邻居的滤波器响应。</li></ul><p>可以看到，两个滤波器在频域内互为补充，分别覆盖了不同的频率范围。这种设计确保了PMP能够针对不同类别的邻居信息进行区分和处理，从而适应同质性和异质性混合的图结构。</p><h1 id="3-实验"><a href="#3-实验" class="headerlink" title="3.实验"></a>3.实验</h1><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241215110723604.png" alt="image-20241215110723604" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241215110648957.png" alt="image-20241215110648957" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法复习</title>
      <link href="/2024/11/24/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2024/11/24/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="1-贪心算法-Greedy-Algorithm"><a href="#1-贪心算法-Greedy-Algorithm" class="headerlink" title="1. 贪心算法 (Greedy Algorithm)"></a><strong>1. 贪心算法 (Greedy Algorithm)</strong></h2><ul><li><strong>基本思想</strong>：在每一步中选择“当前最优解”，即局部最优解，期望通过一系列局部最优选择达到全局最优。</li><li>局部最优与全局最优的关系：<ul><li>贪心算法仅在某些特定问题中有效，即局部最优选择能导出全局最优解。</li><li>贪心算法通常简单且高效，但并不总是正确。</li></ul></li><li><strong>优点</strong>：算法简单、执行效率高。</li><li><strong>缺点</strong>：可能产生错误结果或次优解。</li></ul><h2 id="1-1案例：区间调度问题-Interval-Scheduling"><a href="#1-1案例：区间调度问题-Interval-Scheduling" class="headerlink" title="1.1案例：区间调度问题 (Interval Scheduling)"></a>1.1<strong>案例：区间调度问题 (Interval Scheduling)</strong></h2><ul><li>问题描述：<ul><li>给定 $n$ 个任务，每个任务有一个开始时间 $s_j$ 和结束时间 $f_j$。</li><li>两个任务相容当且仅当它们不重叠。</li><li>目标：选择最多数量的相容任务。</li></ul></li><li>贪心策略：<ul><li>按任务的结束时间 $f_j$ 升序排序。</li><li>每次选择当前最早结束且与已选任务不冲突的任务。</li></ul></li><li>时间复杂度：<ul><li>排序：$O(n \log n)$。</li><li>遍历：$O(n)$。</li><li>总时间复杂度：$O(n \log n)$。</li></ul></li></ul><p>以下是区间调度问题 (Interval Scheduling) 的贪心算法伪代码：</p><h3 id="区间调度问题的伪代码"><a href="#区间调度问题的伪代码" class="headerlink" title="区间调度问题的伪代码"></a><strong>区间调度问题的伪代码</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Algorithm Interval_Scheduling</span><br><span class="line">Input: 一个任务集合 S = &#123;(s_1, f_1), (s_2, f_2), ..., (s_n, f_n)&#125;，</span><br><span class="line">       每个任务 i 有开始时间 s_i 和结束时间 f_i</span><br><span class="line">Output: 最多的相容任务集合 A</span><br><span class="line"></span><br><span class="line">1. 将任务按照结束时间 f_i 升序排序</span><br><span class="line">2. 初始化相容任务集合 A = &#123;&#125;</span><br><span class="line">3. 初始化上一个任务的结束时间 last_finish_time = 0</span><br><span class="line">4. for each task (s, f) in S do</span><br><span class="line">5.     if s &gt;= last_finish_time then</span><br><span class="line">6.         将任务 (s, f) 添加到集合 A 中</span><br><span class="line">7.         更新 last_finish_time = f</span><br><span class="line">8.     end if</span><br><span class="line">9. end for</span><br><span class="line">10. return A</span><br></pre></td></tr></table></figure><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a><strong>时间复杂度分析</strong></h3><ol><li><strong>排序</strong>：将任务按照结束时间排序需要 $O(n \log n)$ 时间。</li><li><strong>遍历</strong>：检查所有任务需要 $O(n)$ 时间。</li><li><strong>总复杂度</strong>：$O(n \log n)$。</li></ol><hr><h3 id="定理：贪心算法是最优的"><a href="#定理：贪心算法是最优的" class="headerlink" title="定理：贪心算法是最优的**"></a>定理：贪心算法是最优的**</h3><h4 id="证明方法：反证法-Proof-by-Contradiction"><a href="#证明方法：反证法-Proof-by-Contradiction" class="headerlink" title="证明方法：反证法 (Proof by Contradiction)"></a><strong>证明方法：反证法 (Proof by Contradiction)</strong></h4><ol><li><strong>假设贪心算法不是最优的</strong>：<ul><li>设 $i_1, i_2, \dots, i_k$ 是贪心算法选择的任务集合。</li><li>设 $j_1, j_2, \dots, j_m$ 是最优解选择的任务集合，且 $m &gt; k$。</li><li>假设两个集合的前 $r$ 个任务是相同的，即 $i<em>1 = j_1, i_2 = j_2, \dots, i_r = j_r$，但 $i</em>{r+1} \neq j_{r+1}$。</li></ul></li><li><strong>分析任务 $i<em>{r+1}$ 和 $j</em>{r+1}$ 的关系</strong>：<ul><li>根据贪心算法的选择策略，任务 $i<em>{r+1}$ 的结束时间比 $j</em>{r+1}$ 的结束时间早，即 $f<em>{i</em>{r+1}} \leq f<em>{j</em>{r+1}}$。</li><li>因为贪心算法优先选择结束时间最早的任务，所以任务 $i_{r+1}$ 不与前 $r$ 个任务冲突。</li></ul></li><li><strong>替换分析</strong>：<ul><li>由于任务 $i<em>{r+1}$ 比 $j</em>{r+1}$ 更早结束，且它与前 $r$ 个任务相容，可以用 $i<em>{r+1}$ 替换 $j</em>{r+1}$。</li><li>替换后，新的任务集合仍然是合法的解，且任务数量不变，但结束时间更早。</li></ul></li><li><strong>矛盾</strong>：<ul><li>根据上述替换操作，可以构造一个比最优解更优的解（即任务数量相同但结束时间更早），这与最优解的定义矛盾。</li><li>因此，假设贪心算法不是最优的成立不了。</li></ul></li></ol><hr><h3 id="关键结论"><a href="#关键结论" class="headerlink" title="关键结论"></a><strong>关键结论</strong></h3><ul><li><strong>贪心选择性质</strong>：每一步选择结束时间最早的任务不会影响全局最优解。</li><li><strong>最优子结构</strong>：贪心算法的解是最优解的一部分，且每一步选择后剩余问题仍然是原问题的子问题。</li></ul><h2 id="1-2-区间分配问题-Interval-Partitioning"><a href="#1-2-区间分配问题-Interval-Partitioning" class="headerlink" title="1.2 区间分配问题 (Interval Partitioning)"></a>1.2 <strong>区间分配问题 (Interval Partitioning)</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241123165945029.png" alt="image-20241123165945029" style="zoom: 50%;" /></p><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h4><ul><li>给定多个讲座，每个讲座的开始时间和结束时间分别为s_j和f_j。</li><li>目标：用最少数量的教室安排所有讲座，使得同一教室内没有重叠的讲座。</li></ul><h4 id="贪心算法方法"><a href="#贪心算法方法" class="headerlink" title="贪心算法方法"></a><strong>贪心算法方法</strong></h4><ol><li>按照讲座的<strong>开始时间</strong>s_j递增排序。</li><li>遍历排序后的讲座列表：<ul><li>检查当前讲座是否可以分配到现有教室中（该教室中最后一个讲座的结束时间早于当前讲座的开始时间）。</li><li>如果可以，则分配到该教室。</li><li>如果不可以，则分配一个新教室。</li></ul></li><li>返回分配的教室总数。</li></ol><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a><strong>伪代码</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IntervalPartitioning(lectures):</span><br><span class="line">    sort lectures by start time s_j (ascending)</span><br><span class="line">    d ← 0  // 教室总数</span><br><span class="line">    initialize a priority queue classrooms to store end times of lectures in each classroom</span><br><span class="line"></span><br><span class="line">    for each lecture j in lectures:</span><br><span class="line">        if lecture j is compatible with any classroom k:</span><br><span class="line">            // Compatible: the last lecture in classroom k ends before lecture j starts</span><br><span class="line">            assign lecture j to classroom k</span><br><span class="line">            update the end time of classroom k in classrooms</span><br><span class="line">        else:</span><br><span class="line">            d ← d + 1  // Allocate a new classroom</span><br><span class="line">            assign lecture j to the new classroom d</span><br><span class="line">            insert end time f_j of lecture j into classrooms</span><br><span class="line"></span><br><span class="line">    return d</span><br></pre></td></tr></table></figure><p><strong>实现细节</strong>：</p><ul><li>使用优先队列存储每个教室的结束时间，始终优先分配结束时间最早的教室。</li><li>排序的时间复杂度为O(nlog⁡n)，遍历讲座列表的时间复杂度为O(nlog⁡d)O（d是教室数量）。</li></ul><hr><h4 id="贪心最优性证明"><a href="#贪心最优性证明" class="headerlink" title="贪心最优性证明"></a><strong>贪心最优性证明</strong></h4><p><strong>引理</strong>：贪心算法分配的教室数量d恰好等于区间深度（最大重叠数）。</p><h4 id="核心观察"><a href="#核心观察" class="headerlink" title="核心观察"></a>核心观察</h4><ul><li>贪心算法永远不会在同一个教室中安排两个互相不兼容的讲座，因为它在每一步都选择与现有教室安排兼容的讲座。</li></ul><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><ol><li><strong>设定</strong>：<ul><li>$d$：贪心算法分配的教室总数。</li></ul></li><li><strong>贪心分配新教室的原因</strong>：<ul><li>当分配到第 $d$ 个教室时，说明有一个讲座 $j$ 无法与前 $d-1$ 个教室中的任何安排兼容。</li><li>换句话说，$j$ 与所有前 $d-1$ 个教室中正在进行的讲座重叠。</li></ul></li><li><strong>关于这些讲座的性质</strong>：<ul><li>这些不兼容的讲座（包括 $j$ 在内）总共有 $d$ 个。</li><li>它们的结束时间都晚于 $j$ 的开始时间 $s_j$。</li></ul></li><li><strong>按开始时间排序的作用</strong>：<ul><li>因为所有不兼容都发生在 $s_j$ 或更早时间开始的讲座之间。</li><li>因此，这些讲座重叠的时间段是 $s_j + \epsilon$（$\epsilon$ 是一个非常小的正数）。</li></ul></li><li><strong>关键观察</strong>：<ul><li>在时间 $s_j + \epsilon$，有 $d$ 个讲座同时进行，导致需要至少 $d$ 个教室。</li></ul></li><li><strong>结论</strong>：<ul><li>任何调度方案都需要至少 $d$ 个教室。</li><li>贪心算法正好使用了 $d$ 个教室，因此它是最优的。</li></ul></li></ol><hr><hr><h2 id="1-3-加油站问题（Selecting-Breakpoints）"><a href="#1-3-加油站问题（Selecting-Breakpoints）" class="headerlink" title="1.3 加油站问题（Selecting Breakpoints）"></a>1.3 <strong>加油站问题（Selecting Breakpoints）</strong></h2><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h4><ul><li><strong>场景</strong>：从 Princeton 到 Palo Alto 的固定路线中，有若干加油站，车的燃油容量为 $C$。</li><li><strong>目标</strong>：在尽可能少的加油次数下完成旅程。</li></ul><hr><h4 id="贪心算法思路"><a href="#贪心算法思路" class="headerlink" title="贪心算法思路"></a><strong>贪心算法思路</strong></h4><ul><li>核心原则：在当前油量范围内，选择能到达的最远加油站。</li><li>贪心选择的理由：最远加油站可以为下一段行程提供最长的可行范围，确保加油次数最少。</li></ul><hr><h4 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a><strong>伪代码</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241123173007212.png" alt="image-20241123173007212"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SelectBreakpoints(L, C):</span><br><span class="line">    # 输入：加油站的位置列表 L，燃油容量 C</span><br><span class="line">    # 输出：加油的站点序列</span><br><span class="line"></span><br><span class="line">    sort L in ascending order  # 按加油站位置升序排列</span><br><span class="line">    x ← 0  # 当前车辆所在位置</span><br><span class="line">    S ← ∅  # 加油站点集合</span><br><span class="line">    n ← length of L</span><br><span class="line">    i ← 0  # 当前加油站索引</span><br><span class="line"></span><br><span class="line">    while x &lt; L[n-1]:  # 未到达终点</span><br><span class="line">        p ← -1  # 记录当前最优选择</span><br><span class="line">        while i &lt; n and L[i] &lt;= x + C:  # 找到当前油量范围内的所有可选站点</span><br><span class="line">            p ← i  # 更新最优选择</span><br><span class="line">            i ← i + 1</span><br><span class="line">        if p == -1:  # 如果没有可以到达的站点</span><br><span class="line">            return &quot;No solution&quot;</span><br><span class="line">        S.append(L[p])  # 在 p 点加油</span><br><span class="line">        x ← L[p]  # 更新当前位置</span><br><span class="line">    return S</span><br></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong>时间复杂度</strong></h4><ul><li>排序的时间复杂度：$O(n \log n)$。</li><li>遍历加油站的时间复杂度：$O(n)$。</li><li>总体时间复杂度：$O(n \log n)$。</li></ul><h4 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a><strong>正确性证明</strong></h4><ol><li><strong>假设</strong>：<ul><li>贪心算法选择的加油站序列为 $g_1, g_2, \dots, g_k$。</li><li>最优解为 $f_1, f_2, \dots, f_m$，其中 $m &lt; k$。</li></ul></li><li><strong>比较前若干站点</strong>：<ul><li>假设两者在前 $r$ 个站点一致，即 $g<em>1 = f_1, g_2 = f_2, \dots, g_r = f_r$，且 $g</em>{r+1} \neq f_{r+1}$。</li><li>贪心算法选择的 $g<em>{r+1}$ 是当前能到达的最远站点，而最优解选择了 $f</em>{r+1}$。</li><li>如果 $f<em>{r+1}$ 比 $g</em>{r+1}$ 更近，则 $f_{r+1}$ 无法保证后续行程的最少加油次数，导致矛盾。</li></ul></li><li><strong>结论</strong>：<ul><li>贪心算法的选择确保了最远的行驶范围，因此保证了全局最优性。</li></ul></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 考试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rayleigh Quotient Graph Neural Networks for Graph-level Anomaly Detection Detection</title>
      <link href="/2024/11/24/RQGNN/"/>
      <url>/2024/11/24/RQGNN/</url>
      
        <content type="html"><![CDATA[<h1 id="Rayleigh-Quotient-Graph-Neural-Networks-for-Graph-level-Anomaly-Detection"><a href="#Rayleigh-Quotient-Graph-Neural-Networks-for-Graph-level-Anomaly-Detection" class="headerlink" title="Rayleigh Quotient Graph Neural Networks for Graph-level Anomaly Detection"></a>Rayleigh Quotient Graph Neural Networks for Graph-level Anomaly Detection</h1><p>文献地址：<a href="https://openreview.net/forum?id=4UIBysXjVq">Rayleigh Quotient Graph Neural Networks for Graph-level Anomaly Detection | OpenReview</a></p><p>代码仓库：<a href="https://github.com/xydong127/RQGNN">xydong127/RQGNN</a></p><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>核心问题是：<strong>如何通过光谱特性有效地进行图级异常检测</strong>。</p><h2 id="1-1-现有问题"><a href="#1-1-现有问题" class="headerlink" title="1.1 现有问题"></a>1.1 <strong>现有问题</strong></h2><ul><li><strong>光谱特性的忽视</strong>：<ul><li>当前图异常检测方法多基于空间域的特征，例如节点属性和拓扑信息，未能充分利用图的光谱特性。</li><li>异常图和正常图在光谱能量分布上存在显著差异，但这一特性尚未被现有方法利用。</li></ul></li><li><strong>模型解释性不足</strong>：<ul><li>许多现有方法框架复杂，设计上缺乏理论依据，难以解释异常检测的核心原理。</li></ul></li><li><strong>性能不足</strong>：<ul><li>当前模型在异常检测任务中效果有限，特别是在数据不平衡的情况下难以有效捕捉异常模式。</li></ul></li></ul><h2 id="1-2-文献中的解决方案"><a href="#1-2-文献中的解决方案" class="headerlink" title="1.2 文献中的解决方案"></a>1.2 <strong>文献中的解决方案</strong></h2><p>针对上述问题，本文提出了一个创新性的解决方案：</p><ul><li>通过研究<strong>Rayleigh商</strong>，揭示正常图和异常图的累积光谱能量分布存在统计学差异。</li><li>利用光谱图神经网络（Spectral GNN）结合Rayleigh商进行显式与隐式学习，捕捉异常图的光谱特性。</li><li>通过提出Rayleigh Quotient Graph Neural Network（RQGNN），实现异常检测任务的高效和解释性解决方案。</li></ul><h2 id="1-3-目标"><a href="#1-3-目标" class="headerlink" title="1.3 目标"></a>1.3 <strong>目标</strong></h2><ul><li><strong>探索图的光谱特性</strong>：利用Rayleigh商描述光谱能量分布差异，为异常检测提供理论支持。</li><li><strong>提高检测精度</strong>：设计能够捕捉异常图特征的高效模型，在多个真实世界数据集上验证其性能。</li><li><strong>增强模型解释性</strong>：通过光谱特性（Rayleigh商）和模块化设计，提供异常检测的可解释框架。</li></ul><p>文献的主要贡献在于首次将Rayleigh商引入到图级异常检测中，开辟了基于光谱特性的图异常检测新方向。</p><hr><h1 id="2-背景知识介绍"><a href="#2-背景知识介绍" class="headerlink" title="2 背景知识介绍"></a>2 背景知识介绍</h1><h2 id="2-1-图的光谱特性"><a href="#2-1-图的光谱特性" class="headerlink" title="2.1 图的光谱特性"></a>2.1 图的光谱特性</h2><p><strong>图的光谱特性</strong>是基于图的拉普拉斯矩阵或邻接矩阵的特征值和特征向量来描述图的全局结构、局部模式及其信号传播特性。它们广泛用于图分割、图嵌入、图信号处理等任务。</p><h3 id="1-图谱分析的基础"><a href="#1-图谱分析的基础" class="headerlink" title="1. 图谱分析的基础"></a>1. <strong>图谱分析的基础</strong></h3><h4 id="1-拉普拉斯矩阵"><a href="#1-拉普拉斯矩阵" class="headerlink" title="(1) 拉普拉斯矩阵"></a>(1) <strong>拉普拉斯矩阵</strong></h4><p>对于一个无向图 (G = (V, E))，拉普拉斯矩阵定义为：</p><script type="math/tex; mode=display">L = D - A,</script><p>其中：</p><ul><li><script type="math/tex">D</script> 是节点的度矩阵（对角元素为节点度数）；</li><li><script type="math/tex">A</script> 是邻接矩阵。</li></ul><h4 id="2-归一化拉普拉斯矩阵"><a href="#2-归一化拉普拉斯矩阵" class="headerlink" title="(2) 归一化拉普拉斯矩阵"></a>(2) <strong>归一化拉普拉斯矩阵</strong></h4><p>归一化形式可以是：</p><script type="math/tex; mode=display">\tilde{L} = I - D^{-1/2} A D^{-1/2}.</script><h4 id="3-谱分解"><a href="#3-谱分解" class="headerlink" title="(3) 谱分解"></a>(3) <strong>谱分解</strong></h4><p>拉普拉斯矩阵 <script type="math/tex">L</script> 可以分解为：</p><script type="math/tex; mode=display">L = U \Lambda U^T,</script><p>其中：</p><ul><li><script type="math/tex">U</script> 是特征向量组成的矩阵；</li><li><script type="math/tex">\Lambda = \text{diag}(\lambda_1, \lambda_2, \dots, \lambda_n)</script> 是特征值对角矩阵，特征值按升序排列。</li></ul><h4 id="4-特征值的性质"><a href="#4-特征值的性质" class="headerlink" title="(4) 特征值的性质"></a>(4) <strong>特征值的性质</strong></h4><ul><li><script type="math/tex">\lambda_1 = 0</script> 且对应的特征向量为常数向量（全1向量），反映图的全局平滑性。</li><li>较小的特征值对应图的低频信息（平滑信号）。</li><li>较大的特征值对应图的高频信息（局部变化）。</li></ul><h3 id="2-光谱特性描述图的几种方式"><a href="#2-光谱特性描述图的几种方式" class="headerlink" title="2. 光谱特性描述图的几种方式"></a>2. <strong>光谱特性描述图的几种方式</strong></h3><h4 id="1-连通性"><a href="#1-连通性" class="headerlink" title="(1) 连通性"></a>(1) <strong>连通性</strong></h4><ul><li>第二小特征值（Fiedler值）<script type="math/tex">\lambda_2</script> 表示图的连通性。<ul><li><script type="math/tex">\lambda_2 = 0</script>：图是不连通的；</li><li><script type="math/tex">\lambda_2 > 0</script>：图是连通的，值越大表明连通性越强。</li></ul></li></ul><h4 id="2-信号平滑性"><a href="#2-信号平滑性" class="headerlink" title="(2) 信号平滑性"></a>(2) <strong>信号平滑性</strong></h4><ul><li>光谱特性可以描述图上的信号传播特性。</li><li><strong>低频信号</strong>：小特征值对应的特征向量反映了全局一致性信号。</li><li><strong>高频信号</strong>：大特征值对应的特征向量捕捉了图中的局部变化或噪声。</li></ul><h4 id="3-图的全局结构"><a href="#3-图的全局结构" class="headerlink" title="(3) 图的全局结构"></a>(3) <strong>图的全局结构</strong></h4><ul><li>特征值分布反映了图的全局几何性质，例如节点的聚集度或离散度。</li></ul><h4 id="4-图的社区结构"><a href="#4-图的社区结构" class="headerlink" title="(4) 图的社区结构"></a>(4) <strong>图的社区结构</strong></h4><ul><li>社区检测任务可以利用特征值和特征向量：<ul><li>特征值反映社区的连通性；</li><li>特征向量可以划分图为若干子图。</li></ul></li></ul><h3 id="3-图谱特性在不同任务中的意义"><a href="#3-图谱特性在不同任务中的意义" class="headerlink" title="3. 图谱特性在不同任务中的意义"></a>3. <strong>图谱特性在不同任务中的意义</strong></h3><h4 id="1-图分割"><a href="#1-图分割" class="headerlink" title="(1) 图分割"></a>(1) <strong>图分割</strong></h4><p>通过拉普拉斯矩阵的第二小特征值 <script type="math/tex">\lambda_2</script> 和对应的特征向量，可以实现图的二分。</p><ul><li>目标是找到一个切割，使得子图内部的连接紧密，子图之间的连接稀疏。</li></ul><h4 id="2-图信号处理"><a href="#2-图信号处理" class="headerlink" title="(2) 图信号处理"></a>(2) <strong>图信号处理</strong></h4><ul><li>图上的信号（例如节点特征）可以被分解到不同频率域：<ul><li><strong>低频分量</strong>：全局一致性，类似平滑变化；</li><li><strong>高频分量</strong>：局部剧烈变化或异常信号。</li></ul></li></ul><h4 id="3-图嵌入"><a href="#3-图嵌入" class="headerlink" title="(3) 图嵌入"></a>(3) <strong>图嵌入</strong></h4><ul><li>通过谱分解将图嵌入到低维空间，同时保留图的全局结构。</li><li>特征向量为嵌入向量，特征值用于度量不同分量的重要性。</li></ul><h4 id="4-图异常检测"><a href="#4-图异常检测" class="headerlink" title="(4) 图异常检测"></a>(4) <strong>图异常检测</strong></h4><ul><li>异常图通常表现为高频信号（较大的特征值），因为异常会打破图的全局结构，增加局部变化。</li></ul><h4 id="5-传播特性分析"><a href="#5-传播特性分析" class="headerlink" title="(5) 传播特性分析"></a>(5) <strong>传播特性分析</strong></h4><ul><li>特征值的分布决定了图上信息扩散或传播的速度：<ul><li>紧凑的特征值分布表示传播快；</li><li>分散的特征值分布表示传播慢。</li></ul></li></ul><h3 id="4-图光谱特性与Rayleigh商的关系"><a href="#4-图光谱特性与Rayleigh商的关系" class="headerlink" title="4. 图光谱特性与Rayleigh商的关系"></a>4. <strong>图光谱特性与Rayleigh商的关系</strong></h3><p>Rayleigh商为分析光谱特性提供了一个直观的度量工具：</p><script type="math/tex; mode=display">RQ(x, L) = \frac{x^T L x}{x^T x},</script><p>其中：</p><ul><li><script type="math/tex">x</script> 是信号；</li><li><script type="math/tex">L</script> 是拉普拉斯矩阵。</li></ul><h4 id="1-平滑性度量"><a href="#1-平滑性度量" class="headerlink" title="(1) 平滑性度量"></a>(1) <strong>平滑性度量</strong></h4><ul><li><script type="math/tex">RQ(x, L)</script> 的值越小，信号越平滑（低频分量多）。</li><li><script type="math/tex">RQ(x, L)</script> 的值越大，信号越不平滑（高频分量多）。</li></ul><h4 id="2-特征值与信号"><a href="#2-特征值与信号" class="headerlink" title="(2) 特征值与信号"></a>(2) <strong>特征值与信号</strong></h4><ul><li>Rayleigh商的极值对应于拉普拉斯矩阵的特征值。</li><li>对应的信号 <script type="math/tex">x</script> 是拉普拉斯矩阵的特征向量。</li></ul><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. <strong>总结</strong></h3><p>图的光谱特性通过拉普拉斯矩阵的特征值和特征向量揭示了图的全局结构、信号传播模式和局部变化。特征值分布反映了图的连通性、平滑性和社区结构等重要性质。这些特性在图分割、嵌入、异常检测和传播分析等任务中具有广泛应用。Rayleigh商则提供了量化这些光谱特性的工具，是研究光谱特性的重要理论基础。</p><hr><h2 id="2-2-GNN发展"><a href="#2-2-GNN发展" class="headerlink" title="2.2 GNN发展"></a>2.2 GNN发展</h2><p><strong>图神经网络（GNN）</strong>的发展与图的<strong>光谱特征</strong>密切相关，但并不仅仅依赖光谱特征。GNN的发展结合了<strong>光谱方法</strong>和<strong>空间方法</strong>，根据应用需求和计算效率逐步演进。</p><h3 id="1-基于光谱特征的GNN发展"><a href="#1-基于光谱特征的GNN发展" class="headerlink" title="1. 基于光谱特征的GNN发展"></a>1. <strong>基于光谱特征的GNN发展</strong></h3><p>早期的GNN模型主要受到<strong>图谱分析</strong>的启发，利用图的光谱特性设计过滤器或特征提取方法。</p><h4 id="1-光谱图神经网络的基础"><a href="#1-光谱图神经网络的基础" class="headerlink" title="(1) 光谱图神经网络的基础"></a>(1) <strong>光谱图神经网络的基础</strong></h4><p>光谱图神经网络（Spectral GNN）以图的拉普拉斯矩阵的特征值和特征向量为基础，进行特征学习。</p><ul><li><p><strong>目标</strong>：</p><ul><li>利用图的光谱特性捕捉全局信息。</li><li>通过滤波器处理图信号，实现节点或图的特征表示。</li></ul></li><li><p><strong>关键公式</strong>：<br>图信号<script type="math/tex">x</script>在拉普拉斯矩阵上的过滤操作可以表示为：</p><script type="math/tex; mode=display">g_\theta(L)x = U g_\theta(\Lambda) U^T x,</script><p>其中：</p><ul><li><script type="math/tex">L</script>是拉普拉斯矩阵；</li><li><script type="math/tex">U</script>是拉普拉斯矩阵的特征向量矩阵；</li><li><script type="math/tex">\Lambda</script>是拉普拉斯矩阵的特征值对角矩阵；</li><li><script type="math/tex">g_\theta(\Lambda)</script>是基于特征值设计的滤波器。</li></ul></li></ul><h4 id="2-光谱GNN的代表方法"><a href="#2-光谱GNN的代表方法" class="headerlink" title="(2) 光谱GNN的代表方法"></a>(2) <strong>光谱GNN的代表方法</strong></h4><ol><li><p><strong>Spectral Convolutional Neural Networks (Bruna et al., 2013)</strong>：</p><ul><li>基于光谱域设计卷积操作，直接依赖拉普拉斯矩阵的特征分解。</li><li><strong>缺点</strong>：特征分解的计算复杂度高，难以扩展到大规模图。</li></ul></li><li><p><strong>ChebNet (Defferrard et al., 2016)</strong>：</p><ul><li>使用<strong>切比雪夫多项式</strong>近似滤波器，减少了依赖拉普拉斯分解的计算。</li><li>滤波器表示为：<script type="math/tex; mode=display">g_\theta(L) \approx \sum_{k=0}^K \theta_k T_k(\tilde{L}),</script>其中<script type="math/tex">T_k</script>是切比雪夫多项式，<script type="math/tex">\tilde{L}</script>是归一化的拉普拉斯矩阵。</li></ul></li><li><p><strong>GCN (Graph Convolutional Networks, Kipf and Welling, 2017)</strong>：</p><ul><li><p>GCN进一步简化了光谱卷积，使用一阶近似，避免复杂的多项式计算：</p><script type="math/tex; mode=display">H^{(l+1)} = \sigma\left( \tilde{D}^{-1/2} \tilde{A} \tilde{D}^{-1/2} H^{(l)} W^{(l)} \right),</script><p>其中：</p><ul><li><script type="math/tex">\tilde{A} = A + I</script>是加自环的邻接矩阵；</li><li><script type="math/tex">\tilde{D}</script>是节点的度矩阵。</li></ul></li><li><p>通过简化的图卷积操作，将光谱方法引入空间域。</p></li></ul></li></ol><h4 id="光谱方法的局限性："><a href="#光谱方法的局限性：" class="headerlink" title="光谱方法的局限性："></a>光谱方法的局限性：</h4><ul><li><strong>高计算成本</strong>：需要对图的拉普拉斯矩阵进行特征分解，计算复杂度高。</li><li><strong>转移性差</strong>：光谱特性依赖于图的特定拓扑结构，难以泛化到不同图。</li></ul><h3 id="2-空间域方法的发展"><a href="#2-空间域方法的发展" class="headerlink" title="2. 空间域方法的发展"></a>2. <strong>空间域方法的发展</strong></h3><p>由于光谱方法的局限性，GNN逐步转向<strong>空间域方法</strong>，这类方法直接在节点的局部邻域上进行操作，无需特征分解。</p><h4 id="1-空间域的核心思想"><a href="#1-空间域的核心思想" class="headerlink" title="(1) 空间域的核心思想"></a>(1) <strong>空间域的核心思想</strong></h4><p>空间域方法将卷积操作转化为邻域信息的聚合，即通过每个节点的邻居信息生成节点的特征。</p><h4 id="2-代表模型"><a href="#2-代表模型" class="headerlink" title="(2) 代表模型"></a>(2) <strong>代表模型</strong></h4><ol><li><p><strong>GraphSAGE (Hamilton et al., 2017)</strong>：</p><ul><li>通过采样邻居节点，设计不同的聚合函数（如均值、最大值）进行特征更新：<script type="math/tex; mode=display">h_v^{(l+1)} = \sigma\left( W^{(l)} \cdot \text{AGGREGATE}(\{h_u^{(l)}, \forall u \in \mathcal{N}(v)\}) \right),</script>其中<script type="math/tex">\mathcal{N}(v)</script>表示节点<script type="math/tex">v</script>的邻居。</li></ul></li><li><p><strong>GAT (Graph Attention Networks, Velickovic et al., 2018)</strong>：</p><ul><li>引入注意力机制，根据邻居的重要性分配不同权重：<script type="math/tex; mode=display">h_i^{(l+1)} = \sigma\left( \sum_{j \in \mathcal{N}(i)} \alpha_{ij} W h_j^{(l)} \right),</script>其中<script type="math/tex">\alpha_{ij}</script>是注意力权重。</li></ul></li><li><p><strong>Graph Isomorphism Network (GIN, Xu et al., 2019)</strong>：</p><ul><li>设计了一种强表达能力的聚合函数，理论上等价于 Weisfeiler-Lehman 图同构测试。</li></ul></li></ol><h3 id="3-光谱特征与空间特征的结合"><a href="#3-光谱特征与空间特征的结合" class="headerlink" title="3. 光谱特征与空间特征的结合"></a>3. <strong>光谱特征与空间特征的结合</strong></h3><p>近年来，研究者尝试结合光谱和空间方法，以更好地利用图的全局和局部信息。</p><h4 id="1-光谱与空间的统一"><a href="#1-光谱与空间的统一" class="headerlink" title="(1) 光谱与空间的统一"></a>(1) <strong>光谱与空间的统一</strong></h4><p>例如：</p><ul><li><p><strong>SIGN (Scalable Inception Graph Networks, Rossi et al., 2020)</strong>：</p><ul><li>预先计算光谱特性，将其作为额外特征输入空间域方法。</li></ul></li><li><p><strong>ARMA (Atwood et al., 2020)</strong>：</p><ul><li>在图的频谱域和空间域之间交替优化，达到更好的性能。</li></ul></li></ul><h4 id="2-高效的光谱方法"><a href="#2-高效的光谱方法" class="headerlink" title="(2) 高效的光谱方法"></a>(2) <strong>高效的光谱方法</strong></h4><p>例如本文提到的Chebyshev波动滤波器，通过多项式近似实现光谱特性的高效学习。</p><hr><h2 id="3-瑞利商的研究"><a href="#3-瑞利商的研究" class="headerlink" title="3. 瑞利商的研究"></a>3. 瑞利商的研究</h2><p>作者通过系统分析和设计，创新性地使用了<strong>瑞利商（Rayleigh Quotient）</strong>，以捕捉图的光谱特性，并结合其统计模式差异用于图级异常检测。以下是作者使用瑞利商的详细方法和步骤：</p><h3 id="1-理论基础：瑞利商与光谱能量分布"><a href="#1-理论基础：瑞利商与光谱能量分布" class="headerlink" title="1. 理论基础：瑞利商与光谱能量分布"></a>1. <strong>理论基础：瑞利商与光谱能量分布</strong></h3><p>作者将瑞利商用于描述图的累积光谱能量分布，并揭示了正常图和异常图的能量分布差异：</p><ul><li><p>瑞利商的定义为：</p><script type="math/tex; mode=display">RQ(x, L) = \frac{x^T L x}{x^T x},</script><p>其中：</p><ul><li><script type="math/tex">x</script> 是图信号（如节点属性或结构特征）；</li><li><script type="math/tex">L</script> 是图的拉普拉斯矩阵。</li></ul></li><li><p><strong>累积光谱能量</strong>：<br>作者通过理论分析证明，瑞利商值可以直接量化图信号在低频和高频分量上的分布：</p><ul><li>小的瑞利商值对应低频能量（信号平滑，图的全局模式）。</li><li>大的瑞利商值对应高频能量（局部变化或异常）。</li></ul></li></ul><h3 id="2-瑞利商在异常检测中的发现"><a href="#2-瑞利商在异常检测中的发现" class="headerlink" title="2. 瑞利商在异常检测中的发现"></a>2. <strong>瑞利商在异常检测中的发现</strong></h3><p>作者通过实验和理论发现：</p><ul><li>正常图的累积光谱能量分布倾向于低频，表现为较小的瑞利商值；</li><li>异常图的光谱能量更多分布在高频区域，导致瑞利商值较大。</li></ul><p>这一模式差异为异常检测提供了新的依据。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241124003004669.png" alt="image-20241124003004669"></p><hr><h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3 方法"></a>3 方法</h1><h2 id="3-1-Rayleigh-Quotient-and-Spectral-Analysis-详细介绍："><a href="#3-1-Rayleigh-Quotient-and-Spectral-Analysis-详细介绍：" class="headerlink" title="3.1 Rayleigh Quotient and Spectral Analysis 详细介绍："></a><strong>3.1 Rayleigh Quotient and Spectral Analysis</strong> 详细介绍：</h2><p><strong>核心内容</strong>：作者在这一节中通过理论分析，揭示了瑞利商在图谱分析中的作用，并探讨其与累积光谱能量分布的关系。这一部分为后续设计方法中的瑞利商学习组件（RQL）和光谱相关组件奠定了理论基础。</p><h3 id="1-瑞利商的定义与变化特性"><a href="#1-瑞利商的定义与变化特性" class="headerlink" title="1. 瑞利商的定义与变化特性"></a>1. <strong>瑞利商的定义与变化特性</strong></h3><h4 id="瑞利商公式："><a href="#瑞利商公式：" class="headerlink" title="瑞利商公式："></a><strong>瑞利商公式</strong>：</h4><script type="math/tex; mode=display">RQ(x, L) = \frac{x^T L x}{x^T x},</script><p>其中：</p><ul><li><script type="math/tex">L</script>：图的拉普拉斯矩阵；</li><li><script type="math/tex">x</script>：图信号向量。</li></ul><p>瑞利商用于衡量图信号在图结构上的光谱能量分布。</p><h4 id="变化特性分析："><a href="#变化特性分析：" class="headerlink" title="变化特性分析："></a><strong>变化特性分析</strong>：</h4><p>作者从理论上分析了瑞利商在拉普拉斯矩阵 <script type="math/tex">L</script> 或信号 <script type="math/tex">x</script> 存在小扰动时的变化范围：</p><ul><li><p><strong>定理1（拉普拉斯矩阵扰动）</strong>：<br>对于任意图 <script type="math/tex">G</script>，若拉普拉斯矩阵存在扰动 <script type="math/tex">\Delta</script>，瑞利商的变化范围满足：</p><script type="math/tex; mode=display">|\Delta RQ| \leq ||\Delta||_2,</script><p>其中 <script type="math/tex">||\Delta||_2</script> 是扰动矩阵的二范数。</p></li><li><p><strong>定理2（信号扰动）</strong>：<br>对于任意图 <script type="math/tex">G</script>，若图信号存在扰动 <script type="math/tex">\delta</script>，瑞利商的变化范围满足：</p><script type="math/tex; mode=display">|\Delta RQ| \leq 2x^T L \delta + o(\delta),</script><p>当 <script type="math/tex">\delta</script> 足够小时，忽略高阶项后有：</p><script type="math/tex; mode=display">|\Delta RQ| \leq 2x^T L \delta.</script></li></ul><p><strong>启示</strong>：如果两个图的 <script type="math/tex">L</script> 和 <script type="math/tex">x</script> 足够接近，那么它们的瑞利商值也非常接近，从而可以用于相似性度量和类别划分。</p><h3 id="2-瑞利商与光谱能量分布"><a href="#2-瑞利商与光谱能量分布" class="headerlink" title="2. 瑞利商与光谱能量分布"></a>2. <strong>瑞利商与光谱能量分布</strong></h3><h4 id="累积光谱能量表示："><a href="#累积光谱能量表示：" class="headerlink" title="累积光谱能量表示："></a><strong>累积光谱能量表示</strong>：</h4><ul><li><p>累积光谱能量从 <script type="math/tex">\lambda_1</script> 到 <script type="math/tex">\lambda_k</script> 定义为：</p><script type="math/tex; mode=display">\text{Spectral Energy} = \frac{\sum_{j=1}^k x_j^2}{\sum_{i=1}^n x_i^2},</script><p>其中：</p><ul><li><script type="math/tex">x_j</script> 是图信号在第 <script type="math/tex">j</script> 个特征值对应特征向量上的分量。</li></ul></li><li><p>作者指出，通过累积光谱能量，可以衡量信号的频率分布。</p></li></ul><h4 id="瑞利商的转换："><a href="#瑞利商的转换：" class="headerlink" title="瑞利商的转换："></a><strong>瑞利商的转换</strong>：</h4><ul><li>作者证明累积光谱能量可以通过瑞利商表示，从而避免高成本的矩阵分解操作：<script type="math/tex; mode=display">\int_{\lambda_k}^{\lambda_n} E(t) dt = RQ(x, L),</script>其中 <script type="math/tex">E(t)</script> 是光谱能量分布函数。</li></ul><p><strong>意义</strong>：瑞利商成为描述图光谱能量分布的一个高效替代方式。</p><h3 id="3-动机与指导"><a href="#3-动机与指导" class="headerlink" title="3. 动机与指导"></a>3. <strong>动机与指导</strong></h3><h4 id="瑞利商分布模式："><a href="#瑞利商分布模式：" class="headerlink" title="瑞利商分布模式："></a><strong>瑞利商分布模式</strong>：</h4><ul><li>正常图与异常图在瑞利商分布上的统计模式差异为异常检测提供了理论依据；</li><li>类别标签相同的图，其瑞利商值在不同样本中表现出一致性。</li></ul><h4 id="框架设计动机："><a href="#框架设计动机：" class="headerlink" title="框架设计动机："></a><strong>框架设计动机</strong>：</h4><ol><li><strong>显式瑞利商学习</strong>：设计一个模块直接学习图的瑞利商值（第3.2节的RQL）。</li><li><strong>光谱信息提取</strong>：结合光谱GNN捕捉累积光谱能量信息（第3.3节）。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第3.1节从理论层面明确了瑞利商的变化特性及其与光谱能量的关系，展示了瑞利商作为图光谱特性指标的有效性。这些分析为后续模块设计提供了理论支持，同时证明了瑞利商在图异常检测中的潜力。</p><hr><h2 id="3-2-Rayleigh-Quotient-Learning-Component-RQL"><a href="#3-2-Rayleigh-Quotient-Learning-Component-RQL" class="headerlink" title="3.2. Rayleigh Quotient Learning Component (RQL)"></a><strong>3.2. Rayleigh Quotient Learning Component (RQL)</strong></h2><p>作者详细介绍了如何通过设计一个专门的组件来显式学习图的瑞利商 (Rayleigh Quotient)，以捕捉其光谱特性。</p><h3 id="3-2-1-RQL-的设计目标"><a href="#3-2-1-RQL-的设计目标" class="headerlink" title="3.2.1. RQL 的设计目标"></a><strong>3.2.1. RQL 的设计目标</strong></h3><ul><li><strong>核心目标</strong>：直接从图数据中学习瑞利商特征，将其作为图的全局表示，用于后续的异常检测任务。</li><li><strong>动机</strong>：瑞利商在正常图和异常图之间存在显著分布差异，这种差异可以作为分类的重要依据。</li></ul><h3 id="3-2-2-RQL-的工作流程"><a href="#3-2-2-RQL-的工作流程" class="headerlink" title="3.2.2. RQL 的工作流程**"></a>3.2.2. RQL 的工作流程**</h3><p>RQL 模块通过以下步骤生成每个图的瑞利商表示：</p><ol><li><p><strong>输入</strong>：</p><ul><li>图信号 <script type="math/tex">G_i.X</script>，表示图 <script type="math/tex">G_i</script> 中节点的属性矩阵；</li><li>图的拉普拉斯矩阵 <script type="math/tex">L</script>。</li></ul></li><li><strong>处理步骤</strong>：<ul><li><strong>信号预处理</strong>：<br>使用多层感知机（MLP）对图信号进行变换：<script type="math/tex; mode=display">\tilde{X} = \text{MLP}(G_i.X),</script>生成的 <script type="math/tex">\tilde{X}</script> 是变换后的节点信号矩阵。</li><li><strong>瑞利商计算</strong>：<br>根据定义公式计算每个图的瑞利商：<script type="math/tex; mode=display">RQ = \text{diag}\left(\frac{\tilde{X}^T L \tilde{X}}{\tilde{X}^T \tilde{X}}\right),</script>其中 <script type="math/tex">\text{diag}</script> 表示提取对角元素。</li><li><strong>高层表示提取</strong>：<br>再次通过 MLP 将瑞利商映射为全局特征：<script type="math/tex; mode=display">h^{G}_{RQ} = \text{MLP}(RQ),</script>得到每个图的瑞利商特征表示。</li></ul></li><li><strong>输出</strong>：<ul><li><script type="math/tex">h^{G}_{RQ}</script>，即每个图的全局瑞利商表示。</li></ul></li></ol><h3 id="3-2-3-模块的优势"><a href="#3-2-3-模块的优势" class="headerlink" title="3.2.3. 模块的优势"></a><strong>3.2.3. 模块的优势</strong></h3><ul><li><strong>显式学习瑞利商</strong>：<br>直接量化图的光谱特性，避免复杂的光谱分解计算。</li><li><strong>紧密结合光谱能量分布</strong>：<br>瑞利商有效反映了图信号在高频和低频区域的能量分布，为分类提供有力特征。</li><li><strong>高效计算</strong>：<br>相比传统的图光谱方法，RQL 模块通过简单的矩阵操作和 MLP 映射实现高效计算。</li></ul><h3 id="3-2-4-RQL-在整体框架中的作用"><a href="#3-2-4-RQL-在整体框架中的作用" class="headerlink" title="3.2.4. RQL 在整体框架中的作用"></a><strong>3.2.4. RQL 在整体框架中的作用</strong></h3><ul><li>RQL 模块是 RQGNN 框架的第一部分，它的任务是生成图的显式瑞利商特征；</li><li>与后续隐式学习模块 (CWGNN with RQ-pooling) 结合，构成完整的异常检测框架。</li></ul><hr><h2 id="3-3-Chebyshev-Wavelet-GNN-with-RQ-Pooling"><a href="#3-3-Chebyshev-Wavelet-GNN-with-RQ-Pooling" class="headerlink" title="3.3 Chebyshev Wavelet GNN with RQ-Pooling"></a><strong>3.3 Chebyshev Wavelet GNN with RQ-Pooling</strong></h2><p><strong>核心内容</strong>：作者在这一节中提出了一个结合 <strong>Chebyshev波滤波器</strong> 和 <strong>RQ-Pooling（基于瑞利商的池化）</strong> 的模块，用于隐式学习图的光谱特性。这个模块能够捕获图的局部和全局信息，同时通过池化聚焦于图的关键区域。</p><h3 id="3-3-1-Chebyshev-Wavelet-GNN"><a href="#3-3-1-Chebyshev-Wavelet-GNN" class="headerlink" title="3.3.1. Chebyshev Wavelet GNN"></a><strong>3.3.1. Chebyshev Wavelet GNN</strong></h3><h4 id="1-背景：光谱卷积的挑战"><a href="#1-背景：光谱卷积的挑战" class="headerlink" title="(1) 背景：光谱卷积的挑战"></a><strong>(1) 背景：光谱卷积的挑战</strong></h4><p>传统的光谱卷积（基于拉普拉斯矩阵特征值和特征向量）计算代价昂贵，尤其对于大规模图。为此，作者采用了 <strong>Chebyshev多项式近似</strong>，高效地实现频谱域上的图卷积操作。</p><h4 id="2-Chebyshev多项式卷积公式"><a href="#2-Chebyshev多项式卷积公式" class="headerlink" title="(2) Chebyshev多项式卷积公式"></a><strong>(2) Chebyshev多项式卷积公式</strong></h4><p>给定图的归一化拉普拉斯矩阵 <script type="math/tex">\tilde{L}</script>，Chebyshev多项式定义为：</p><script type="math/tex; mode=display">T_k(\tilde{L}) = 2\tilde{L}T_{k-1}(\tilde{L}) - T_{k-2}(\tilde{L}),</script><p>其中：</p><ul><li><script type="math/tex">T_0(\tilde{L}) = I</script>；</li><li><script type="math/tex">T_1(\tilde{L}) = \tilde{L}</script>。</li></ul><p><strong>Chebyshev卷积</strong>通过多项式逼近拉普拉斯矩阵的特征值滤波器：</p><script type="math/tex; mode=display">g_\theta(L)x \approx \sum_{k=0}^K \theta_k T_k(\tilde{L})x,</script><p>其中：</p><ul><li><script type="math/tex">\theta_k</script> 是需要学习的权重；</li><li><script type="math/tex">T_k(\tilde{L})</script> 是 Chebyshev多项式。</li></ul><h4 id="3-实现"><a href="#3-实现" class="headerlink" title="(3) 实现"></a><strong>(3) 实现</strong></h4><p>代码中，Chebyshev多项式卷积作用于每个节点的特征，通过累积多项式阶次捕获不同频段的频谱信息。</p><h3 id="3-3-2-RQ-Pooling（基于瑞利商的池化）"><a href="#3-3-2-RQ-Pooling（基于瑞利商的池化）" class="headerlink" title="3.3.2. RQ-Pooling（基于瑞利商的池化）"></a><strong>3.3.2. RQ-Pooling（基于瑞利商的池化）</strong></h3><h4 id="1-背景：池化在图中的作用"><a href="#1-背景：池化在图中的作用" class="headerlink" title="(1) 背景：池化在图中的作用"></a><strong>(1) 背景：池化在图中的作用</strong></h4><p>池化操作是图级任务的重要步骤，能够在保留图全局特性的同时减少计算量。作者结合瑞利商的特性，引入 RQ-Pooling，用于选择对全局光谱特性贡献最大的节点区域。</p><h4 id="2-瑞利商的注意力机制"><a href="#2-瑞利商的注意力机制" class="headerlink" title="(2) 瑞利商的注意力机制"></a><strong>(2) 瑞利商的注意力机制</strong></h4><p>通过瑞利商 <script type="math/tex">RQ(x, L)</script> 计算每个节点的重要性分数：</p><script type="math/tex; mode=display">\alpha_j = \text{softmax}(RQ_j),</script><p>其中：</p><ul><li><script type="math/tex">RQ_j</script> 是节点 <script type="math/tex">j</script> 对应的瑞利商值；</li><li><script type="math/tex">\alpha_j</script> 表示节点的重要性权重。</li></ul><h4 id="3-聚合节点特征"><a href="#3-聚合节点特征" class="headerlink" title="(3) 聚合节点特征"></a><strong>(3) 聚合节点特征</strong></h4><p>使用瑞利商权重聚合节点特征：</p><script type="math/tex; mode=display">h^{G}_{\text{Att}} = \sum_{j \in V} \alpha_j h_j,</script><p>其中：</p><ul><li><script type="math/tex">h_j</script> 是节点 <script type="math/tex">j</script> 的隐式特征。</li></ul><h4 id="4-输出"><a href="#4-输出" class="headerlink" title="(4) 输出"></a><strong>(4) 输出</strong></h4><p>池化后生成图的全局特征表示 <script type="math/tex">h^{G}_{\text{Att}}</script>。</p><h3 id="3-3-3-综合模块设计"><a href="#3-3-3-综合模块设计" class="headerlink" title="3.3.3. 综合模块设计"></a><strong>3.3.3. 综合模块设计</strong></h3><p>作者将 Chebyshev Wavelet 和 RQ-Pooling 结合，实现隐式学习和池化的高效框架。</p><ol><li><h4 id="节点特征生成"><a href="#节点特征生成" class="headerlink" title="节点特征生成"></a><strong>节点特征生成</strong></h4><p>通过 Chebyshev多项式卷积生成节点特征：</p><script type="math/tex; mode=display">h_j = \text{CONCAT}(f_1(L)X_j, f_2(L)X_j, \ldots, f_q(L)X_j),</script><p>其中 <script type="math/tex">f_k(L)</script> 是第 <script type="math/tex">k</script> 阶 Chebyshev滤波器。</p></li><li><h4 id="基于瑞利商的池化"><a href="#基于瑞利商的池化" class="headerlink" title="基于瑞利商的池化"></a><strong>基于瑞利商的池化</strong></h4><p>通过 RQ-Pooling 提取重要节点的特征并聚合成全局表示。</p></li><li><h4 id="图的最终特征"><a href="#图的最终特征" class="headerlink" title="图的最终特征"></a><strong>图的最终特征</strong></h4><p>将显式瑞利商特征和隐式光谱特征拼接：</p><script type="math/tex; mode=display">h^{G} = \text{MLP}(\text{CONCAT}(h^{G}_{\text{Att}}, h^{G}_{RQ})).</script></li></ol><h3 id="3-3-4-本节的关键创新"><a href="#3-3-4-本节的关键创新" class="headerlink" title="3.3.4. 本节的关键创新"></a><strong>3.3.4. 本节的关键创新</strong></h3><ol><li><h4 id="高效光谱卷积："><a href="#高效光谱卷积：" class="headerlink" title="高效光谱卷积："></a><strong>高效光谱卷积</strong>：</h4><ul><li>使用 Chebyshev多项式近似，降低了传统光谱卷积的计算复杂度；</li><li>捕获了图信号的多频段信息。</li></ul></li><li><h4 id="基于瑞利商的池化："><a href="#基于瑞利商的池化：" class="headerlink" title="基于瑞利商的池化："></a><strong>基于瑞利商的池化</strong>：</h4><ul><li>将瑞利商值引入注意力机制，为池化操作提供物理意义明确的权重；</li><li>强调高频和低频特性对全局图表示的不同贡献。</li></ul></li><li><h4 id="隐式与显式结合："><a href="#隐式与显式结合：" class="headerlink" title="隐式与显式结合："></a><strong>隐式与显式结合</strong>：</h4><ul><li>隐式特征通过卷积提取，显式特征通过瑞利商直接计算，形成互补。</li></ul></li></ol><hr><h2 id="3-4-Class-Balanced-Focal-Loss-CB-Loss"><a href="#3-4-Class-Balanced-Focal-Loss-CB-Loss" class="headerlink" title="3.4 Class-Balanced Focal Loss (CB Loss)"></a>3.4 Class-Balanced Focal Loss (CB Loss)</h2><p>文献的第3.4部分提出了一种改进的损失函数——<strong>Class-Balanced Focal Loss (CB Loss)</strong>，主要用于解决类别不平衡问题，特别是在异常检测任务中，正负样本比例差异可能导致模型偏向多数类别。</p><h3 id="3-4-1-动机"><a href="#3-4-1-动机" class="headerlink" title="3.4.1. 动机"></a><strong>3.4.1. 动机</strong></h3><p>在异常检测任务中：</p><ul><li>正常图（多数类）占据绝大多数，而异常图（少数类）数量有限。</li><li>常规交叉熵损失容易被多数类主导，导致模型无法有效学习少数类的特征。</li><li>作者引入<strong>类别平衡</strong>和<strong>焦点调整</strong>的策略，解决上述问题。</li></ul><h3 id="3-4-2-CB-Loss-设计原理"><a href="#3-4-2-CB-Loss-设计原理" class="headerlink" title="3.4.2. CB Loss 设计原理"></a><strong>3.4.2. CB Loss 设计原理</strong></h3><h4 id="1-类别平衡因子"><a href="#1-类别平衡因子" class="headerlink" title="(1) 类别平衡因子"></a><strong>(1) 类别平衡因子</strong></h4><p>通过类别样本数量计算<strong>有效样本数量</strong>（Effective Number of Samples）：</p><script type="math/tex; mode=display">\text{Effective Number} = 1 - \beta^{n},</script><p>其中：</p><ul><li><script type="math/tex">n</script> 是类别的样本数量；</li><li><script type="math/tex">\beta</script> 是控制因子，<script type="math/tex">\beta \in [0, 1)</script>。</li></ul><p>类别权重：</p><script type="math/tex; mode=display">\text{Class Weight} = \frac{1 - \beta}{1 - \beta^{n}}.</script><h4 id="2-焦点调整因子"><a href="#2-焦点调整因子" class="headerlink" title="(2) 焦点调整因子"></a><strong>(2) 焦点调整因子</strong></h4><p>焦点调整因子通过调节简单样本和困难样本的损失权重：</p><script type="math/tex; mode=display">\text{Focal Modulation} = (1 - p_t)^\gamma,</script><p>其中：</p><ul><li><script type="math/tex">p_t</script> 是预测概率；</li><li><script type="math/tex">\gamma</script> 是调节因子，控制困难样本的权重。</li></ul><h4 id="3-最终损失函数"><a href="#3-最终损失函数" class="headerlink" title="(3) 最终损失函数"></a><strong>(3) 最终损失函数</strong></h4><p>CB Loss 的形式：</p><script type="math/tex; mode=display">\mathcal{L}_{CB} = -\sum_{i=1}^{N} \text{Class Weight}_i \cdot (1 - p_{t_i})^\gamma \cdot \log(p_{t_i}),</script><p>其中：</p><ul><li><script type="math/tex">N</script> 是样本总数；</li><li><script type="math/tex">p_{t_i}</script> 是第 <script type="math/tex">i</script> 个样本的预测概率。</li></ul><h3 id="3-4-3-优势分析"><a href="#3-4-3-优势分析" class="headerlink" title="3.4.3. 优势分析"></a><strong>3.4.3. 优势分析</strong></h3><ol><li><strong>类别平衡</strong>：CB Loss 根据类别样本数量动态调整权重，显著降低了多数类的主导作用。</li><li><strong>焦点调整</strong>：对错误预测的困难样本给予更大权重，提升了少数类样本的学习能力。</li><li><strong>鲁棒性</strong>：在类别分布高度不平衡的情况下，CB Loss 能够提高模型对少数类的泛化能力。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective High-order Graph Representation Learning for Credit Card Fraud Detection</title>
      <link href="/2024/11/13/HOGRL/"/>
      <url>/2024/11/13/HOGRL/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://www.ijcai.org/proceedings/2024/0839.pdf">Effective High-order Graph Representation Learning for Credit Card Fraud Detection</a></p><p>代码仓库：<a href="https://github.com/AI4Risk/antifraud">AI4Risk/antifraud: A repository for financial fraud detection</a></p><h1 id="背景，动机，创新"><a href="#背景，动机，创新" class="headerlink" title="背景，动机，创新"></a>背景，动机，创新</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>随着数字支付的普及，信用卡欺诈已成为全球金融系统中的重大问题，带来巨大的经济损失，并影响个人和企业的财务安全。报告预测未来十年全球信用卡欺诈损失将达数千亿美元，因此有效的欺诈检测技术对于维持金融系统的健康至关重要。</p><h2 id="2-动机"><a href="#2-动机" class="headerlink" title="2 动机"></a>2 动机</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241112232509078.png" alt="image-20241112232509078"></p><p>现有的欺诈检测方法，包括基于规则和传统的机器学习方法，难以识别复杂的欺诈行为，特别是那些伪装性强的间接交易。在这种情况下，欺诈者会通过多个正常用户和合法交易掩盖其身份，绕过检测系统，使得欺诈交易看起来像普通的多跳间接交易。虽然近年来图神经网络（GNN）因其在捕捉节点间关系方面的优势而被应用于欺诈检测，但现有的GNN方法在识别这种伪装交易时效果有限。主要原因在于：</p><ol><li><p><strong>伪装欺诈的复杂性</strong>：欺诈者往往利用多跳间接交易来隐藏自己，使得直接邻居大多为正常节点，违反了GNN中的同质性假设（即相似节点更可能相连）。因此，欺诈者在网络中的特征变得不明显，导致模型难以分辨正常和欺诈节点。</p></li><li><p><strong>过度平滑问题</strong>：当GNN层数增加时，节点的特征可能会过于平滑，导致节点表示变得模糊，无法有效区分不同类别的节点。在伪装欺诈的检测中，为了捕捉多跳间接关系，模型往往需要较深的层次，但这会进一步加剧过度平滑的问题，使得高阶信息与低阶噪声混合，导致检测效果不佳。</p></li></ol><h2 id="3-创新点"><a href="#3-创新点" class="headerlink" title="3 创新点"></a>3 创新点</h2><ol><li><p><strong>高阶交易图的构建与“纯表示”学习</strong>：</p><ul><li>传统的图神经网络方法在引入高阶信息时，会将高阶信息与低阶信息混合传播到中心节点。这种方式虽然能够捕捉多跳关系，但容易引入低阶噪声，影响检测效果。</li><li>本文提出了通过解耦不同阶层的邻居节点构建高阶交易图的方法。该方法确保每一阶的信息在传播时不会被低阶噪声污染，从而实现了“纯表示”的学习。通过这种方式，模型能够更有效地识别出欺诈者利用多跳间接交易隐藏身份的行为。</li></ul></li><li><p><strong>专家混合注意力机制</strong>：</p><ul><li>本文引入了一种专家混合注意力机制，用于自动确定不同阶层的信息在最终节点表示中的重要性。具体而言，模型将每一层的图神经网络视为一个独立的“专家网络”，通过门控网络分配不同阶层的权重。</li><li>这种注意力机制能够自适应地选择最具信息量的阶层特征，提高模型的整体检测效果。相比于传统的静态加权方法，这种动态权重分配方式使得模型在应对复杂的伪装欺诈行为时更加灵活和有效。</li></ul></li><li><p><strong>嵌入融合以保留多跳依赖关系</strong>：</p><ul><li>尽管高阶交易图能够传递纯净的高阶信息，但它可能会丢失原始图中的多跳依赖关系。为了保留这些依赖关系，HOGRL将原始图的嵌入与高阶图的嵌入融合在一起，以形成最终的节点表示。</li><li>这种融合策略不仅保留了多跳依赖关系，还增强了模型的表达能力，使其在捕捉欺诈者伪装行为的同时，保留了网络结构中的重要信息。</li></ul></li><li><p><strong>实验验证的显著提升</strong>：</p><ul><li>HOGRL在多个数据集上的广泛实验表明，本文方法在欺诈检测性能上优于现有的基线方法，尤其是在真实的信用卡欺诈数据集和公开的欺诈检测数据集（如YelpChi和Amazon）上展示出显著的优势。</li><li>模型在各种性能指标（如AUC、F1分数、GMean）上均实现了显著提升，证明了本文方法在解决伪装多跳间接交易中的有效性。</li></ul></li><li><p><strong>模型的鲁棒性与可解释性分析</strong>：</p><ul><li>作者还通过参数敏感性和可解释性分析进一步验证了HOGRL的有效性。通过调整参数和可视化分析，证明了HOGRL在不同层数和参数配置下的稳定性，以及其在区分欺诈和正常节点方面的优势。</li><li>可解释性分析表明，高阶图能够有效增强欺诈节点的同质性，减少聚合过程中噪声的影响，使得HOGRL的检测结果更具可解释性和可靠性。</li></ul></li></ol><hr><h1 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h1><p>模型主要分为四个部分：交易图的构建、基于多层高阶图和原始图的节点嵌入生成、以及检测网络。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241112234636718.png" alt="image-20241112234636718"></p><h2 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1 预备知识"></a>1 预备知识</h2><p><strong>节点同质性（Node Homophily）</strong>：节点(v)的同质性表示为其邻居中与它具有相同标签的比例，公式如下：</p><script type="math/tex; mode=display">H(v) = \frac{| \{ y_u = y_v, u \in N_v \} |}{| N_v |}</script><p>其中<script type="math/tex">y_u</script>和<script type="math/tex">y_v</script>分别表示节点<script type="math/tex">u</script>和节点<script type="math/tex">v</script>的标签，<script type="math/tex">N_v</script>是节点<script type="math/tex">v</script>的邻居集合。这一指标在欺诈检测中尤为重要，因为欺诈节点的直接邻居可能是正常节点，从而导致低同质性。</p><p><strong>信用卡交易图的定义</strong>：在信用卡欺诈检测中，将信用卡交易定义为图<script type="math/tex">G = (V, E)</script>，其中<script type="math/tex">V = \{v_1, v_2, \dots, v_n\}</script>表示一组交易（即节点），<script type="math/tex">E \subset V \times V</script>表示交易之间的边连接。<script type="math/tex">X \in \mathbb{R}^{n \times d}</script>为特征矩阵，其中每行<script type="math/tex">x_i \in \mathbb{R}^d</script>表示节点<script type="math/tex">v_i</script>的特征向量，<script type="math/tex">d</script>为特征维度。定义<script type="math/tex">Y = \{y_1, \dots, y_n\}</script>为欺诈标签集合，其中<script type="math/tex">y_i \in \{0, 1\}</script>（0代表正常，1代表欺诈）。<script type="math/tex">G</script>的拓扑信息用邻接矩阵<script type="math/tex">A \in \mathbb{R}^{n \times n}</script>描述，其中<script type="math/tex">A_{u, v} = 1</script>表示节点<script type="math/tex">u</script>和节点<script type="math/tex">v</script>之间存在边。</p><h2 id="2-高阶图的生成"><a href="#2-高阶图的生成" class="headerlink" title="2 高阶图的生成"></a>2 高阶图的生成</h2><p>GNN的基本假设是，通过特征传播和聚合利用邻居信息可以提高中心节点的预测性能。然而在伪装场景中，欺诈节点的低阶邻居通常为多个正常节点，这与GNN的假设相悖。这意味着需要引入更高阶的欺诈信息来识别伪装的欺诈者。</p><p>但是现有的高阶GNN大多依赖于混合阶传播，在引入高阶信息的同时，各阶的信息被混合并传播到中心节点，这可能会使高阶信息被低阶噪声污染。为了解决这一问题，提出了将不同阶的邻居节点解耦以构建高阶交易图的方法。</p><p>高阶交易图的<script type="math/tex">l</script>阶邻接矩阵<script type="math/tex">S^l</script>定义如下：</p><script type="math/tex; mode=display">S^l = A^l - A^{l-1} + I</script><p>其中<script type="math/tex">A^0 = I</script>为单位矩阵。公式中的<script type="math/tex">S^l</script>表示第<script type="math/tex">l</script>阶高阶图的邻接矩阵，它包含了从中心节点出发正好能够通过<script type="math/tex">l</script>跳到达的节点，从而避免了低阶邻居的干扰。</p><p>节点<script type="math/tex">v</script>在第<script type="math/tex">l</script>阶邻接矩阵<script type="math/tex">S^l</script>下的邻居集合表示为：</p><script type="math/tex; mode=display">N_v(S^l) = (N^l_v \setminus (N^l_v \cap N^{l-1}_v)) \cup \{v\}</script><p>这一集合表示节点<script type="math/tex">v</script>的纯高阶邻居集合，确保了在第<script type="math/tex">l</script>阶传播中只包含通过<script type="math/tex">l</script>跳访问的节点，从而保持了高阶信息的纯净性。</p><h2 id="3-图表示学习"><a href="#3-图表示学习" class="headerlink" title="3 图表示学习"></a>3 图表示学习</h2><p>对于第<script type="math/tex">l</script>阶高阶交易图，聚合过程表示为：</p><script type="math/tex; mode=display">h'_l = \text{ReLU}(S^l \cdot X \cdot W'_l)</script><p>其中<script type="math/tex">W'_l</script>为第<script type="math/tex">l</script>阶高阶交易图的参数矩阵。由于每层高阶图对最终节点嵌入的贡献有所不同，通过引入了专家混合注意力机制，以自动确定不同层高阶图的重要性。</p><p>具体来说，将图神经网络的每一层（上面的公式）视为一个独立的专家网络，门控网络用于分配每个专家网络输出的权重。第<script type="math/tex">l</script>阶高阶图的权重表示为：</p><script type="math/tex; mode=display">f_l(h'_l) = w^T_l \cdot h'_l + b_l</script><script type="math/tex; mode=display">\alpha_l = \frac{\exp(f_l(h'_l))}{\sum_{k=1}^{L} \exp(f_k(h'_k))}</script><p>其中<script type="math/tex">w_l</script>为第<script type="math/tex">l</script>个专家网络的权重向量，<script type="math/tex">b_l</script>为偏置项。这个机制类似于传统的注意力机制，其目标是动态调整每个专家网络输出对最终输出的影响。基于多层高阶图生成的嵌入为：</p><script type="math/tex; mode=display">h' = \sum_{l=1}^{L} \alpha_l h'_l</script><p>这种混合专家注意力机制使模型能够自适应地选择更有信息量的阶层特征，从而提高模型的整体性能。</p><p>在原始图的嵌入生成过程中，在GNN中采用均值操作作为聚合器，其公式为：</p><script type="math/tex; mode=display">h^l_v = \text{ReLU}(W^l \cdot (h^{l-1}_v \oplus h_{N_v}^l))</script><script type="math/tex; mode=display">h_{N_v}^l = \text{MEAN}(\{h^{l-1}_u, \forall u \in N_v\})</script><p>其中，<script type="math/tex">h^0_v = x_v</script>，<script type="math/tex">W^l</script>是第<script type="math/tex">l</script>层的参数矩阵，<script type="math/tex">\oplus</script>表示连接操作。将学习到的<script type="math/tex">h^L_v</script>（简记为<script type="math/tex">h_v</script>）与<script type="math/tex">h'_v</script>相加，形成最终表示：</p><script type="math/tex; mode=display">z_v = h_v + \gamma h'_v</script><p>其中，<script type="math/tex">\gamma</script>是一个超参数，用于控制基于多层高阶图生成的嵌入的权重。这样既保留了高阶信息的纯净性，又能够保持原始图中的多跳依赖关系。</p><p>进一步扩展到多关系图（例如包含多种交易类型的图）时，将每种关系的图进行独立传播，并将生成的嵌入连接起来，公式如下：</p><script type="math/tex; mode=display">z_v = (z^{(1)}_v \oplus z^{(2)}_v \oplus \dots \oplus z^{(R)}_v)</script><p>这里的<script type="math/tex">z^{(r)}_v</script>表示针对关系类型<script type="math/tex">r</script>生成的嵌入，<script type="math/tex">\oplus</script>表示连接操作，这样可以综合多种关系的特征，形成更丰富的节点表示。</p><h2 id="4-检测网络和优化"><a href="#4-检测网络和优化" class="headerlink" title="4 检测网络和优化"></a>4 检测网络和优化</h2><p>在最终的节点嵌入向量<script type="math/tex">z_v</script>生成后，HOGRL模型使用一个多层感知机（MLP）作为检测网络，来预测每个节点是否为欺诈交易。MLP的输出是节点<script type="math/tex">v</script>的欺诈概率，定义如下：</p><script type="math/tex; mode=display">p_v = \text{MLP}(z_v)</script><p>为了优化这一节点分类任务，HOGRL采用了交叉熵损失函数来衡量模型的预测结果与实际标签之间的误差。交叉熵损失函数的公式为：</p><script type="math/tex; mode=display">L_{\text{gnn}} = - \sum_{v \in V} \left[y_v \log p_v + (1 - y_v) \log (1 - p_v)\right]</script><p>其中，<script type="math/tex">y_v \in \{0, 1\}</script>表示节点<script type="math/tex">v</script>的真实标签（0表示正常交易，1表示欺诈交易），<script type="math/tex">p_v</script>是模型预测的欺诈概率。</p><p>在参数优化方面，HOGRL使用了Adam优化器，它是一种基于梯度的优化算法。Adam优化器在处理稀疏梯度和适应性学习率方面有较好的效果，能够帮助模型更快地收敛。具体设置如下：</p><ul><li>初始学习率设为 <script type="math/tex">5 \times 10^{-3}</script></li><li>权重衰减系数设为 <script type="math/tex">5 \times 10^{-5}</script></li></ul><p>通过Adam优化器，模型能够在训练过程中逐渐减少损失函数值，从而提高预测准确性。</p><h2 id="5-复杂度分析"><a href="#5-复杂度分析" class="headerlink" title="5 复杂度分析"></a>5 复杂度分析</h2><p>相比于传统的图卷积网络（GCN），HOGRL的额外计算开销主要来源于基于高阶交易图生成节点的中间表示。具体来说，对于第<script type="math/tex">l</script>阶的高阶交易图，在生成嵌入时需要进行矩阵运算：</p><script type="math/tex; mode=display">S^l \cdot X</script><p>其中，<script type="math/tex">S^l</script>是第<script type="math/tex">l</script>阶高阶图的邻接矩阵，<script type="math/tex">X</script>是节点特征矩阵。为了避免直接计算<script type="math/tex">A^l</script>（第<script type="math/tex">l</script>阶邻接矩阵的幂次运算），通过右乘的方式逐步计算<script type="math/tex">S^l \cdot X</script>，公式如下：</p><script type="math/tex; mode=display">S^l \cdot X = (A^l - A^{l-1} + I) \cdot X = A^l X - A^{l-1} X + X</script><p>具体的计算步骤可以写成逐步计算的形式：</p><script type="math/tex; mode=display">A^l X = A(A(\dots (A \cdot X)))</script><p>其中<script type="math/tex">A</script>是邻接矩阵的初始形式。通过这种方法可以有效降低计算复杂度。</p><p>在实际应用中，如果将<script type="math/tex">A</script>存储为具有 <script type="math/tex">m</script> 个非零条目的稀疏矩阵，那么生成第 <script type="math/tex">l</script> 阶高阶图的嵌入所需的计算时间复杂度为 <script type="math/tex">O(l \times m \times d)</script>，其中 <script type="math/tex">d</script> 是节点特征的维度。假设 <script type="math/tex">l</script> 和 <script type="math/tex">d</script> 都比 <script type="math/tex">m</script> 小得多，则总的时间复杂度为 <script type="math/tex">O(Lm)</script>，与传统的GCN的计算复杂度相当。因此HOGRL模型的复杂度在处理高阶图信息时得到了优化，使其在实际应用中更为高效。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GADRA-Graph Anomaly Detection via Neighborhood Reconstruction</title>
      <link href="/2024/11/07/GADRA/"/>
      <url>/2024/11/07/GADRA/</url>
      
        <content type="html"><![CDATA[<h1 id="GAD-NR-Graph-Anomaly-Detection-via-Neighborhood-Reconstruction"><a href="#GAD-NR-Graph-Anomaly-Detection-via-Neighborhood-Reconstruction" class="headerlink" title="GAD-NR: Graph Anomaly Detection via Neighborhood Reconstruction"></a>GAD-NR: Graph Anomaly Detection via Neighborhood Reconstruction</h1><p>论文地址：<a href="https://arxiv.org/pdf/2306.01951">GAD-NR: Graph Anomaly Detection via Neighborhood Reconstruction</a></p><p>代码仓库：<a href="https://github.com/Graph-COM/GAD-NR">Graph-COM/GAD-NR: [WSDM 2024] GAD-NR : Graph Anomaly Detection via Neighborhood Reconstruction</a></p><p>关键词：Anomaly Detection, Graph Neural Network, Auto-Encoder</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><h2 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h2><p>现有的图自编码器（GAE）方法通过将图数据编码为节点表示，然后评估图的重建质量来检测异常。然而，现有的GAE模型主要优化的是<strong>直接连接</strong>的重建，导致在处理复杂结构的异常时效果较差，尤其是那些不符合簇型结构的异常节点。</p><p>为了解决这个问题，本文提出了一种新的方法——<strong>GAD-NR</strong>，即基于<strong>邻域重建</strong>的图异常检测方法。GAD-NR不仅重建节点之间的连接，还通过邻域重建来评估节点的异常性，考虑节点的局部结构、节点自身的属性以及邻域内其他节点的属性。通过计算节点邻域的重建误差，GAD-NR能够有效地区分正常节点和异常节点。</p><p>异常检测被分为以下<strong>三种主要类型</strong>：</p><h3 id="1-上下文异常（Contextual-Anomalies）"><a href="#1-上下文异常（Contextual-Anomalies）" class="headerlink" title="1. 上下文异常（Contextual Anomalies）"></a>1. <strong>上下文异常（Contextual Anomalies）</strong></h3><ul><li><strong>定义</strong>：上下文异常指的是那些在属性上与其周围邻居有显著差异的节点，即它们的属性特征与大多数相邻节点不同。</li><li><strong>示例</strong>：在社交网络中，某个用户的属性（例如年龄或兴趣）与其好友的属性有显著差异，可能代表异常行为，如虚假账户或恶意用户。</li></ul><h3 id="2-结构异常（Structural-Anomalies）"><a href="#2-结构异常（Structural-Anomalies）" class="headerlink" title="2. 结构异常（Structural Anomalies）"></a>2. <strong>结构异常（Structural Anomalies）</strong></h3><ul><li><strong>定义</strong>：结构异常指的是连接模式上异常的节点，即它们的连接结构与其他节点显著不同。</li><li><strong>示例</strong>：在电子商务平台上，某些卖家之间通过异常密集的连接互相支持可能是虚假评论网络的一部分。</li></ul><h3 id="3-联合类型异常（Combination-Joint-Anomalies）"><a href="#3-联合类型异常（Combination-Joint-Anomalies）" class="headerlink" title="3. 联合类型异常（Combination/Joint Anomalies）"></a>3. <strong>联合类型异常（Combination/Joint Anomalies）</strong></h3><ul><li><strong>定义</strong>：联合类型异常同时在属性和结构上都显著偏离常规模式。这类异常需要同时考虑节点的属性特征和连接模式，才可以有效识别。</li><li><strong>示例</strong>：在电子邮件网络中，一个节点可能表现出异常的属性特征（如不常用的语言），同时还与多个社区中大量用户有不正常的连接，这可能代表钓鱼邮件的发送者。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241106175403240.png" alt="image-20241106175403240" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241106175521161.png" alt="image-20241106175521161" style="zoom: 43%;" /></h3><p>这三种异常类型分别从节点属性、连接结构以及两者的联合特征出发，为异常检测任务提供了不同的视角。GAD-NR模型通过邻域重建机制，尝试综合捕捉这三类异常，从而提升异常检测的全面性和准确性。</p><h2 id="1-2-创新点"><a href="#1-2-创新点" class="headerlink" title="1.2 创新点"></a>1.2 创新点</h2><h3 id="1-2-1-引入邻域重建机制"><a href="#1-2-1-引入邻域重建机制" class="headerlink" title="1.2.1. 引入邻域重建机制"></a>1.2.1. <strong>引入邻域重建机制</strong></h3><ul><li>传统的图自编码器（GAE）模型通常通过直接重建节点的连接结构来检测异常，而忽略了邻域的整体信息。这种方法在处理复杂的非簇型结构异常时存在局限性。</li><li>GAD-NR 提出了<strong>邻域重建</strong>机制，不仅重建节点的直接连接，还通过建模邻域特征分布，捕捉邻域的更全面的信息。这种方法使得模型在处理多样化的异常结构时表现更好，尤其是能够检测到复杂的联合类型异常。</li></ul><h3 id="1-2-2-高斯分布近似邻域特征"><a href="#1-2-2-高斯分布近似邻域特征" class="headerlink" title="1.2.2. 高斯分布近似邻域特征"></a>1.2.2. <strong>高斯分布近似邻域特征</strong></h3><ul><li>在邻域重建中，GAD-NR创新性地使用了<strong>高斯分布</strong>来近似节点的邻域特征分布，而不是直接对邻域特征进行解码。这种分布式建模方法不仅能够有效表达邻域特征的统计属性，还显著降低了计算复杂度，从而提高了模型的效率。</li><li>通过估计邻域特征的均值和协方差矩阵，GAD-NR能够在保留邻域特征信息的同时，大大减少对高维邻域特征直接重建的复杂性，提升了计算效率和鲁棒性。</li></ul><h3 id="1-2-3-重构损失的多维度综合设计"><a href="#1-2-3-重构损失的多维度综合设计" class="headerlink" title="1.2.3. 重构损失的多维度综合设计"></a>1.2.3. <strong>重构损失的多维度综合设计</strong></h3><ul><li>GAD-NR 在设计重建损失时，综合了自属性重建、度重建和邻域分布重建三种损失，并通过加权方式组合。这种多维度的重建损失能够捕捉到不同类型的异常特征，包括：<ul><li><strong>上下文异常</strong>：主要通过节点自属性重建损失捕捉。</li><li><strong>结构异常</strong>：通过度重建损失来识别结构异常。</li><li><strong>联合类型异常</strong>：通过邻域分布重建损失有效检测。</li></ul></li><li>这种设计增强了模型的灵活性，使得它能够适应各种类型的图异常检测需求。</li></ul><h3 id="1-2-4-重参数化技术与KL散度优化邻域分布重建"><a href="#1-2-4-重参数化技术与KL散度优化邻域分布重建" class="headerlink" title="1.2.4. 重参数化技术与KL散度优化邻域分布重建"></a>1.2.4. <strong>重参数化技术与KL散度优化邻域分布重建</strong></h3><ul><li>在邻域特征分布的重建中，GAD-NR通过重参数化技巧生成邻域特征样本，并使用KL散度作为损失函数，比较实际邻域分布和重建分布的差异。这种创新方法不仅提升了分布重建的稳定性，还在优化过程中增强了对异常特征的捕捉能力。</li><li>通过KL散度优化邻域分布，使得模型能够在较大范围内对比真实分布和重建分布的差异，从而有效识别出分布异常。</li></ul><hr><h1 id="3-问题定义和表述"><a href="#3-问题定义和表述" class="headerlink" title="3. 问题定义和表述"></a>3. 问题定义和表述</h1><h3 id="3-1-符号定义"><a href="#3-1-符号定义" class="headerlink" title="3.1. 符号定义"></a>3.1. 符号定义</h3><p>文中定义了一个带有节点属性的静态图 <script type="math/tex">G = (V, E, X)</script>，其中：</p><ul><li><strong><script type="math/tex">V</script></strong> 表示节点集合，包含 <script type="math/tex">N</script> 个节点。</li><li><strong><script type="math/tex">E</script></strong> 表示边集合，描述节点之间的连接关系。</li><li><strong><script type="math/tex">X</script></strong> 是节点属性矩阵，<script type="math/tex">x_u</script> 表示节点 <script type="math/tex">u</script> 的属性向量。</li></ul><p>其他符号包括：</p><ul><li><strong><script type="math/tex">d_u</script></strong>：表示节点 <script type="math/tex">u</script> 的度，即与其相连的边数。</li><li><strong><script type="math/tex">y_u</script></strong>：节点 <script type="math/tex">u</script> 的标签，0 表示正常节点，1 表示异常节点，但在实际检测中假设异常标签是未知的。</li></ul><h3 id="3-2-邻域定义"><a href="#3-2-邻域定义" class="headerlink" title="3.2. 邻域定义"></a>3.2. 邻域定义</h3><p>为捕捉节点的局部信息，定义了<strong>一阶邻域</strong>和<strong>增强的一阶邻域集合</strong>：</p><ul><li><strong>一阶邻域 <script type="math/tex">N_u</script></strong>：指节点 <script type="math/tex">u</script> 的直接相邻节点集合，即与节点 <script type="math/tex">u</script> 相连的节点。</li><li><strong>增强一阶邻域集合 <script type="math/tex">\overline{N}_u</script></strong>：包括节点 <script type="math/tex">u</script> 自身的属性以及其邻域节点的<strong>属性集合</strong>，用公式表示为：<script type="math/tex; mode=display">\overline{N}_u = (x_u, \{x_v | v \in N_u\})</script></li></ul><p>这种定义扩展了传统邻域的范围，使得节点的邻域信息能够包括自身属性和周围节点的属性。</p><h3 id="3-3-问题表述"><a href="#3-3-问题表述" class="headerlink" title="3.3. 问题表述"></a>3.3. 问题表述</h3><p>图异常检测的核心任务是识别图中的异常节点。具体目标是设计一个检测模型 <script type="math/tex">f(G)</script>，对图中的每个节点分配一个异常分数，用于判断该节点是否异常。文中假设<strong>正常节点和异常节点的增强邻域集合在统计分布上存在差异</strong>，这种差异可以通过邻域特征分布重建的损失来捕捉，从而实现异常检测。</p><h1 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h1><p>整体结构图</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241106180621460.png" alt="image-20241106180621460" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241106180639126.png" alt="image-20241106180639126" style="zoom: 60%;" /></p><p>第四部分详细描述了 <strong>GAD-NR</strong> 模型的设计和实现，包括编码器和解码器的架构与算法。以下是各部分的细化讲解及其公式：</p><h3 id="4-1-动机"><a href="#4-1-动机" class="headerlink" title="4.1 动机"></a>4.1 动机</h3><p>GAD-NR 模型的动机是基于图自编码器（GAE）的局限性。传统GAE通过节点直接连接重建图结构，无法捕捉邻域的全局信息，因而对检测联合类型异常的能力较弱。GAD-NR引入了邻域重建，采用高斯分布来建模节点邻域特征，从而更好地捕捉图结构和属性之间的复杂关系。</p><h3 id="4-2-通过邻域重建的-GAE"><a href="#4-2-通过邻域重建的-GAE" class="headerlink" title="4.2 通过邻域重建的 GAE"></a>4.2 通过邻域重建的 GAE</h3><p>GAD-NR的关键是基于邻域重建的图自编码器。编码器部分利用图神经网络生成节点表示，解码器部分利用节点表示重建节点的<strong>自属性</strong>、<strong>度信息</strong>和<strong>邻域特征分布</strong>。</p><h4 id="编码器部分"><a href="#编码器部分" class="headerlink" title="编码器部分"></a>编码器部分</h4><p>编码器使用信息传递机制，将节点及其邻域的属性进行聚合，生成最终的节点表示。节点 <script type="math/tex">u</script> 的初始表示为其属性 <script type="math/tex">h^{(0)}_u = x_u</script>，在第 <script type="math/tex">l</script> 层的聚合和更新操作为：</p><script type="math/tex; mode=display">h^{(l+1)}_u = \text{UPDATE}\left(h^{(l)}_u, \text{AGG}\left(\{h^{(l)}_v : v \in N_u\}\right)\right)</script><p>其中 <strong>AGG</strong> 函数用于聚合邻居节点的表示，<strong>UPDATE</strong> 函数用于更新节点表示。通过多层迭代，最终得到节点 <script type="math/tex">u</script> 的嵌入表示 <script type="math/tex">h^{(L)}_u</script>。</p><h4 id="解码器部分"><a href="#解码器部分" class="headerlink" title="解码器部分"></a>解码器部分</h4><p>解码器重建节点的多维信息，包括节点自属性、度信息和邻域特征分布。</p><ol><li><p><strong>自属性重建</strong>：<br>解码器使用节点的最终表示 <script type="math/tex">h^{(L)}_u</script> 来重建节点的原始属性 <script type="math/tex">h^{(0)}_u</script>，重建公式为：</p><script type="math/tex; mode=display">\hat{h}^{(0)}_u = \psi_x(h^{(L)}_u)</script><p>其中 <script type="math/tex">\psi_x</script> 是一个多层感知机（MLP）。节点自属性的重建损失 <script type="math/tex">L^x_u</script> 通过距离函数 <script type="math/tex">D(\cdot, \cdot)</script> 度量：</p><script type="math/tex; mode=display">L^x_u = D(h^{(0)}_u, \hat{h}^{(0)}_u)</script></li><li><p><strong>节点度重建</strong>：<br>度信息重建利用另一个MLP <script type="math/tex">\psi_d</script> 来预测节点的度信息，公式为：</p><script type="math/tex; mode=display">\hat{d}_u = \psi_d(h^{(L)}_u)</script><p>节点度重建损失 <script type="math/tex">L^d_u</script> 计算实际度和重建度的差异：</p><script type="math/tex; mode=display">L^d_u = D(d_u, \hat{d}_u)</script></li><li><p><strong>邻域特征分布重建</strong>：<br>GAD-NR将邻域特征集合近似为高斯分布，使用均值和协方差矩阵描述邻域特征分布。邻域均值 <script type="math/tex">\mu_u</script> 和协方差矩阵 <script type="math/tex">\Sigma_u</script> 的计算公式为：</p><script type="math/tex; mode=display">\mu_u = \frac{1}{d_u} \sum_{v \in N_u} h^{(0)}_v</script><script type="math/tex; mode=display">\Sigma_u = \frac{1}{d_u - 1} \sum_{v \in N_u} (h^{(0)}_v - \mu_u)(h^{(0)}_v - \mu_u)^\top</script><p>使用MLP <script type="math/tex">\phi_\mu</script> 和 <script type="math/tex">\phi_\sigma</script> 从隐藏表示生成估计的高斯分布参数：</p><script type="math/tex; mode=display">\hat{\mu}_u = \phi_\mu(h^{(L)}_u)</script><script type="math/tex; mode=display">\hat{\Sigma}_u = \text{diag}\left(\exp(\phi_\sigma(h^{(L)}_u))\right)</script><p>邻域分布的重建损失通过KL散度计算：</p><script type="math/tex; mode=display">L^n_u = \text{KL}(\mathcal{N}(\mu_u, \Sigma_u) \| \mathcal{N}(\hat{\mu}_u, \hat{\Sigma}_u))</script></li></ol><h3 id="4-3-异常检测"><a href="#4-3-异常检测" class="headerlink" title="4.3 异常检测"></a>4.3 异常检测</h3><h4 id="4-3-1-异常分数的计算"><a href="#4-3-1-异常分数的计算" class="headerlink" title="4.3.1. 异常分数的计算"></a>4.3.1. 异常分数的计算</h4><p>每个节点的异常分数由三项重建损失的加权和构成，这三项损失分别是：</p><ul><li><strong>自属性重建损失</strong> <script type="math/tex">L^x_u</script>：衡量节点的属性特征是否可以通过其编码表示有效重建，适用于捕捉上下文异常。</li><li><strong>节点度重建损失</strong> <script type="math/tex">L^d_u</script>：衡量节点度信息的重建误差，主要用于识别结构异常。</li><li><strong>邻域特征分布重建损失</strong> <script type="math/tex">L^n_u</script>：通过KL散度计算真实邻域特征分布与重建分布的差异，能够有效捕捉联合类型异常。</li></ul><p>每个节点 <script type="math/tex">u</script> 的总重建损失（即异常分数）计算公式为：</p><script type="math/tex; mode=display">L_u = \lambda_x L^x_u + \lambda_d L^d_u + \lambda_n L^n_u</script><p>其中，<script type="math/tex">\lambda_x</script>、<script type="math/tex">\lambda_d</script> 和 <script type="math/tex">\lambda_n</script> 是控制每项重建损失的权重超参数。这些权重参数可以根据检测任务的需求进行调整，以便优先关注不同类型的异常特征。</p><h4 id="4-3-2-不同类型异常的检测"><a href="#4-3-2-不同类型异常的检测" class="headerlink" title="4.3.2. 不同类型异常的检测"></a>4.3.2. 不同类型异常的检测</h4><p>GAD-NR模型可以灵活调整重建损失的权重，以适应不同的异常检测需求：</p><ul><li><strong>上下文异常</strong>：如果任务主要针对上下文异常（即节点属性与邻域差异显著的节点），则可以适当增加自属性重建损失的权重 <script type="math/tex">\lambda_x</script>，以提升模型对上下文异常的敏感度。</li><li><strong>结构异常</strong>：若需要检测连接结构异常的节点（即连接模式与其他节点显著不同的节点），则可以增加度重建损失的权重 <script type="math/tex">\lambda_d</script>，从而强化模型对结构异常的捕捉能力。</li><li><strong>联合类型异常</strong>：对于既包含属性差异又有结构异常的联合类型异常，可以增加邻域特征分布重建损失的权重 <script type="math/tex">\lambda_n</script>，以确保模型对联合类型异常的识别能力。</li></ul><p>这种灵活性使GAD-NR可以根据不同应用场景或先验知识，调整模型对异常类型的偏好，从而提升检测效果的针对性。</p><h4 id="4-3-3-异常检测流程"><a href="#4-3-3-异常检测流程" class="headerlink" title="4.3.3. 异常检测流程"></a>4.3.3. 异常检测流程</h4><p>GAD-NR的异常检测流程包括以下步骤：</p><ol><li><strong>训练模型</strong>：通过最小化重建损失来训练模型的编码器和解码器。</li><li><strong>计算异常分数</strong>：对图中的每个节点，计算其自属性重建损失、度重建损失和邻域特征分布重建损失。</li><li><strong>综合损失</strong>：将各项损失加权合成异常分数 <script type="math/tex">L_u</script>，重建损失越大的节点更可能是异常节点。</li><li><strong>异常检测</strong>：通过设定阈值或直接排序，将异常分数较高的节点标记为异常节点。</li></ol><h4 id="4-3-4-灵活性与适应性"><a href="#4-3-4-灵活性与适应性" class="headerlink" title="4.3.4. 灵活性与适应性"></a>4.3.4. 灵活性与适应性</h4><p>GAD-NR的设计使得模型可以通过不同权重组合灵活适应多种类型异常的检测需求。例如，在网络安全应用中，可能更关注结构异常，因此可以加大度重建损失的权重；而在社交网络中，通常更关注上下文异常，这时可以增加自属性重建损失的权重。这种灵活的加权机制使得GAD-NR在实际应用中具备了更广泛的适应性。</p><h1 id="5-实验验证"><a href="#5-实验验证" class="headerlink" title="5. 实验验证"></a>5. 实验验证</h1><h2 id="5-1-实验设置"><a href="#5-1-实验设置" class="headerlink" title="5.1 实验设置"></a>5.1 实验设置</h2><h3 id="5-1-1-数据集与基线模型"><a href="#5-1-1-数据集与基线模型" class="headerlink" title="5.1.1. 数据集与基线模型"></a>5.1.1. 数据集与基线模型</h3><p>实验在六个真实数据集上进行：<strong>Cora、Weibo、Reddit、Disney、Books</strong>和<strong>Enron</strong>。这些数据集覆盖了不同的应用场景，如学术引用、社交媒体、公司邮件等，以确保GAD-NR的结果具备广泛的适用性。</p><p>基线模型包括以下几类：</p><ul><li><strong>基于特征的检测方法</strong>：如LOF（Local Outlier Factor）、IF（Isolation Forest）和MLPAE（MLP-based AutoEncoder）。</li><li><strong>基于结构的检测方法</strong>：如SCAN（Structural Clustering Algorithm for Networks）。</li><li><strong>基于属性和结构联合的模型</strong>：如GCNAE（Graph Convolutional Network AutoEncoder）、DOMINANT和GAAN（Graph Attention Autoencoder Network）。</li></ul><h3 id="5-1-2-实验设置"><a href="#5-1-2-实验设置" class="headerlink" title="5.1.2. 实验设置"></a>5.1.2. 实验设置</h3><p>实验将数据集分为两类进行评估：</p><ul><li><strong>真实异常数据集</strong>：如Weibo、Reddit等，包含真实标记的异常节点。</li><li><strong>人工注入异常数据集</strong>：对于缺乏标记的Cora等数据集，实验通过注入上下文、结构和联合类型异常节点来模拟不同的异常情境。</li></ul><h2 id="5-2-问题介绍"><a href="#5-2-问题介绍" class="headerlink" title="5.2 问题介绍"></a>5.2 问题介绍</h2><p>围绕作者提出的四个关键问题，文章通过具体的实验设计和数据分析进行了验证：</p><h3 id="5-2-1-邻域重建对模型性能的提升有多大？"><a href="#5-2-1-邻域重建对模型性能的提升有多大？" class="headerlink" title="5.2.1. 邻域重建对模型性能的提升有多大？"></a>5.2.1. <strong>邻域重建对模型性能的提升有多大？</strong></h3><p>文章对GAD-NR和基线模型在不同类型异常检测上的性能进行了详细比较，涵盖了上下文异常、结构异常、联合类型异常等多种异常类型：</p><ul><li><p><strong>总体结果</strong>：GAD-NR在大多数数据集上优于基线模型，特别是在检测基准异常标签、上下文异常标签以及结构+联合类型异常标签方面表现出色。</p></li><li><p><strong>性能提升的关键原因</strong>：GAD-NR的性能优势主要得益于其完整的邻域重建机制。GAD-NR不仅包含自属性重建和节点度重建，还引入了邻域特征分布重建，从而使得模型能够更全面地捕捉节点与邻居之间的复杂关系。这一机制帮助GAD-NR在各种异常检测任务中均表现良好。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241110125024004.png" alt="image-20241110125024004"></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241110125047257.png" alt="image-20241110125047257"></p><h3 id="5-2-2-GAD-NR中不同模块对不同类型异常检测的贡献是什么？"><a href="#5-2-2-GAD-NR中不同模块对不同类型异常检测的贡献是什么？" class="headerlink" title="5.2.2. GAD-NR中不同模块对不同类型异常检测的贡献是什么？"></a>5.2.2. <strong>GAD-NR中不同模块对不同类型异常检测的贡献是什么？</strong></h3><p>作者通过实验验证了GAD-NR中三种不同类型的重建损失（自属性重建、节点度重建、邻域特征分布重建）对模型性能的影响。为此作者分别移除这些重建损失项，并观察模型性能的变化：</p><ol><li><p><strong>实验设置</strong>：在实验中，作者通过将损失函数中的某个权重设置为0（即<script type="math/tex">\lambda_x = 0</script>、<script type="math/tex">\lambda_d = 0</script> 或 <script type="math/tex">\lambda_n = 0</script>），来模拟移除该重建损失的效果，并观察模型性能的变化。实验结果列在表3中。</p></li><li><p><strong>结果分析</strong>：</p><ul><li><strong>移除邻域重建损失 <script type="math/tex">\lambda_n = 0</script></strong>：<ul><li>结果表明，移除邻域特征分布重建损失时，GAD-NR在检测两种异常类型（上下文异常和结构+联合类型异常）上的性能下降最为显著。这表明邻域重建损失在捕捉图中复杂的结构和联合异常时起到了关键作用。</li></ul></li><li><strong>移除自属性重建损失 <script type="math/tex">\lambda_x = 0</script></strong>：<ul><li>当移除自属性重建损失时，GAD-NR在上下文异常检测中的性能下降较大。这符合预期，因为上下文异常主要依赖于节点的自身属性特征，当移除自属性重建后，模型难以准确捕捉到这种异常。</li><li>对于结构+联合类型异常，性能下降较为适中，因为这种异常的检测不仅依赖于节点属性，还涉及邻域特征分布。</li></ul></li><li><strong>移除节点度重建损失 <script type="math/tex">\lambda_d = 0</script></strong>：<ul><li>移除节点度重建损失后，GAD-NR的性能也有所下降，但程度较轻。这表明节点度信息对上下文和结构异常的检测贡献较小，单靠节点度不足以准确识别这些异常。</li></ul></li></ul></li><li><p><strong>结论</strong>：</p><ul><li><strong>邻域重建损失</strong>：在检测结构和联合类型异常时尤为重要。</li><li><strong>自属性重建损失</strong>：对上下文异常的检测效果显著，缺少该损失时性能会大幅下降。</li><li><strong>节点度重建损失</strong>：对性能影响相对较小，但在一定程度上仍有助于结构异常的检测。</li></ul></li></ol><p>通过这些对比实验，作者证实了GAD-NR中各类重建损失在不同异常类型检测中的作用，为模型优化和权重设置提供了理论依据。</p><h3 id="5-2-3-GAD-NR中的超参数对模型表现的影响如何？"><a href="#5-2-3-GAD-NR中的超参数对模型表现的影响如何？" class="headerlink" title="5.2.3. GAD-NR中的超参数对模型表现的影响如何？"></a>5.2.3. <strong>GAD-NR中的超参数对模型表现的影响如何？</strong></h3><p>作者通过调整GAD-NR模型中的三个关键超参数 <script type="math/tex">\lambda'_x</script>、<script type="math/tex">\lambda'_d</script> 和 <script type="math/tex">\lambda'_n</script>，分析了它们对不同类型异常检测性能的影响：</p><h4 id="1-自属性重建损失权重-lambda-x-的影响"><a href="#1-自属性重建损失权重-lambda-x-的影响" class="headerlink" title="1. 自属性重建损失权重 \lambda'_x 的影响"></a>1. <strong>自属性重建损失权重 <script type="math/tex">\lambda'_x</script> 的影响</strong></h4><ul><li><strong>实验结果</strong>：在图3左上和图3左下（分别为Cora和Books数据集）中，当增加自属性重建损失的权重 <script type="math/tex">\lambda'_x</script> 时，模型在检测<strong>上下文异常</strong>（Contextual Anomalies）和<strong>联合类型异常</strong>（Joint-Type Anomalies）上的AUC性能提升明显。</li><li><strong>原因</strong>：自属性重建损失的增加会让解码器更关注节点的自身特征，从而对上下文异常和联合类型异常更加敏感。因为这些类型的异常依赖于节点特征的异常性，所以自属性重建对这类异常的检测起到了关键作用。</li></ul><h4 id="2-节点度重建损失权重-lambda-d-的影响"><a href="#2-节点度重建损失权重-lambda-d-的影响" class="headerlink" title="2. 节点度重建损失权重 \lambda'_d 的影响"></a>2. <strong>节点度重建损失权重 <script type="math/tex">\lambda'_d</script> 的影响</strong></h4><ul><li><strong>实验结果</strong>：在图3中间列显示，当调整节点度重建损失权重 <script type="math/tex">\lambda'_d</script> 时，各种异常类型的检测性能变化不显著。</li><li><strong>原因</strong>：度重建主要影响结构异常的检测，但对于上下文异常和结构异常而言，节点度的变化不大。同时，单靠度信息不足以有效区分异常和正常节点，因为某些正常节点也可能具有较高的度。因此，度重建损失的权重调整对检测性能的影响相对较小。</li></ul><h4 id="3-邻域重建损失权重-lambda-n-的影响"><a href="#3-邻域重建损失权重-lambda-n-的影响" class="headerlink" title="3. 邻域重建损失权重 \lambda'_n 的影响"></a>3. <strong>邻域重建损失权重 <script type="math/tex">\lambda'_n</script> 的影响</strong></h4><ul><li><strong>实验结果</strong>：图3右列显示，当增加邻域重建损失权重 <script type="math/tex">\lambda'_n</script> 时，模型在<strong>联合类型异常</strong>（Joint-Type Anomalies）和<strong>结构+联合类型异常</strong>（Structural + Joint-Type Anomalies）检测上的性能提升显著。</li><li><strong>原因</strong>：邻域重建损失能够捕捉到节点与其邻域之间的特征分布差异，对于联合类型异常，节点与邻居的整体分布差异较大。通过增加邻域重建损失权重，模型能更准确地检测到这类异常，从而提升在复杂异常结构上的检测性能。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>自属性重建损失 <script type="math/tex">\lambda'_x</script></strong>：对于上下文和联合类型异常检测非常重要，增加该权重可以显著提升这些类型异常的检测性能。</li><li><strong>节点度重建损失 <script type="math/tex">\lambda'_d</script></strong>：对性能影响较小，特别是对上下文和结构异常的影响不显著，因为单靠度信息不足以准确识别这些异常。</li><li><strong>邻域重建损失 <script type="math/tex">\lambda'_n</script></strong>：对于检测联合类型和结构+联合类型异常至关重要，增加该权重有助于更好地捕捉节点与其邻域之间的复杂关系，从而有效检测复杂异常。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241110125357576.png" alt="image-20241110125357576" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241110125423446.png" alt="image-20241110125423446" style="zoom:50%;" /></p><h3 id="5-2-4-高斯分布近似在邻域重建中的效率提升有多大？"><a href="#5-2-4-高斯分布近似在邻域重建中的效率提升有多大？" class="headerlink" title="5.2.4. 高斯分布近似在邻域重建中的效率提升有多大？"></a>5.2.4. <strong>高斯分布近似在邻域重建中的效率提升有多大？</strong></h3><p>比较了GAD-NR与NWR-GAE的性能与运行时间：</p><ol><li><p><strong>性能比较</strong>：</p><ul><li><p>GAD-NR 在所有六个数据集上的异常检测性能都显著优于NWR-GAE。</p></li><li><p>NWR-GAE直接尝试匹配邻域表示的经验分布，这种方式虽然能更精确地捕捉邻居特征，但计算耗时。</p></li></ul><p>由于直接匹配邻域特征，NWR-GAE可能更容易过拟合异常行为，而GAD-NR采用的高斯近似在重建时更具鲁棒性，能避免过拟合问题。</p></li><li><p><strong>运行时间比较</strong>：</p><ul><li>GAD-NR 的高斯近似方法在计算 KL 散度时将邻域匹配的时间复杂度降低到 <script type="math/tex">O(d)</script>，而NWR-GAE使用的匈牙利算法的时间复杂度为 <script type="math/tex">O(d^3)</script>。</li></ul><p>因此GAD-NR在处理相对较大的图时具有更好的扩展性，与NWR-GAE相比，能够更高效地检测异常。</p></li></ol><p><strong>总结</strong>：高斯分布近似使GAD-NR的运行效率显著提升，使其更适用于大规模图数据的异常检测。相比之下，NWR-GAE虽然在精确匹配邻域特征上有一定优势，但代价是更高的计算复杂度和潜在的过拟合问题。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241110130051218.png" alt="image-20241110130051218" style="zoom: 67%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAGAD-Data Augmentation for Graph Anomaly Detection</title>
      <link href="/2024/11/01/DAGAD/"/>
      <url>/2024/11/01/DAGAD/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://ieeexplore.ieee.org/document/10027747">DAGAD: Data Augmentation for Graph Anomaly Detection | IEEE Conference Publication | IEEE Xplore</a></p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><h2 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h2><p>文章研究了在<strong>图数据</strong>中<strong>检测异常节点</strong>的技术。现有方法面临两个主要问题：</p><ol><li><strong>异常样本稀缺</strong>：由于异常行为通常较为隐蔽，且缺少足够的背景知识，因此难以有效捕捉异常样本。</li><li><strong>类别不平衡</strong>：现实中的图数据中，大部分对象是正常节点，异常节点数量极少，导致类别不平衡的问题。</li></ol><p>为了解决这些问题，论文提出了一种基于数据增强的图异常检测框架，称为DAGAD（Data Augmentation-based Graph Anomaly Detection）。这个框架包括三个模块：</p><ul><li><strong>信息融合模块</strong>：利用图神经网络编码器学习节点的表示。</li><li><strong>数据增强模块</strong>：通过生成额外的训练样本来扩充训练集。</li><li><strong>不平衡学习模块</strong>：优化少数类别（异常类）和多数类别（正常类）之间的分布差异。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241101105339455.png" alt="image-20241101105339455"></p><h2 id="1-2-贡献"><a href="#1-2-贡献" class="headerlink" title="1.2 贡献"></a>1.2 贡献</h2><p>本文在图异常检测领域的贡献包括以下几个方面：</p><ul><li>所提出的图数据增强技术在嵌入空间中从原始训练集生成附加样本。通过两种分类器的互补使用，将增强样本和原始样本一起用于学习异常和正常类别的区分性表示。</li><li>基于表示的增强模块为异常检测任务中的异常样本稀缺问题提供了一个全面的解决方案。该模块还具有扩展性，可应用于其他依赖极少标注样本的图学习任务。</li><li>提出了一个简单但有效的不平衡学习模块，通过使用类专属损失来减轻类别不平衡问题，该模块还可以轻松集成到其他半监督图异常检测器中。</li><li>在三个数据集上的广泛实验以及消融研究证明了DAGAD的优越性和所提出模块在不同评价标准下的有效性。</li></ul><h2 id="1-3-相关工作"><a href="#1-3-相关工作" class="headerlink" title="1.3 相关工作"></a>1.3 相关工作</h2><p>A. Graph Anomaly Detection</p><p>B. Data Augmentation</p><p>C. Class-imbalanced Learning</p><h1 id="2-框架介绍"><a href="#2-框架介绍" class="headerlink" title="2. 框架介绍"></a>2. 框架介绍</h1><h2 id="2-1-信息融合模块（Information-Fusion-Module）"><a href="#2-1-信息融合模块（Information-Fusion-Module）" class="headerlink" title="2.1. 信息融合模块（Information Fusion Module）"></a>2.1. 信息融合模块（Information Fusion Module）</h2><p>信息融合模块使用图神经网络（GNN）编码器将图的拓扑结构信息和节点属性信息整合为低维向量表示。通过这种表示，图的复杂结构和节点特征可以在统一的空间中得到表达，从而使后续的检测过程更加高效。</p><ul><li><strong>节点表示</strong>：使用GNN编码器将节点属性 $X$ 和邻接矩阵 $A$ 转换为节点表示 $H$，即 <script type="math/tex">\phi : \{A, X\} \rightarrow H</script>，其中 <script type="math/tex">H \in \mathbb{R}^{n \times d}</script>。</li><li><strong>信息聚合</strong>：每个节点的表示 <script type="math/tex">h_i^l</script> 在第 <script type="math/tex">l</script> 层通过聚合其邻居节点的信息进行更新，公式为：  <script type="math/tex; mode=display">h_i^l = f_{AGG}\left(h_i^{l-1}, \{h_j^{l-1} : v_j \in N(i)\}\right)</script>其中，<script type="math/tex">f_{AGG}</script> 表示聚合函数（如求和或均值），<script type="math/tex">N(i)</script> 表示节点 <script type="math/tex">i</script> 的邻居集合。</li></ul><p>通过信息融合模块，节点的多维度特征被整合成一个统一的低维表示，有助于后续的异常检测。</p><h2 id="2-2-数据增强模块（Data-Augmentation-Module）"><a href="#2-2-数据增强模块（Data-Augmentation-Module）" class="headerlink" title="2.2. 数据增强模块（Data Augmentation Module）"></a>2.2. 数据增强模块（Data Augmentation Module）</h2><p>DAGAD框架的<strong>数据增强模块</strong>旨在通过生成额外的训练样本来丰富训练数据，从而缓解异常样本稀缺的问题。不同于传统的图结构或节点属性的增强方法，本模块基于节点的低维表示生成新样本，使得模型可以更好地识别异常。数据增强模块的关键步骤包括表示的随机置换、样本组合和补充学习。</p><h3 id="2-2-1-基于表示的增强"><a href="#2-2-1-基于表示的增强" class="headerlink" title="2.2.1. 基于表示的增强"></a>2.2.1. 基于表示的增强</h3><p>首先，DAGAD通过随机置换操作生成增强样本。假设已经通过信息融合模块获得了每个节点的表示 <script type="math/tex">\{ h_i : v_i \in V \}</script>，这里 <script type="math/tex">h_i</script> 表示节点 <script type="math/tex">v_i</script> 的低维嵌入。为了生成增强样本，我们对这些表示进行随机置换操作：</p><ul><li><strong>随机置换</strong>：使用置换函数 <script type="math/tex">\text{PERMUTE}</script> 对表示进行打乱，得到置换后的表示集 <script type="math/tex">\tilde{H}</script>：<script type="math/tex; mode=display">\tilde{H} = \text{PERMUTE} \left( \{ h_i : v_i \in V \} \right)</script>其中，<script type="math/tex">\tilde{H}</script> 表示置换后的表示集合，将节点的表示 <script type="math/tex">h_i</script> 随机映射到 <script type="math/tex">\tilde{h}_j \in \tilde{H}</script>。</li></ul><p>通过置换操作，我们可以生成一组新样本的表示，这些表示与原始样本存在差异，但保留了部分原始信息，从而增加了训练数据的多样性。</p><p>为了让两个分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 能在增强样本上协同工作，DAGAD通过组合不同的节点表示生成新样本。具体的组合步骤如下：</p><ul><li><p><strong>原始样本表示</strong>：将两个GNN编码器生成的不同节点表示拼接在一起，以构建原始样本的节点表示：</p><script type="math/tex; mode=display">h_i = \text{CONCAT}(h_i^{C_a}, h_i^{C_b})</script><p>其中，<script type="math/tex">h_i^{C_a}</script> 和 <script type="math/tex">h_i^{C_b}</script> 分别是分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 使用GNN编码器生成的节点 <script type="math/tex">v_i</script> 的表示。通过这种方式，节点表示融合了两种编码器提取的特征。</p></li><li><p><strong>增强样本表示</strong>：使用置换后的表示生成增强样本的节点表示，将置换后的表示与原始样本的部分表示拼接在一起：</p><script type="math/tex; mode=display">\tilde{h}_i = \text{CONCAT}(h_i^{C_a}, \tilde{h}_i^{C_b})</script><p>其中，<script type="math/tex">\tilde{h}_i^{C_b}</script> 是分类器 <script type="math/tex">C_b</script> 的第 <script type="math/tex">i</script> 个节点在置换后的表示集合中的表示。</p></li></ul><p>此外，为了确保标签和增强样本表示的对应性，增强样本的标签也通过随机置换生成：</p><script type="math/tex; mode=display">\tilde{y} = \text{PERMUTE}(y)</script><p>  其中，<script type="math/tex">y</script> 是原始标签集合。</p><p>这种样本组合方式使得DAGAD在保留原始样本的基础上，生成了具有差异性的增强样本，从而扩充了训练数据。</p><h3 id="2-2-2-补充学习（Complementary-Learning）"><a href="#2-2-2-补充学习（Complementary-Learning）" class="headerlink" title="2.2.2. 补充学习（Complementary Learning）"></a>2.2.2. 补充学习（Complementary Learning）</h3><p>在数据增强的基础上，DAGAD框架还引入了补充学习过程，使两个分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 以互补的方式进行训练，从而在原始和增强样本上都能优化性能。</p><ul><li><p><strong>多层感知器（MLP）</strong>：每个分类器包含一个多层感知器（MLP），用于节点最终表示的学习。MLP的计算公式如下：</p><script type="math/tex; mode=display">h_i^l = h_i^{l-1} W^T + b</script><p>其中：</p><ul><li><script type="math/tex">W \in \mathbb{R}^{D \times 2d}</script> 是可训练的权重矩阵；</li><li><script type="math/tex">b \in \mathbb{R}^D</script> 是偏置项；</li><li><script type="math/tex">h_i^{l-1}</script> 是前一层的节点表示。</li></ul><p>通过MLP层，我们可以捕获到节点的最终表示 <script type="math/tex">h^*</script>，并通过Softmax函数计算节点为异常或正常的概率。</p></li><li><p><strong>Softmax分类</strong>：对于每个节点的最终表示 <script type="math/tex">h^*</script>，我们使用Softmax函数来计算其属于异常或正常类别的概率：</p><script type="math/tex; mode=display">P(y | h^*) = \text{Softmax}(h^*)</script><p>然后，通过以下公式确定节点的标签：</p><script type="math/tex; mode=display">y = \arg \max_y P(y | h^*)</script></li><li><p><strong>互补优化策略</strong>：</p><ul><li><strong>分类器 <script type="math/tex">C_a</script></strong>：专注于原始样本，特别是异常样本的特征学习。分类器 <script type="math/tex">C_a</script> 的训练目标是尽可能准确地识别异常样本，因此它会尝试<strong>过拟合异常类</strong>，即深入学习异常类的特征和模式。这使得分类器 <script type="math/tex">C_a</script> 能够提取更多异常相关的信息，从而帮助另一个分类器提升对异常类的识别能力。</li><li><strong>分类器 <script type="math/tex">C_b</script></strong>：主要在增强样本上进行训练，利用数据增强模块生成的额外样本来丰富其学习过程。分类器 <script type="math/tex">C_b</script>在训练过程中会接触到更多样本，尤其是增强后的样本，这使得它可以更全面地学习异常和正常样本的区别特征。因此，<script type="math/tex">C_b</script> 的任务是提升模型的泛化能力和鲁棒性，避免过度依赖原始样本中的特征。</li></ul></li><li><p><strong>损失函数</strong></p></li></ul><h5 id="1-原始样本的损失函数（-mathcal-L-org-）"><a href="#1-原始样本的损失函数（-mathcal-L-org-）" class="headerlink" title="1. 原始样本的损失函数（\mathcal{L}_{org}）"></a>1. 原始样本的损失函数（<script type="math/tex">\mathcal{L}_{org}</script>）</h5><p>原始样本的损失函数由两个分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 的损失组合而成：</p><script type="math/tex; mode=display">\mathcal{L}_{org} = \mathcal{L}_{org}^{C_a} + \mathcal{L}_{org}^{C_b}</script><p>展开公式如下：</p><script type="math/tex; mode=display">\mathcal{L}_{org} = \omega(C_a, C_b, h^*, y) \cdot \psi_{CE}(C_a(h^*), y) + \psi_{GCE}(C_b(h^*), y)</script><p>其中：</p><ul><li><script type="math/tex">\psi_{CE}</script> 是交叉熵（Cross-Entropy，CE）损失函数，主要用于分类器 <script type="math/tex">C_a</script>。</li><li><script type="math/tex">\psi_{GCE}</script> 是广义交叉熵（Generalized Cross-Entropy，GCE）损失函数，主要用于分类器 <script type="math/tex">C_b</script>。</li><li><script type="math/tex">\omega(C_a, C_b, h^*, y)</script> 是一个权重项，用于在训练过程中<strong>共享分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 的信息</strong>，确保它们在学习过程中能够相互补充。这个权重项是根据两者的CE损失之比计算的，用来动态调整两者的贡献。</li></ul><h5 id="权重项-omega-C-a-C-b-h-y-的计算"><a href="#权重项-omega-C-a-C-b-h-y-的计算" class="headerlink" title="权重项 \omega(C_a, C_b, h^*, y) 的计算"></a>权重项 <script type="math/tex">\omega(C_a, C_b, h^*, y)</script> 的计算</h5><script type="math/tex; mode=display">\omega(C_a, C_b, h^*, y) = \frac{\psi_{CE}(C_b(h^*), y)}{\psi_{CE}(C_a(h^*), y) + \psi_{CE}(C_b(h^*), y)}</script><p>这个公式确保权重项在训练过程中根据两者的损失值动态调整。<strong>当<script type="math/tex">C_b</script>的损失减小时，权重<script type="math/tex">\omega</script>减小</strong>，这样会促使<script type="math/tex">C_a</script>更加聚焦于异常类特征，从而增加对异常类的识别。</p><h5 id="2-增强样本的损失函数（-mathcal-L-aug-C-b-）"><a href="#2-增强样本的损失函数（-mathcal-L-aug-C-b-）" class="headerlink" title="2. 增强样本的损失函数（\mathcal{L}_{aug}^{C_b}）"></a>2. 增强样本的损失函数（<script type="math/tex">\mathcal{L}_{aug}^{C_b}</script>）</h5><p>分类器 <script type="math/tex">C_b</script> 还会对增强样本进行训练，通过广义交叉熵损失（GCE）来计算增强样本的损失：</p><script type="math/tex; mode=display">\mathcal{L}_{aug}^{C_b} = \psi_{GCE}(C_b(\tilde{h}^*), \tilde{y})</script><p>其中：</p><ul><li><script type="math/tex">\tilde{h}^*</script> 表示增强样本的节点表示（基于置换后的节点表示生成）。</li><li><script type="math/tex">\tilde{y}</script> 表示增强样本的标签（通过随机置换生成，以确保与增强表示对应）。</li></ul><p>通过这个损失项，分类器 <script type="math/tex">C_b</script> 能够有效利用增强样本，提升对异常类别的泛化能力。</p><h5 id="3-总体损失函数（-mathcal-L-）"><a href="#3-总体损失函数（-mathcal-L-）" class="headerlink" title="3. 总体损失函数（\mathcal{L}）"></a>3. 总体损失函数（<script type="math/tex">\mathcal{L}</script>）</h5><p>将所有部分结合在一起，DAGAD框架的总体损失函数定义为：</p><script type="math/tex; mode=display">\mathcal{L} = \alpha \cdot \mathcal{L}_{org}^{C_a} + \mathcal{L}_{org}^{C_b} + \beta \cdot \mathcal{L}_{aug}^{C_b}</script><h5 id="损失函数设计的意义"><a href="#损失函数设计的意义" class="headerlink" title="损失函数设计的意义"></a>损失函数设计的意义</h5><ul><li><strong>信息共享与互补</strong>：通过权重项 <script type="math/tex">\omega</script>，DAGAD实现了分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 之间的互补学习，使得<script type="math/tex">C_a</script> 专注于异常类的特征，而<script type="math/tex">C_b</script> 则在增强样本的帮助下学习更多的区分特征。</li><li><strong>鲁棒性提升</strong>：通过在<script type="math/tex">C_b</script> 中加入增强样本的损失项，模型能够有效利用增强样本的特性，提升对异常样本的识别能力。</li><li><strong>动态调整</strong>：权重项 <script type="math/tex">\omega</script> 动态平衡了两个分类器在学习过程中的贡献，确保它们在整个训练过程中保持互补。</li></ul><p>这套损失函数设计使得DAGAD能够有效应对异常样本稀缺和类别不平衡问题，从而在图异常检测任务中实现更好的性能。</p><h2 id="3-不平衡学习模块（Imbalance-tailored-Learning-Module）"><a href="#3-不平衡学习模块（Imbalance-tailored-Learning-Module）" class="headerlink" title="3. 不平衡学习模块（Imbalance-tailored Learning Module）"></a>3. 不平衡学习模块（Imbalance-tailored Learning Module）</h2><h3 id="3-1-不平衡问题"><a href="#3-1-不平衡问题" class="headerlink" title="3.1. 不平衡问题"></a>3.1. 不平衡问题</h3><p>在图异常检测任务中，异常样本往往占少数，而正常样本较多，这导致模型在训练时更偏向于正常类，容易忽视异常类。为了解决这一问题，DAGAD设计了一个<strong>不平衡学习模块</strong>，通过对类别进行加权处理来平衡两类样本对学习过程的贡献。</p><h3 id="3-2-类别加权交叉熵损失（Class-wise-Cross-Entropy-Loss）"><a href="#3-2-类别加权交叉熵损失（Class-wise-Cross-Entropy-Loss）" class="headerlink" title="3.2. 类别加权交叉熵损失（Class-wise Cross-Entropy Loss）"></a>3.2. 类别加权交叉熵损失（Class-wise Cross-Entropy Loss）</h3><p>标准的实例级交叉熵损失（instance-wise Cross-Entropy Loss）如下：</p><script type="math/tex; mode=display">\psi_{CE} = -\frac{1}{|V_{train}|} \sum_{i} p(v_i | y_i) \log p(v_i | y_i)</script><p>其中，<script type="math/tex">p(v_i | y_i)</script> 表示节点 <script type="math/tex">v_i</script> 属于其真实类别 <script type="math/tex">y_i</script> 的概率。</p><p>为了应对类别不平衡问题，DAGAD为异常类和正常类分配相同的权重，设计了类别级别的交叉熵损失 <script type="math/tex">\hat{\psi}_{CE}</script>，定义如下：</p><script type="math/tex; mode=display">\hat{\psi}_{CE} = \psi_{CE}(p(v_i | y_i = 1)) + \psi_{CE}(p(v_j | y_j = 0))</script><p>具体展开为：</p><script type="math/tex; mode=display">\hat{\psi}_{CE} = -\frac{1}{|V_{train}^{anm}|} \sum_{i} p(v_i | y_i) \log p(v_i | y_i) - \frac{1}{|V_{train}^{norm}|} \sum_{j} p(v_j | y_j) \log p(v_j | y_j)</script><p>其中，<script type="math/tex">|V_{train}^{anm}|</script> 和 <script type="math/tex">|V_{train}^{norm}|</script> 分别表示训练集中异常样本和正常样本的数量。</p><h3 id="3-3-类别加权广义交叉熵损失（Class-wise-Generalized-Cross-Entropy-Loss）"><a href="#3-3-类别加权广义交叉熵损失（Class-wise-Generalized-Cross-Entropy-Loss）" class="headerlink" title="3.3. 类别加权广义交叉熵损失（Class-wise Generalized Cross-Entropy Loss）"></a>3.3. 类别加权广义交叉熵损失（Class-wise Generalized Cross-Entropy Loss）</h3><p>类似地，DAGAD对广义交叉熵损失（GCE Loss）也进行了类别加权处理，定义了类别加权广义交叉熵损失 <script type="math/tex">\hat{\psi}_{GCE}</script>：</p><script type="math/tex; mode=display">\hat{\psi}_{GCE} = \psi_{GCE}(p(v_i | y_i = 1)) + \psi_{GCE}(p(v_j | y_j = 0))</script><h3 id="4-总体损失函数的更新"><a href="#4-总体损失函数的更新" class="headerlink" title="4. 总体损失函数的更新"></a>4. 总体损失函数的更新</h3><p>在不平衡学习模块的引入下，DAGAD框架的总体损失函数从公式（11）更新为公式（15）：</p><script type="math/tex; mode=display">\hat{\mathcal{L}} = \alpha \cdot \hat{\mathcal{L}}_{org}^{C_a} + \hat{\mathcal{L}}_{org}^{C_b} + \beta \cdot \hat{\mathcal{L}}_{aug}^{C_b}</script><p>其中，<script type="math/tex">\{ \hat{\mathcal{L}}_{org}^{C_a}, \hat{\mathcal{L}}_{org}^{C_b}, \hat{\mathcal{L}}_{aug}^{C_b} \}</script> 是基于类别加权的损失函数。</p><p>通过引入类别加权的损失函数，不平衡学习模块有效地平衡了正常类和异常类对模型训练的影响，使得模型可以在训练过程中对异常类样本进行更充分的学习，从而改善异常检测性能。</p><h2 id="4-学习流程（Learning-Process）"><a href="#4-学习流程（Learning-Process）" class="headerlink" title="4. 学习流程（Learning Process）"></a>4. 学习流程（Learning Process）</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103120959892.png" alt="image-20241103120959892" style="zoom:50%;" /></p><p>该算法描述了DAGAD框架的训练流程，以下是对算法各步骤的解释：</p><h3 id="算法输入和输出"><a href="#算法输入和输出" class="headerlink" title="算法输入和输出"></a>算法输入和输出</h3><ul><li><strong>输入</strong>：<ul><li><strong>图数据</strong> <script type="math/tex">G</script>，包含节点及其属性。</li><li><strong>训练集</strong> <script type="math/tex">V_{train}</script>，包括训练节点及其标签 <script type="math/tex">Y_{train}</script>。</li><li><strong>GNN编码器</strong> <script type="math/tex">\phi_a</script> 和 <script type="math/tex">\phi_b</script>，用于生成节点表示。</li><li><strong>分类器</strong> <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script>，用于检测异常。</li><li><strong>训练迭代次数</strong> <script type="math/tex">T</script>。</li></ul></li><li><strong>输出</strong>：<ul><li><strong>预测标签</strong> <script type="math/tex">Y</script>，即对所有节点的预测结果。</li></ul></li></ul><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><ol><li><strong>初始化参数</strong>：算法首先初始化相关参数（如模型权重、偏置等）。</li><li><p><strong>迭代循环</strong>：从第1次迭代开始，直到达到设定的最大迭代次数 <script type="math/tex">T</script>。</p><ul><li><p><strong>步骤4</strong>：从GNN编码器 <script type="math/tex">\phi_a</script> 和 <script type="math/tex">\phi_b</script> 提取节点的初始表示 <script type="math/tex">h^{C_a}</script> 和 <script type="math/tex">h^{C_b}</script>，即通过公式(1)获得节点的嵌入。</p></li><li><p><strong>步骤5</strong>：根据公式(3)和公式(4)，生成原始节点表示 <script type="math/tex">h</script> 以及增强后的节点表示 <script type="math/tex">\tilde{h}</script>。其中，<script type="math/tex">h</script> 是原始样本的拼接表示，<script type="math/tex">\tilde{h}</script> 是增强样本的拼接表示。</p></li><li><p><strong>步骤6-8</strong>：将原始节点表示 <script type="math/tex">h</script> 和增强后的节点表示 <script type="math/tex">\tilde{h}</script> 分别输入到多层感知器（MLP）中：</p><ul><li><strong>步骤6</strong>：<script type="math/tex">h^{*C_a}</script> 表示通过 <script type="math/tex">C_a</script> 的MLP层得到的节点表示。</li><li><strong>步骤7</strong>：<script type="math/tex">h^{*C_b}</script> 表示通过 <script type="math/tex">C_b</script> 的MLP层得到的原始节点表示。</li><li><strong>步骤8</strong>：<script type="math/tex">\tilde{h}^{*C_b}</script> 表示通过 <script type="math/tex">C_b</script> 的MLP层得到的增强节点表示。</li></ul></li><li><p><strong>步骤9</strong>：根据公式(6)和(7)，计算每个节点的预测标签 <script type="math/tex">y_i</script>。</p></li><li><p><strong>步骤10</strong>：根据公式(15)计算训练集上的总损失 <script type="math/tex">\hat{\mathcal{L}}</script>。该损失包括原始样本和增强样本的类别加权损失。</p></li><li><p><strong>步骤11</strong>：通过最小化总损失 <script type="math/tex">\hat{\mathcal{L}}</script> 来更新GNN编码器 <script type="math/tex">\phi_a</script>、<script type="math/tex">\phi_b</script> 以及分类器 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 的参数。</p></li></ul></li><li><strong>结束迭代</strong>：当达到最大迭代次数 <script type="math/tex">T</script> 时，算法结束训练。</li><li><strong>返回预测标签</strong>：输出对所有节点的预测结果 <script type="math/tex">Y = \{ y_i \}_{i=1}^n</script>。</li></ol><h1 id="3-实验验证"><a href="#3-实验验证" class="headerlink" title="3. 实验验证"></a>3. 实验验证</h1><p>在DAGAD框架的实验部分，作者提出四个关键问题，以指导实验的设计和结果分析：</p><h3 id="1-DAGAD-是否在异常检测任务上优于现有的基准方法？"><a href="#1-DAGAD-是否在异常检测任务上优于现有的基准方法？" class="headerlink" title="1. DAGAD 是否在异常检测任务上优于现有的基准方法？"></a>1. DAGAD 是否在异常检测任务上优于现有的基准方法？</h3><p><strong>目的</strong>：验证 DAGAD 在图异常检测任务中的有效性，尤其是在应对异常样本稀缺和类别不平衡问题上的表现。<br><strong>实验设计</strong>：通过将 DAGAD 与现有的多种图异常检测方法（如无监督和基于图神经网络的检测方法）进行比较，在不同数据集上对比它们的性能。<br><strong>评价指标</strong>：通常使用准确率、宏观精确率（Macro-Precision）、宏观召回率（Macro-Recall）、宏观 F1 值（Macro-F1）以及 AUC 等指标来评估模型的检测能力。<br><strong>结果预期</strong>：如果 DAGAD 优于其他方法，则表明其设计在异常检测任务中确实具有优势，尤其在不平衡数据集和稀缺异常样本的场景下更为突出。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103121539230.png" alt="image-20241103121539230" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103121840680.png" alt="image-20241103121840680" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103121749277.png" alt="image-20241103121749277" style="zoom:67%;" /></p><h3 id="2-DAGAD-的各个模块对其总体性能有何贡献？"><a href="#2-DAGAD-的各个模块对其总体性能有何贡献？" class="headerlink" title="2. DAGAD 的各个模块对其总体性能有何贡献？"></a>2. DAGAD 的各个模块对其总体性能有何贡献？</h3><p><strong>目的</strong>：确定 DAGAD 框架中每个模块（信息融合模块、数据增强模块和不平衡学习模块）的独立贡献，验证这些模块在提升模型性能上的作用。<br><strong>实验设计</strong>：进行消融实验，即逐个移除 DAGAD 中的每个模块，测试移除某个模块后模型的性能变化。这可以帮助识别每个模块的独立作用。<br><strong>结果预期</strong>：理想情况下，移除任意一个模块都将导致模型性能下降。这将证明每个模块在提升 DAGAD 整体性能方面的独特价值，并证实这些模块设计的合理性。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103121917997.png" alt="image-20241103121917997" style="zoom:67%;" /></p><h3 id="3-DAGAD-在不同程度的不平衡数据上表现如何？"><a href="#3-DAGAD-在不同程度的不平衡数据上表现如何？" class="headerlink" title="3. DAGAD 在不同程度的不平衡数据上表现如何？"></a>3. DAGAD 在不同程度的不平衡数据上表现如何？</h3><p><strong>目的</strong>：评估 DAGAD 在数据类别不平衡的情况下的表现，验证其不平衡学习模块的有效性。<br><strong>实验设计</strong>：通过调整数据集中正常类和异常类样本的比例，生成不同不平衡程度的数据集。在这些不同的不平衡设置下，测试 DAGAD 和其他基准方法的性能，观察 DAGAD 的不平衡学习模块在多大程度上能够提升对少数异常类的检测能力。<br><strong>结果预期</strong>：DAGAD 应在严重类别不平衡的情况下仍能保持较高的异常检测精度，而其他方法的性能则可能因类别不平衡而显著下降。这将证明不平衡学习模块在增强异常检测效果方面的有效性。</p><h3 id="4-DAGAD-的性能对超参数设置的敏感性如何？"><a href="#4-DAGAD-的性能对超参数设置的敏感性如何？" class="headerlink" title="4. DAGAD 的性能对超参数设置的敏感性如何？"></a>4. DAGAD 的性能对超参数设置的敏感性如何？</h3><p><strong>目的</strong>：分析 DAGAD 中的超参数对模型性能的影响，确保模型的鲁棒性和稳定性。<br><strong>实验设计</strong>：调整 DAGAD 中的主要超参数（如损失函数中的正则化参数 <script type="math/tex">\alpha</script> 和 <script type="math/tex">\beta</script>，这些参数控制了各损失项的权重），观察这些超参数的不同设置对模型最终性能的影响。<br><strong>结果预期</strong>：理想情况下，DAGAD 应在一定范围内对超参数不敏感，即轻微的超参数调整不会导致性能的大幅波动。这种稳健性表明 DAGAD 在实际应用中具有良好的适应性。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103122010075.png" alt="image-20241103122010075" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241103122028536.png" alt="image-20241103122028536" style="zoom:67%;" /></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实验部分提出的四个问题帮助系统性地评估了 DAGAD 的有效性和设计合理性。这些问题分别从整体性能、模块贡献、不平衡处理能力和参数敏感性多个角度出发，确保 DAGAD 在多种场景下的有效性和鲁棒性。实验结果如果能够成功回答这些问题，将有力支持 DAGAD 在图异常检测领域的创新性和应用价值。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><h3 id="1-研究贡献"><a href="#1-研究贡献" class="headerlink" title="1. 研究贡献"></a>1. 研究贡献</h3><p>本文提出了一种新的图异常检测框架——<strong>DAGAD</strong>（Data Augmentation for Graph Anomaly Detection）。该框架专注于解决图异常检测任务中的两个主要挑战：</p><ul><li><strong>异常样本稀缺</strong>：异常样本数量少且分布不规律，导致模型难以有效学习异常特征。</li><li><strong>类别不平衡</strong>：正常样本远多于异常样本，使得模型更容易偏向正常类，从而忽视异常检测。</li></ul><p>为应对这些挑战，DAGAD设计了三个核心模块：</p><ul><li><strong>信息融合模块</strong>：利用图神经网络（GNN）编码器，将节点的属性和拓扑结构整合在统一的低维表示中。</li><li><strong>数据增强模块</strong>：基于节点表示进行随机置换，生成额外的增强样本，从而丰富训练数据，缓解异常样本稀缺问题。</li><li><strong>不平衡学习模块</strong>：采用类别加权的损失函数，平衡正常类和异常类样本的权重，确保模型在不平衡数据上也能有效检测异常。</li></ul><h3 id="2-实验结果"><a href="#2-实验结果" class="headerlink" title="2. 实验结果"></a>2. 实验结果</h3><p>实验结果验证了DAGAD在图异常检测任务中的优越性能，主要体现在以下几个方面：</p><ul><li><strong>整体性能优越</strong>：在多个图数据集上，DAGAD在准确率、F1值、AUC等评价指标上均优于现有的多种基准方法，证明其设计在异常检测任务中的有效性。</li><li><strong>模块贡献显著</strong>：通过消融实验，证明了信息融合、数据增强和不平衡学习模块对整体性能提升的独立贡献，验证了各模块设计的合理性和有效性。</li><li><strong>适应不平衡数据</strong>：DAGAD在处理类别不平衡问题上表现尤为突出，其不平衡学习模块使得模型在异常类别上的召回率和精确率显著提高。</li><li><strong>参数稳健性</strong>：DAGAD在参数敏感性分析中表现出对超参数的鲁棒性，证明了该模型在实际应用中的适应性。</li></ul><h3 id="3-未来工作"><a href="#3-未来工作" class="headerlink" title="3. 未来工作"></a>3. 未来工作</h3><p>作者在总结中通常还会指出DAGAD的潜在改进方向和未来研究方向，例如：</p><ul><li><strong>增强样本生成的多样性</strong>：未来可以尝试更复杂的增强策略，例如基于生成对抗网络（GAN）生成更具代表性的异常样本。</li><li><strong>扩展到其他类型的图数据</strong>：DAGAD目前主要针对静态图数据，未来可扩展到动态图和异质图数据，进一步提升其适用性。</li><li><strong>探索更高效的模型优化策略</strong>：DAGAD可以结合更高效的图神经网络优化方法，以提升训练速度和模型的可扩展性。</li></ul><h1 id="5-难点理解"><a href="#5-难点理解" class="headerlink" title="5. 难点理解"></a>5. 难点理解</h1><h2 id="5-1-补充学习中损失函数"><a href="#5-1-补充学习中损失函数" class="headerlink" title="5.1.补充学习中损失函数"></a>5.1.补充学习中损失函数</h2><h3 id="5-1-1-权重调整机制让-C-a-更聚焦于异常样本"><a href="#5-1-1-权重调整机制让-C-a-更聚焦于异常样本" class="headerlink" title="5.1.1. 权重调整机制让 C_a 更聚焦于异常样本"></a>5.1.1. 权重调整机制让 <script type="math/tex">C_a</script> 更聚焦于异常样本</h3><p>在DAGAD的损失设计中，通过<strong>动态权重 <script type="math/tex">\omega</script></strong> 的调整来平衡 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 的作用。当 <script type="math/tex">\omega</script> 值较小时，意味着<script type="math/tex">C_b</script> 的表现已经较好，系统会减少对 <script type="math/tex">C_a</script> 的依赖。这时，<script type="math/tex">C_a</script> 的损失项对总体损失的影响减少，<strong><script type="math/tex">C_a</script> 可以专注于异常类样本的特征提取</strong>。</p><p>这种设计的目的，是让 <script type="math/tex">C_a</script> 尽可能学习到异常样本中独特的模式和特征，而不必兼顾正常样本的泛化。这使得 <script type="math/tex">C_a</script> 能在异常类别上更有针对性，增强其对异常样本的敏感度。</p><h3 id="5-1-2-允许-C-a-过拟合异常类特征"><a href="#5-1-2-允许-C-a-过拟合异常类特征" class="headerlink" title="5.1.2. 允许 C_a 过拟合异常类特征"></a>5.1.2. 允许 <script type="math/tex">C_a</script> 过拟合异常类特征</h3><p>在传统的二分类任务中，我们通常希望分类器对所有类别保持泛化，以防止过拟合。然而，在异常检测任务中，异常样本通常稀少且特征多样，<strong>需要分类器对异常样本有更深入的理解</strong>。DAGAD允许 <script type="math/tex">C_a</script> <strong>在异常类上过拟合</strong>，即让 <script type="math/tex">C_a</script> 强化对异常样本的特征学习，而不必过多关注正常样本的特征。</p><p>这种做法的合理性在于，<script type="math/tex">C_b</script> 已经在增强样本和正常样本上进行泛化学习，可以保持对正常样本的良好检测能力。而 <script type="math/tex">C_a</script> 可以专注于异常样本的特征学习，即使在异常类上存在一些过拟合，也能提升异常检测的效果。</p><h3 id="5-1-3-C-a-专注异常特征帮助-C-b-提升对异常的敏感度"><a href="#5-1-3-C-a-专注异常特征帮助-C-b-提升对异常的敏感度" class="headerlink" title="5.1.3. C_a 专注异常特征帮助 C_b 提升对异常的敏感度"></a>5.1.3. <script type="math/tex">C_a</script> 专注异常特征帮助 <script type="math/tex">C_b</script> 提升对异常的敏感度</h3><p>通过让 <script type="math/tex">C_a</script> 聚焦于异常样本的特征，DAGAD的补充学习机制使得 <script type="math/tex">C_a</script> 和 <script type="math/tex">C_b</script> 的检测特性互为补充。在这种安排下：</p><ul><li><strong><script type="math/tex">C_a</script> 会成为异常样本的“专家”</strong>，通过过拟合异常类，深度学习其特征，尽可能区分异常样本和正常样本。</li><li><strong><script type="math/tex">C_b</script> 则在增强样本上保持对正常类的泛化能力</strong>，并借助 <script type="math/tex">C_a</script> 提供的异常特征，提升自身的异常检测能力。</li></ul><p>这种设计可以理解为：<strong><script type="math/tex">C_a</script> 为 <script type="math/tex">C_b</script> 提供了关于异常样本的“先验知识”</strong>，使 <script type="math/tex">C_b</script> 能够在广泛的样本上更准确地检测异常。</p><h3 id="5-1-4-损失函数的作用：推动-C-a-聚焦异常特征"><a href="#5-1-4-损失函数的作用：推动-C-a-聚焦异常特征" class="headerlink" title="5.1.4. 损失函数的作用：推动 C_a 聚焦异常特征"></a>5.1.4. 损失函数的作用：推动 <script type="math/tex">C_a</script> 聚焦异常特征</h3><p>在损失函数设计上，DAGAD通过动态调整 <script type="math/tex">\omega</script> 的值，使得 <script type="math/tex">C_a</script> 的损失在整体损失中逐渐减少。当 <script type="math/tex">C_b</script> 学习效果较好时，<script type="math/tex">\omega</script> 会趋向于较小值，从而减弱 <script type="math/tex">C_a</script> 的损失项在总体损失中的权重。这种设计让 <script type="math/tex">C_a</script> 更加“自由”地专注异常样本，不必兼顾正常样本的泛化性能。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Denoising Diffusion Probabilistic Model</title>
      <link href="/2024/10/26/DDPM/"/>
      <url>/2024/10/26/DDPM/</url>
      
        <content type="html"><![CDATA[<h1 id="扩散模型的原理与可解释性"><a href="#扩散模型的原理与可解释性" class="headerlink" title="扩散模型的原理与可解释性"></a>扩散模型的原理与可解释性</h1><p>扩散模型（Denoising Diffusion Probabilistic Model, DDPM）的原理可以从其背后的<strong>概率推断</strong>和<strong>去噪过程</strong>两个关键机制出发，结合模型的<strong>可解释性</strong>来进行更详细的说明。</p><h2 id="1-扩散模型的基本框架"><a href="#1-扩散模型的基本框架" class="headerlink" title="1. 扩散模型的基本框架"></a>1. 扩散模型的基本框架</h2><p>扩散模型的核心思想是通过两个过程：<strong>正向扩散过程</strong>和<strong>反向去噪过程</strong>来生成数据。这种生成机制具有较好的可解释性，因为它模拟了数据逐渐退化为噪声，再从噪声中逐步恢复的过程。</p><ul><li><strong>正向过程</strong>：逐步向数据中添加高斯噪声，将原始数据 <script type="math/tex">x_0</script> 扩散为接近高斯噪声的 <script type="math/tex">x_T</script>。</li><li><strong>反向过程</strong>：从最终的噪声样本 <script type="math/tex">x_T</script> 开始，逐步去噪，生成接近真实数据的样本 <script type="math/tex">x_0</script>。</li></ul><p>这个框架类似于一种“破坏-恢复”的流程，正向过程将数据“破坏”到完全随机的状态，反向过程则通过逆向步骤“恢复”到原始状态。这种逐步生成的过程在每个步骤都具有明确的物理和概率意义，因此具有良好的可解释性。</p><h2 id="2-正向过程（Forward-Process）"><a href="#2-正向过程（Forward-Process）" class="headerlink" title="2. 正向过程（Forward Process）"></a>2. 正向过程（Forward Process）</h2><p>正向过程可以视为一个<strong>马尔可夫链</strong>，它通过逐步向数据添加噪声，导致数据逐渐变得混乱，最终接近完全随机的高斯噪声。具体地，每一步都执行如下操作：</p><script type="math/tex; mode=display">q(x_t | x_{t-1}) = N(x_t; \sqrt{1 - \beta_t} x_{t-1}, \beta_t I)</script><p>这里的 <script type="math/tex">\beta_t</script> 是控制噪声强度的参数。随着时间 <script type="math/tex">t</script> 的增加，噪声逐渐增加，数据逐渐退化。</p><h3 id="可解释性："><a href="#可解释性：" class="headerlink" title="可解释性："></a>可解释性：</h3><ol><li><p><strong>噪声的逐步添加</strong>：正向过程通过小量噪声的逐步叠加，让模型能够逐步控制噪声的累积。这与物理中的<strong>扩散现象</strong>类似：一个粒子在空间中扩散，最终均匀分布。这种模拟过程在时间上是连续的，且每一步的变化是微小的，因此它的渐进性使得模型更容易理解和优化。</p></li><li><p><strong>数据退化的可解释性</strong>：随着噪声的逐步增加，数据的分布会逐渐变得混乱，直到最后完全成为高斯噪声。这个过程清楚地反映了数据从有序到无序的转变过程，并且我们可以通过噪声方差 <script type="math/tex">\beta_t</script> 来控制这个变化的速度。这个过程的物理意义清晰，符合我们对数据退化过程的直观理解。</p></li></ol><h2 id="3-反向过程（Reverse-Process）"><a href="#3-反向过程（Reverse-Process）" class="headerlink" title="3. 反向过程（Reverse Process）"></a>3. 反向过程（Reverse Process）</h2><p>反向过程则是从最后一步的噪声状态 <script type="math/tex">x_T</script> 开始，逐步去除噪声，最终生成数据 <script type="math/tex">x_0</script>。与正向过程相对应，反向过程也是一个马尔可夫链，形式为：</p><script type="math/tex; mode=display">p_\theta(x_{t-1} | x_t) = N(x_{t-1}; \mu_\theta(x_t, t), \Sigma_\theta(x_t, t))</script><p>其中，<script type="math/tex">\mu_\theta(x_t, t)</script> 是通过模型学习的均值，<script type="math/tex">\Sigma_\theta(x_t, t)</script> 是方差。通过反向过程，模型逐步移除噪声，从而从噪声中恢复出原始数据。</p><h3 id="可解释性：-1"><a href="#可解释性：-1" class="headerlink" title="可解释性："></a>可解释性：</h3><ol><li><p><strong>逐步去噪的物理意义</strong>：反向过程类似于<strong>去噪自动编码器</strong>的过程，它逐步从噪声中恢复信号。在每一步中，模型都会预测当前状态 <script type="math/tex">x_t</script> 中包含多少噪声，并根据这个估计去除一部分噪声。这种逐步去噪的过程可以直观理解为模型在每一步中“清理”噪声，逐渐恢复原始数据。</p></li><li><p><strong>逆向马尔可夫链的可解释性</strong>：在反向过程中，模型通过一系列条件高斯分布逐步从高斯噪声中还原数据。每一步生成 <script type="math/tex">x_{t-1}</script> 是基于 <script type="math/tex">x_t</script> 的，且每一步中只需要去除部分噪声。这种渐进的、基于条件分布的生成过程非常稳定，因为每一步的变化都是连续的，而不是突然的大变化。这使得反向生成过程更加稳定和易于控制。</p></li><li><p><strong>物理学中的类比</strong>：这种逐步去噪的过程类似于物理中的<strong>Langevin动力学</strong>，其本质是随机扰动中的渐进恢复过程。这种物理学的类比提供了良好的解释框架，帮助理解模型如何通过微小调整逐步恢复复杂的分布。</p></li></ol><h2 id="4-KL散度和变分推断"><a href="#4-KL散度和变分推断" class="headerlink" title="4. KL散度和变分推断"></a>4. KL散度和变分推断</h2><p>在扩散模型中，训练过程依赖于变分推断，优化的是正向和反向过程之间的差异。具体地，模型通过最小化正向过程和反向过程的KL散度来学习如何生成高质量样本。损失函数形式为：</p><script type="math/tex; mode=display">L = \mathbb{E}_q \left[ D_{KL}(q(x_T | x_0) \parallel p(x_T)) + \sum_{t=1}^{T} D_{KL}(q(x_{t-1} | x_t, x_0) \parallel p_\theta(x_{t-1} | x_t)) - \log p_\theta(x_0 | x_1) \right]</script><h3 id="可解释性：-2"><a href="#可解释性：-2" class="headerlink" title="可解释性："></a>可解释性：</h3><ol><li><p><strong>KL散度的最小化</strong>：KL散度度量了两个概率分布之间的差异，模型通过最小化KL散度，确保反向生成过程能够尽可能准确地反映正向扩散过程。这种优化目标是高度可解释的，它清晰地指示了模型需要优化的方向：即生成的分布与真实数据分布之间的接近程度。</p></li><li><p><strong>变分下界（Variational Lower Bound, VLB）</strong>：模型通过变分推断优化了对数似然的下界，变分下界提供了一个数学工具来估计模型生成数据的能力。变分下界的优化使得生成过程可以通过理论上解释的方式逐步接近真实数据分布。</p></li></ol><h2 id="5-逐步生成的优势"><a href="#5-逐步生成的优势" class="headerlink" title="5. 逐步生成的优势"></a>5. 逐步生成的优势</h2><p>扩散模型的一个核心特性是它的<strong>逐步生成</strong>。相比于其他生成模型（如GAN）一次性生成整个图像，扩散模型通过一系列小的步骤逐步从噪声中恢复数据。这种逐步生成的过程具有高度的可解释性。</p><h3 id="可解释性：-3"><a href="#可解释性：-3" class="headerlink" title="可解释性："></a>可解释性：</h3><ol><li><p><strong>每一步的局部调整</strong>：在每一步中，模型只需要处理当前时间步的噪声，并做出局部调整。这种“局部调整”的机制类似于物理中的渐进过程，使得模型能够更加精确地控制生成的结果，而不需要像GAN那样进行全局对抗训练。</p></li><li><p><strong>稳定性和可控性</strong>：由于每一步生成的变化较小，模型在整个生成过程中更加稳定，且可以在生成的不同时间步中进行控制。例如，用户可以通过修改中间的时间步，来生成不同风格或结构的样本。这种逐步生成的可控性也提高了模型的可解释性。</p></li></ol><h2 id="6-高斯分布的应用"><a href="#6-高斯分布的应用" class="headerlink" title="6. 高斯分布的应用"></a>6. 高斯分布的应用</h2><p>高斯分布在扩散模型中被广泛使用，因为它具有良好的数学性质，如封闭性、可逆性和解析性。在每一步生成过程中，高斯分布的解析形式使得模型能够轻松计算每一步的概率分布，并确保模型在高维空间中的表现。</p><h3 id="可解释性：-4"><a href="#可解释性：-4" class="headerlink" title="可解释性："></a>可解释性：</h3><p>高斯分布不仅在数学上具有良好的性质，还可以从物理上进行解释：它是最常见的噪声模型，能够最大程度地添加不确定性，从而破坏数据。同时，反向去噪的过程中，高斯分布也允许模型通过闭式解逐步恢复数据。这种逐步恢复的过程非常自然，符合我们对噪声和信号恢复的直观理解。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>扩散模型的原理高度可解释，主要体现在其逐步生成机制、基于高斯分布的噪声添加和去除、KL散度的最小化目标，以及与物理过程（如扩散现象和Langevin动力学）的紧密联系上。通过这些可解释的机制，模型能够从噪声中稳定、高效地生成高质量样本，并且在每一步生成过程中都具有明确的概率和物理意义。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph Anomaly Detection with Few Labels - AData-Centric Approach</title>
      <link href="/2024/10/24/GenGACGenGA/"/>
      <url>/2024/10/24/GenGACGenGA/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://dl.acm.org/doi/pdf/10.1145/3637528.3671929">Graph Anomaly Detection with Few Labels: A Data-Centric Approach</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这篇论文针对<strong>静态图上的异常节点检测</strong>任务，提出了一种<strong>数据为中心</strong>的解决方案。</p><p>传统方法通常面临两个挑战：<strong>异常节点的稀缺性</strong>和<strong>高昂的标注成本</strong>，导致数据不平衡且难以通过少量标签进行有效学习。因此许多研究接受了这些以数据为中心的挑战，作为图异常检测的事实设置，并追求实现更复杂的图学习算法来检测具有少量标签的图异常。</p><p>我们将重点放在生成紧密复制原始图形分布的训练节点上。与以前的以模型为中心的策略不同，我们的方法是以数据为中心的，因为我们优先考虑合成数据的生成和利用，以应对数据稀缺的挑战。然而这种方法会引起两个基本问题：</p><p>第一，确保合成数据紧密复制图数据的复杂特征的挑战;</p><p>第二，合成数据是否有利于图异常检测。</p><p>为了解决这些问题，本文提出了一种基于<strong>去噪扩散模型</strong>的图生成方法，生成与原始图拓扑和属性分布相符合的辅助训练节点。通过这些生成的节点，现有的异常检测模型可以在少量标签条件下显著提升性能。</p><p>我们确定了<strong>去噪神经网络</strong>应该具备的两个原则：</p><p>第一，保留每个节点与其邻居的特征不相似性（捕获局部图语义）;</p><p>第二，恢复低频图形能量。</p><p>根据这些原理，提出了一种基于无条件去噪的图扩散模型GenGA和一种分类器引导的生成模型CGenGA，用于生成适合图异常检测的数据。</p><p>论文的<strong>贡献</strong>包括：</p><ol><li>提出了一种数据为中心的图异常检测方法，通过生成合成数据来增强现有检测器。</li><li>基于实验观察提出了两条设计去噪神经网络的原则，用于生成合成训练样本。</li><li>在八个常用数据集上的实验表明，生成的数据有效提高了九种前沿图异常检测器的性能。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241022232610991.png" alt="image-20241022232610991" style="zoom:50%;" /></p><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><h2 id="2-1-图异常检测"><a href="#2-1-图异常检测" class="headerlink" title="2.1 图异常检测"></a>2.1 图异常检测</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241022233138375.png" alt="image-20241022233138375"></p><p>在图异常检测领域，本文通过表格列举了几类常见方法及其对应的例子。以下是对文中提到的相关方法及其例子的总结：</p><h3 id="1-Vanilla-Semi-Supervised-MP-GNNs（基础的半监督-监督图神经网络）"><a href="#1-Vanilla-Semi-Supervised-MP-GNNs（基础的半监督-监督图神经网络）" class="headerlink" title="1. Vanilla Semi-/Supervised MP-GNNs（基础的半监督/监督图神经网络）"></a>1. <strong>Vanilla Semi-/Supervised MP-GNNs（基础的半监督/监督图神经网络）</strong></h3><ul><li>这些方法主要依赖节点分类，使用少量标注的异常节点进行训练，分类边界是基于图神经网络（GNN）的。</li><li><strong>例子</strong>：参考文献 [12, 24, 44] 中讨论了这些方法的具体实现。</li></ul><h3 id="2-Semi-Supervised-Detectors（半监督-监督检测器）"><a href="#2-Semi-Supervised-Detectors（半监督-监督检测器）" class="headerlink" title="2. Semi-/Supervised Detectors（半监督/监督检测器）"></a>2. <strong>Semi-/Supervised Detectors（半监督/监督检测器）</strong></h3><ul><li>这些检测器通过少量标注的异常节点，学习异常与正常节点之间的分类边界。它们不仅进行分类，还依赖于超参数调整（HPT）。</li><li><strong>例子</strong>：参考文献 [4, 8, 9, 29, 42, 45] 提供了具体实现，展示了如何通过少量标签进行异常检测。BWGNN [42]采用Beta图小波并利用少量标记的异常来学习带通滤波器以捕获异常信号，GHRN [8]进一步应用图小波来解决图的异质性。</li></ul><h3 id="3-Unsupervised-Detectors（无监督检测器）"><a href="#3-Unsupervised-Detectors（无监督检测器）" class="headerlink" title="3. Unsupervised Detectors（无监督检测器）"></a>3. <strong>Unsupervised Detectors（无监督检测器）</strong></h3><ul><li>这些方法不依赖标签，直接通过节点的评分或排名来判断异常。通常，它们会基于特定的特征和图结构的偏差来检测异常。</li><li><strong>例子</strong>：参考文献 [3, 6, 36] 中展示了这种无监督检测的具体实现。例如CONAD [28]和SL-GAD [55]，它们在不同的对比视图中调查异常及其邻居之间的一致性，以测量节点不规则性。其他人如[6]、[25]和[55]将残差量化为异常评分的测量。</li></ul><h3 id="4-Unsupervised-Contrastive-Detectors（无监督对比检测器）"><a href="#4-Unsupervised-Contrastive-Detectors（无监督对比检测器）" class="headerlink" title="4. Unsupervised-Contrastive Detectors（无监督对比检测器）"></a>4. <strong>Unsupervised-Contrastive Detectors（无监督对比检测器）</strong></h3><ul><li>这些方法通过对比不同视角下的节点相似性或差异性，来判别哪些节点表现异常。通常使用子图视角采样（Subgraph View Sampling）技术。</li><li><strong>例子</strong>：参考文献 [28, 50, 55] 中对这些方法进行了具体讨论。</li></ul><h3 id="5-Graph-Augmentation-Methods（图增强方法）"><a href="#5-Graph-Augmentation-Methods（图增强方法）" class="headerlink" title="5. Graph Augmentation Methods（图增强方法）"></a>5. <strong>Graph Augmentation Methods（图增强方法）</strong></h3><ul><li>图增强方法通过增强图的局部结构（如egonet增强），提升模型的检测效果。虽然没有生成合成数据，但通过改进现有结构获得更好的检测性能。</li><li><strong>例子</strong>：参考文献 [35, 54] 中讨论了图增强方法的不同实现。</li></ul><h3 id="6-Generative-Method（生成方法，本文提出）"><a href="#6-Generative-Method（生成方法，本文提出）" class="headerlink" title="6. Generative Method（生成方法，本文提出）"></a>6. <strong>Generative Method（生成方法，本文提出）</strong></h3><ul><li>本文提出的生成方法属于数据为中心（DC），通过生成与原始数据分布相似的合成图，增强现有检测器的性能。这种方法生成了新节点和标签，并能够提升分类任务和超参数调整的效果。</li><li><strong>例子</strong>：此方法为本文的核心创新，旨在解决标签稀缺问题。</li></ul><h2 id="2-2-去噪扩散概率模型"><a href="#2-2-去噪扩散概率模型" class="headerlink" title="2.2 去噪扩散概率模型"></a>2.2 去噪扩散概率模型</h2><p>去噪扩散概率模型（<strong>Denoising Diffusion Probabilistic Models</strong>，DDPM）最近在多个生成任务中展现了强大的能力，包括图像合成、时间序列预测等。DDPM包含两个过程：<strong>前向扩散过程（forward process）</strong>和<strong>反向去噪过程（reverse process）</strong>。</p><h3 id="1-前向扩散过程"><a href="#1-前向扩散过程" class="headerlink" title="1. 前向扩散过程"></a>1. 前向扩散过程</h3><p>前向扩散是一个多步的马尔可夫链过程，在每一步中，模型通过向节点属性逐步添加噪声来生成一个标准正态分布。对于某个初始节点属性 <script type="math/tex">\mathbf{x}_0</script>，经过 <script type="math/tex">T</script> 步后，扩散到 <script type="math/tex">\mathbf{x}_T</script>：</p><script type="math/tex; mode=display">q(\mathbf{x}_t | \mathbf{x}_{t-1}) = \mathcal{N}(\mathbf{x}_t; \sqrt{1 - \beta_t} \mathbf{x}_{t-1}, \beta_t \mathbf{I})</script><p>其中，<script type="math/tex">\beta_t</script> 是每个时间步的噪声增加比例。</p><h3 id="2-反向去噪过程"><a href="#2-反向去噪过程" class="headerlink" title="2. 反向去噪过程"></a>2. 反向去噪过程</h3><p>反向去噪过程的目标是从最终的噪声分布 <script type="math/tex">\mathbf{x}_T</script> 开始，通过逐步去除噪声，恢复原始的数据分布。反向过程同样是一个马尔可夫链过程，模型通过学习去噪的条件概率分布 <script type="math/tex">p_\theta(\mathbf{x}_{t-1} | \mathbf{x}_t)</script> 来实现：</p><script type="math/tex; mode=display">p_\theta(\mathbf{x}_{t-1} | \mathbf{x}_t) = \mathcal{N}(\mathbf{x}_{t-1}; \mu_\theta(\mathbf{x}_t, t), \Sigma_\theta(\mathbf{x}_t, t))</script><p>其中，<script type="math/tex">\mu_\theta</script> 和 <script type="math/tex">\Sigma_\theta</script> 是通过神经网络学习的去噪均值和方差参数。</p><h3 id="3-去噪过程中的损失函数"><a href="#3-去噪过程中的损失函数" class="headerlink" title="3. 去噪过程中的损失函数"></a>3. 去噪过程中的损失函数</h3><p>为了让模型能够有效地学习去噪过程，DDPM使用了以下损失函数：</p><script type="math/tex; mode=display">L_\text{simple} = \mathbb{E}_{t, \mathbf{x}_0, \epsilon} \left[ \| \epsilon - \epsilon_\theta(\mathbf{x}_t, t) \|^2 \right]</script><p>其中，<script type="math/tex">\epsilon</script> 是加性噪声，<script type="math/tex">\epsilon_\theta</script> 是模型预测的噪声。这个损失函数衡量了模型在每个时间步去除噪声的能力。</p><h3 id="4-在图数据中的应用"><a href="#4-在图数据中的应用" class="headerlink" title="4. 在图数据中的应用"></a>4. 在图数据中的应用</h3><p>在图异常检测任务中，DDPM被用于生成与原始图分布一致的合成节点数据。前向过程逐渐将噪声添加到节点属性中，而反向过程则通过去噪逐步恢复出符合图结构的节点，从而生成新的训练样本。</p><p>这种去噪生成方法能够有效地缓解异常检测中的标签稀缺问题，并提升检测模型的性能。</p><h1 id="第三部分：准备工作"><a href="#第三部分：准备工作" class="headerlink" title="第三部分：准备工作"></a>第三部分：准备工作</h1><h2 id="3-1-静态属性图"><a href="#3-1-静态属性图" class="headerlink" title="3.1 静态属性图"></a>3.1 静态属性图</h2><p>一个静态属性图可以表示为 <script type="math/tex">G = \{A, X\}</script>，其中 <script type="math/tex">A</script> 表示图的邻接矩阵，<script type="math/tex">X</script> 表示节点的属性矩阵。图中共有 <script type="math/tex">n</script> 个节点，每个节点都有与其相关的属性特征。</p><h2 id="3-2-Egonet差异性"><a href="#3-2-Egonet差异性" class="headerlink" title="3.2 Egonet差异性"></a>3.2 Egonet差异性</h2><p>Egonet差异性用于衡量某个节点与其Egonet邻居之间的属性差异。Egonet可以理解为以节点为中心的局部网络结构。定义Egonet差异性为：</p><script type="math/tex; mode=display">\Omega = [\omega_i]_{n \times k} = L X</script><p>其中，<script type="math/tex">L</script> 是归一化图拉普拉斯矩阵，<script type="math/tex">X</script> 是节点的属性特征矩阵，<script type="math/tex">D</script> 是度矩阵，<script type="math/tex">A</script> 是邻接矩阵。该公式量化了每个节点与其邻居之间的属性差异。</p><h2 id="3-3-前向扩散过程"><a href="#3-3-前向扩散过程" class="headerlink" title="3.3 前向扩散过程"></a>3.3 前向扩散过程</h2><p>在前向扩散过程中，噪声逐渐被注入到节点的属性矩阵 <script type="math/tex">X_0</script> 中，随着扩散步骤的增加，节点的属性逐渐接近正态分布。这个过程可以通过以下方式描述：</p><script type="math/tex; mode=display">q(\mathbf{x}_t | \mathbf{x}_{t-1}) = \mathcal{N}(\mathbf{x}_t; \sqrt{1 - \beta_t} \mathbf{x}_{t-1}, \beta_t \mathbf{I})</script><p>通过 <script type="math/tex">T</script> 步的扩散，原始节点属性会变成一个接近噪声的分布。</p><h2 id="3-4-少量标签下的图异常检测"><a href="#3-4-少量标签下的图异常检测" class="headerlink" title="3.4 少量标签下的图异常检测"></a>3.4 少量标签下的图异常检测</h2><p>图异常检测任务的目标是在图 <script type="math/tex">G</script> 中识别异常节点，异常节点通常表现出不同于正常节点的结构和属性模式。为了检测异常，模型需要学习一个函数 <script type="math/tex">f: \{A, X\} \to y \in \{0, 1\}^n</script>，其中 <script type="math/tex">y = 1</script> 表示异常节点，<script type="math/tex">y = 0</script> 表示正常节点。</p><p>在少量标签的设定下，异常节点的数量远少于正常节点，即 <script type="math/tex">|V_1| \ll |V_0|</script>，这是一个不平衡的分类任务。</p><h1 id="4-设计动机和分析"><a href="#4-设计动机和分析" class="headerlink" title="4 设计动机和分析"></a>4 设计动机和分析</h1><h2 id="4-1-Egonet差异性的演变"><a href="#4-1-Egonet差异性的演变" class="headerlink" title="4.1 Egonet差异性的演变"></a>4.1 Egonet差异性的演变</h2><p>在前向扩散过程中，异常节点和正常节点的属性发生了不同的变化，特别是在节点的Egonet差异性方面。实验表明，异常节点的Egonet差异性在扩散过程中变化更加剧烈，而正常节点的差异性则相对稳定。</p><p>具体来说，Egonet差异性定义为：</p><script type="math/tex; mode=display">\Omega = [\omega_i]_{n \times k} = LX</script><p>在实验中，作者测量了异常节点和正常节点的平均Egonet差异性，并发现随着扩散步骤的增加，异常节点的差异性显著增大。因此，去噪神经网络需要具备捕捉局部图语义信息的能力，才能更好地恢复这些差异。</p><h2 id="4-2-图谱能量的转移"><a href="#4-2-图谱能量的转移" class="headerlink" title="4.2 图谱能量的转移"></a>4.2 图谱能量的转移</h2><p>作者进一步分析了扩散过程中的图谱能量变化。通过傅里叶变换，可以将图信号分解为不同频率的分量。实验表明，扩散过程中，低频信号的能量逐渐减少，而高频信号的能量逐渐增加。</p><p>在每一步扩散中，节点属性的图谱能量可以表示为：</p><script type="math/tex; mode=display">\gamma_l (\mathbf{x}_t, L) = \frac{(\mathbf{x}_t^l)^2}{\sum_{i=1}^{n} (\mathbf{x}_t^i)^2}</script><p>其中，<script type="math/tex">\hat{\mathbf{x}}_t = U^\top \mathbf{x}_t</script> 是图信号在傅里叶空间中的表示，<script type="math/tex">U</script> 是图拉普拉斯矩阵的特征向量矩阵。</p><p>实验结果显示，随着扩散步骤 <script type="math/tex">t</script> 的增加，图信号的高频分量逐渐占据主导地位。去噪过程需要能够恢复低频能量，以确保生成的图与原始图拓扑结构保持一致。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241022235029362.png" alt="image-20241022235029362" style="zoom:50%;" /></p><h2 id="4-3-设计原则总结"><a href="#4-3-设计原则总结" class="headerlink" title="4.3 设计原则总结"></a>4.3 设计原则总结</h2><p>基于对Egonet差异性和图谱能量变化的分析，作者提出了两个设计去噪神经网络的原则：</p><ol><li><strong>局部信息捕捉</strong>：去噪神经网络需要能够捕捉节点与其Egonet邻居之间的差异性，确保在合成图中保留局部语义信息。</li><li><strong>低频能量恢复</strong>：去噪神经网络需要能够恢复扩散过程中丢失的低频能量，保证生成的节点与原始图的拓扑结构保持一致。</li></ol><p>这些原则为后续提出的去噪神经网络设计提供了理论依据，并有助于生成高质量的合成数据。</p><h1 id="5-方法"><a href="#5-方法" class="headerlink" title="5 方法"></a>5 方法</h1><p>根据我们制定的设计原则，本节首先介绍我们无条件的图生成模型 <strong>GenGA</strong>，这是一个基于去噪的神经网络，旨在生成辅助训练样本，即节点。然后，我们提出了 <strong>CGenGA</strong>，通过引入分类器引导数据生成。最后，我们讨论生成的图如何用于补充现有的检测器。</p><h2 id="5-0-GenGA和CGenGA的算法分析"><a href="#5-0-GenGA和CGenGA的算法分析" class="headerlink" title="5.0 GenGA和CGenGA的算法分析"></a>5.0 GenGA和CGenGA的算法分析</h2><p>该算法描述了生成图数据的两个过程：<strong>GenGA</strong> 和 <strong>CGenGA</strong>，分别用于无条件图生成和分类器引导的图生成。以下是对算法的逐步分析与讲解：</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241023094330015.png" alt="image-20241023094330015"></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><ul><li><strong>输入</strong>: <ul><li>图 <script type="math/tex">G = \{A, X\}</script>：表示输入的图数据，包含邻接矩阵 <script type="math/tex">A</script> 和生成的节点特征矩阵 <script type="math/tex">X_a</script> 。</li><li>扩散参数：<script type="math/tex">\beta, \alpha, \bar{\alpha}</script> 是扩散模型中使用的参数，控制噪声的扩散与消除。</li><li>分类器相关的参数：<script type="math/tex">y</script>、<script type="math/tex">\lambda</script>。</li></ul></li><li><strong>输出</strong>: 生成的图 <script type="math/tex">G_a</script>，其中包含邻接矩阵 <script type="math/tex">A</script> 和生成的节点特征矩阵 <script type="math/tex">X_a</script> 。</li></ul><h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><h4 id="1-去噪神经网络的训练"><a href="#1-去噪神经网络的训练" class="headerlink" title="1. 去噪神经网络的训练"></a>1. <strong>去噪神经网络的训练</strong></h4><p>在整个图生成过程中，首先是训练去噪神经网络（如 <strong>SDN</strong> 和 <strong>DEN</strong>），以学习如何去除扩散过程中加入的噪声，恢复图的节点特征。</p><ul><li><strong>Step 1-7</strong>:<ul><li>初始化时间步 <script type="math/tex">t \sim Uniform(1, \dots, T)</script>：从均匀分布中采样一个时间步，表示当前扩散阶段。</li><li>计算 <script type="math/tex">X_t</script> 和 <script type="math/tex">X_{t-1}</script>：根据扩散方程 (1) 更新节点特征。</li><li>利用 <strong>SDN</strong> 和 <strong>DEN</strong> 计算节点表示 <script type="math/tex">Z_t</script> 和 <script type="math/tex">Z_t^*</script>，并估计 <script type="math/tex">\mu_{t-1}^{'}, \Sigma_{t-1}^{'}</script>（均值与方差）。这里的估计用于恢复噪声污染的特征。</li><li>使用公式 (14) 通过梯度更新 <strong>SDN</strong> 和 <strong>DEN</strong> 中的参数，完成去噪网络的训练。</li></ul></li></ul><h4 id="2-无条件图生成（GenGA）"><a href="#2-无条件图生成（GenGA）" class="headerlink" title="2. 无条件图生成（GenGA）"></a>2. <strong>无条件图生成（GenGA）</strong></h4><p>具体步骤为：</p><ul><li><strong>Step 8-16</strong>:<ul><li>从标准正态分布 <script type="math/tex">N(0, I)</script> 中采样 <script type="math/tex">X_T</script>，作为生成过程的初始输入。</li><li>依次回溯扩散过程，从 <script type="math/tex">X_T</script> 生成 <script type="math/tex">X_{t-1}</script>，每一步都通过 <strong>SDN</strong> 和 <strong>DEN</strong> 预测均值和方差，并根据扩散方程恢复节点特征。</li><li>最后，得到合成图的节点特征矩阵 <script type="math/tex">X_a</script>，并返回生成的图 <script type="math/tex">G_a = \{A, X_a\}</script>。</li></ul></li></ul><h4 id="3-分类器引导的图生成（CGenGA）"><a href="#3-分类器引导的图生成（CGenGA）" class="headerlink" title="3. 分类器引导的图生成（CGenGA）"></a>3. <strong>分类器引导的图生成（CGenGA）</strong></h4><p>在 <strong>CGenGA</strong> 中，除了基本的去噪和生成步骤外，还加入了一个额外的分类器引导步骤。通过预训练分类器，利用分类器信号 <script type="math/tex">g</script> 来指导生成过程，进一步改善生成图的质量。</p><ul><li><strong>Step 17-31</strong>:<ul><li>在分类器引导的生成过程中，首先进行分类器的预训练，基于图中的节点特征进行分类任务。</li><li>然后与无条件生成类似，从 <script type="math/tex">X_T</script> 开始逐步生成 <script type="math/tex">X_{t-1}</script>，不过此时加入了分类器信号 <script type="math/tex">g = \nabla_{x_t} \log p_{\varphi}(y | x_t)</script>，它引导生成过程，以偏移节点特征的均值 <script type="math/tex">\mu_{t-1}'</script>。</li><li>最后生成的节点特征矩阵 <script type="math/tex">X_a</script> 同样作为最终的生成图的一部分，返回 <script type="math/tex">G_a = \{A, X_a\}</script>。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>GenGA</strong> 过程通过无条件去噪扩散模型生成合成图，主要依赖 <strong>SDN</strong> 和 <strong>DEN</strong> 进行节点特征的去噪和恢复。</li><li><strong>CGenGA</strong> 在 <strong>GenGA</strong> 的基础上引入了分类器引导，通过预训练的分类器信号 <script type="math/tex">g</script> 来引导生成过程，使得生成图能够更好地拟合目标分布，从而提升图异常检测的性能。</li></ul><p>该算法通过结合去噪扩散模型和分类器信号，解决了图数据生成中的数据稀缺问题，并且能够通过生成更多样的图数据来增强现有的异常检测器。</p><h2 id="5-1-去噪神经网络设计"><a href="#5-1-去噪神经网络设计" class="headerlink" title="5.1 去噪神经网络设计"></a>5.1 去噪神经网络设计</h2><p>根据定义3，我们仅在扩散过程中向节点属性注入噪声，因此可以应用任何类型的神经网络来去噪 <script type="math/tex">X_t</script>。具体而言，去噪过程实际上是在预测来自图 <script type="math/tex">G_t</script> 的均值 <script type="math/tex">\sqrt{\bar{\alpha}_t}X</script> 和方差 <script type="math/tex">(1-\bar{\alpha}_t)</script>。</p><p>然而，正如我们在设计原则P2中提到的，去噪网络的选择受到恢复低频能量需求的限制。图卷积神经网络（GCN）作为一种有效的低通滤波器，能够抑制高频信号并强调低频信号，因此是去噪网络的强候选者。此外，从空间角度来看，GCN能够传播局部图语义，从而更好地保留图结构。因此，我们选择GCN作为主干网络，并设计了两种成分，即<strong>依赖步骤的GCN（SDN）</strong>，用于学习节点表示 <script type="math/tex">Z_t</script>，以及<strong>分布估计器（DEN）</strong>，用于估计 <script type="math/tex">X_{t-1}</script> 的均值和方差。</p><h2 id="5-2-依赖步骤的GCN-SDN"><a href="#5-2-依赖步骤的GCN-SDN" class="headerlink" title="5.2 依赖步骤的GCN - SDN"></a>5.2 依赖步骤的GCN - SDN</h2><p>我们基于[23]构建了 <strong>SDN</strong>，目标是学习符合高斯分布 <script type="math/tex">p(Z_t | X_t, A, t) \sim N(\mu_{t}^{SDN}, \text{diag}(\Sigma_{t}^{SDN}))</script> 的节点表示，其中矩阵 <script type="math/tex">\mu_{t}^{SDN}</script> 和 <script type="math/tex">\text{diag}(\Sigma_{t}^{SDN})</script> 包含每个节点在步骤 <script type="math/tex">t</script> 时的表示的均值和方差。</p><p>由于 <script type="math/tex">t</script> 是一个标量，且需要进一步注入对时间步 <script type="math/tex">t</script> 的依赖性，因此我们引入了编码函数 <strong>TE</strong>，用于生成特定时间步 <script type="math/tex">t</script> 的嵌入矩阵。编码函数的公式如下：</p><script type="math/tex; mode=display">TE(t) = \text{SeLU} \left[ \text{Se}(t) W_1^{TE} \right] W_2^{TE}</script><p>其中，<script type="math/tex">W_1^{TE}</script> 和 <script type="math/tex">W_2^{TE}</script> 是可训练的投影参数。<script type="math/tex">\text{Se}(t)</script> 是正弦函数，且 <script type="math/tex">t</script> 的嵌入由以下公式定义：</p><script type="math/tex; mode=display">\text{Se}(t) = \left[ \sin\left(\frac{t \cdot \exp\left(\frac{5 \log{10}}{d/2}\right)}{d} \right), \cos\left(\frac{t \cdot \exp\left(\frac{5 \log{10}}{d/2}\right)}{d} \right) \right]</script><p>我们然后学习节点表示的均值 <script type="math/tex">\mu_{t}^{SDN}</script> 和方差 <script type="math/tex">\Sigma_{t}^{SDN}</script>，公式如下：</p><script type="math/tex; mode=display">\mu_{t}^{SDN} = \tilde{A} Z_t W_{\mu}^{SDN}, \quad \log[\text{diag}(\Sigma_{t}^{SDN})] = \tilde{A} Z_t W_{\Sigma}^{SDN}</script><p>其中，<script type="math/tex">Z_t = \text{ReLU}(\tilde{A}X + TE(t)W_Z^{SDN})</script>，<script type="math/tex">\tilde{A} = D^{-1/2} A D^{-1/2}</script> 是归一化的邻接矩阵。<script type="math/tex">W_Z^{SDN}, W_{\mu}^{SDN}, W_{\Sigma}^{SDN}</script> 是GCN层的可训练变量。通过重新参数化技巧，表示 <script type="math/tex">Z_t</script> 可以有效捕捉局部图结构。</p><h2 id="5-3-分布估计器-DEN"><a href="#5-3-分布估计器-DEN" class="headerlink" title="5.3 分布估计器 - DEN"></a>5.3 分布估计器 - DEN</h2><p>给定节点表示 <script type="math/tex">Z_t</script>，我们提出了一个分布估计器，用于预测 <script type="math/tex">X_{t-1}</script> 的均值和方差。具体来说，预测的均值为：</p><script type="math/tex; mode=display">\mu_{t-1}' = \tilde{A} [\text{ReLU}(\tilde{A} Z_t W_Z^{DEN}) \oplus Z_t] W_{\mu}^{DEN}</script><p>其中，<script type="math/tex">\oplus</script> 表示连接操作。值得注意的是，我们从 <strong>SDN</strong> 中提取出这个残差信息以缓解过平滑现象，并通过第6.4节的消融研究验证了其有效性。</p><p>方差估计公式如下：</p><script type="math/tex; mode=display">\log[\text{diag}(\Sigma_{t-1}')] = \tilde{A} [\text{ReLU}(\tilde{A} Z_t W_Z^{DEN}) \oplus Z_t] W_{\Sigma}^{DEN}</script><p>其中，<script type="math/tex">W_Z^{DEN}, W_{\mu}^{DEN}, W_{\Sigma}^{DEN}</script> 是 <strong>DEN</strong> 中的可训练参数。</p><h2 id="5-4-训练准则"><a href="#5-4-训练准则" class="headerlink" title="5.4 训练准则"></a>5.4 训练准则</h2><p>最终，所有 <strong>SDN</strong> 和 <strong>DEN</strong> 中的参数可以通过最小化预测的 <script type="math/tex">X_{t-1}'</script> 和有噪声的 <script type="math/tex">X_{t-1}</script> 在任意步骤 <script type="math/tex">t</script> 下的分布之间的KL散度来调整，公式如下：</p><script type="math/tex; mode=display">\arg \min_{\theta} D_{KL}(q(X_{t-1} | X, A) \parallel p_{\theta}(X_{t-1} | X_t, A))</script><h2 id="5-5-无条件图生成-GenGA"><a href="#5-5-无条件图生成-GenGA" class="headerlink" title="5.5 无条件图生成 - GenGA"></a>5.5 无条件图生成 - GenGA</h2><p>当整个模型在不同的步骤 <script type="math/tex">t</script> 上充分训练后，我们可以简单地从 <script type="math/tex">\mathcal{N}(0, I)</script> 中采样 <script type="math/tex">X_T</script>，并通过 <strong>SDN</strong> 和 <strong>DEN</strong> 逐步估计 <script type="math/tex">X_{t-1}</script> 的均值和方差，从而生成一个新图 <script type="math/tex">G_a = \{\mathbf{A}, \mathbf{X}_a\}</script>，该图的节点和特征数量与原始图相同，公式如下：</p><script type="math/tex; mode=display">X_{t-1} = \mu_{t-1}' + \sigma_{t-1}' I \epsilon</script><p>其中，<script type="math/tex">(\sigma_{t-1}')^2 I = \text{diag}(\Sigma_{t-1}')</script>，<script type="math/tex">\epsilon</script> 是从标准高斯分布中采样的。</p><h2 id="5-6-分类器引导生成-CGenGA"><a href="#5-6-分类器引导生成-CGenGA" class="headerlink" title="5.6 分类器引导生成 - CGenGA"></a>5.6 分类器引导生成 - CGenGA</h2><p>虽然 <strong>GenGA</strong> 可以从噪声中生成辅助图，但它忽略了用于引导图生成的类别信息。在这里，我们进一步探索通过将生成过程与类别信息进行条件化，结合分类器引导数据生成，公式如下：</p><script type="math/tex; mode=display">p_{\theta, \varphi}(X_{0:T}) := p(X_T, A, \mathbf{y}) \prod_{t=1}^{T} p_{\theta, \varphi}(X_{t-1} | X_t, A, \mathbf{y})</script><p>根据[5]，每个反向步骤的目标如下：</p><script type="math/tex; mode=display">\log[p_{\theta, \varphi}(X_{t-1} | X_t, A)p_{\theta}(y | X_t, A)] \approx \log p(\mathbf{H}) + C</script><p>其中，<script type="math/tex">C</script> 是常数，<script type="math/tex">\mathbf{H} \sim \mathcal{N}(\mu_{t-1}' + \Sigma_{t-1}' g, \Sigma_{t-1}')</script>。这里，<script type="math/tex">g</script> 是涉及的分类器信号，即分类器在数据 <script type="math/tex">x_t</script> 上的导数 <script type="math/tex">g = \nabla_{x_t} \log p_{\varphi}(y | x_t)</script>，分类器 <script type="math/tex">p_{\varphi}(y | x_t)</script> 在有噪节点属性 <script type="math/tex">x_t</script> 和节点标签 <script type="math/tex">y</script> 上训练。</p><p>通过分类器的引导，会对无条件生成器的均值进行偏移，<script type="math/tex">\Sigma_{t-1}' g</script> 以及去噪节点属性矩阵 <script type="math/tex">X_{t-1}</script> 最终可以通过以下公式得到：</p><script type="math/tex; mode=display">X_{t-1} = \mu_{t-1}' + \lambda \Sigma_{t-1}' g + \sigma_{t-1}' I \epsilon</script><p>其中，<script type="math/tex">\lambda</script> 是一个超参数，用于平衡分类器信号的权重。</p><h2 id="5-7-使用合成数据增强图异常检测"><a href="#5-7-使用合成数据增强图异常检测" class="headerlink" title="5.7 使用合成数据增强图异常检测"></a>5.7 使用合成数据增强图异常检测</h2><p>为了增强给定的异常检测器 <script type="math/tex">f</script>，我们可以简单地将生成的图 <script type="math/tex">G_a = \{\mathbf{G}_a^1, \dots, \mathbf{G}_a^{|G_a|}\}</script> 输入到原始图 <script type="math/tex">\mathbf{G}</script> 中，并通过最小化原始损失函数（如二元交叉熵损失）来微调参数。总训练损失的通用形式可以写为：</p><script type="math/tex; mode=display">L_{\text{total}} = L(f(\mathbf{X}, A), \mathbf{y}) + \frac{1}{|G_a|} \sum_{i=1}^{|G_a|} L(f(\mathbf{X}^i, A), \mathbf{y})</script><p>其中，第一项衡量在原始图上的训练损失，第二项计算在合成图上的损失。</p><h2 id="5-8-复杂度分析"><a href="#5-8-复杂度分析" class="headerlink" title="5.8 复杂度分析"></a>5.8 复杂度分析</h2><p>我们方法的主要计算成本来自于去噪神经网络（生成模型）、图生成以及分类器训练（用于 <strong>CGenGA</strong> 中的分类器引导）。对于生成模型，时间编码函数 <strong>TE</strong> 的整体复杂度为 <script type="math/tex">O(2ndk)</script>，由于 <strong>SDN</strong> 和 <strong>DEN</strong> 采用GCN作为主干网络，因此每次训练迭代的成本约为 <script type="math/tex">O(4nkd)</script>，其中 <script type="math/tex">n</script> 是图中节点的数量，<script type="math/tex">k</script> 是节点属性的维度，<script type="math/tex">d</script> 是GCN层的维度。图生成阶段涉及 <strong>SDN</strong> 和 <strong>DEN</strong> 进行推理，总体生成一个图的成本约为 <script type="math/tex">O(4nkdT)</script>，其中 <script type="math/tex">T</script> 为扩散步骤数。使用GCN作为 <strong>CGenGA</strong> 中的分类器时，每次迭代的训练成本为 <script type="math/tex">O(2nkd)</script>。</p><h1 id="6-实验"><a href="#6-实验" class="headerlink" title="6 实验"></a>6 实验</h1><p>在本节中，我们进行了广泛的实验来回答以下研究问题：</p><ul><li><strong>RQ1</strong>: 生成的图在提升现有异常检测器性能方面有多大效果？</li><li><strong>RQ2</strong>: 分类器信号是否能够丰富生成的图？</li><li><strong>RQ3</strong>: 去噪神经网络中的残差连接和参数 <script type="math/tex">\lambda</script> 对性能提升有何影响？</li><li><strong>RQ4</strong>: 线性和余弦调度器对性能的影响如何？</li><li><strong>RQ5</strong>: 随着更多合成数据的加入，检测性能是否能进一步提高？</li><li><strong>RQ6</strong>: <strong>GenGA</strong> 和 <strong>CGenGA</strong> 能以多快的速度生成图？</li><li><strong>RQ7</strong>: <strong>GenGA</strong> 相比其他图数据增强方法效果如何（见附录A.3）？</li></ul><h2 id="6-1-实验设置"><a href="#6-1-实验设置" class="headerlink" title="6.1 实验设置"></a>6.1 实验设置</h2><p><strong>数据集</strong>: 我们包括了八个常用的图异常检测数据集进行评估。具体来说，这些数据集可以分为两类：一类是有机异常，包括 YelpChi、Reddit、Weibo、Tolokers 和 Questions；另一类是注入异常的数据集，如 BlogCatalog、ACM 和 Cora。数据集的统计信息如表2所示。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241023093504715.png" alt="image-20241023093504715"></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241023092546344.png" alt="image-20241023092546344"></p><p><strong>实现细节</strong>: 在所有实验中，我们将 <strong>SDN</strong> 和 <strong>DEN</strong> 中的GCN层的维度设置为256和128。我们在前向扩散过程中设置了1000个步骤。对于 <strong>CGenGA</strong>，我们实现了两层GCN作为指导分类器，对于 <strong>CONDAD</strong> 和 <strong>CoLA</strong>，我们根据标记节点上的结果确定其分类阈值。</p><p><strong>现有检测器</strong>: 为了评估我们生成的合成数据的有效性，我们采用了三种基于 GNN 的检测器，分别是基于 <strong>GCN</strong>、<strong>GAT</strong> 和 <strong>GraphSAGE</strong> 的方法；此外，还包括四种最新的半监督/监督异常检测器：<strong>BWGNN</strong>、<strong>GAT-sep</strong>、<strong>AMNet</strong>、<strong>GHRN</strong>，以及两种无监督检测器：<strong>CONAD</strong> 和 <strong>CoLA</strong>。除非特别说明，否则我们在实验中使用一个合成图。更多细节请参见附录A.2。</p><p><strong>图数据增强方法</strong>: 为了验证我们设计的基于扩散模型的图数据生成方法，我们将我们的模型与 <strong>VGAE</strong> 和非生成式图增强方法 <strong>GraphENS</strong> 进行比较，后者用于处理图中的类别不平衡学习问题。由于 <strong>GraphENS</strong> 和 <strong>VGAE</strong> 不涉及分类器引导训练，因此我们仅与 <strong>GenGA</strong> 进行比较。</p><p><strong>实验细节</strong>: 我们严格按照第5.7节的设置，在使用20%标记节点的场景下训练 <strong>CGenGA</strong> 和所有现有检测器（不包括 <strong>CONAD</strong> 和 <strong>CoLA</strong>）。</p><h2 id="6-2-异常检测性能提升-RQ1"><a href="#6-2-异常检测性能提升-RQ1" class="headerlink" title="6.2 异常检测性能提升 (RQ1)"></a>6.2 异常检测性能提升 (RQ1)</h2><p>表3、表4和表5（附录A中提供了更多数据）总结了检测器在加入合成图后的性能提升情况。通过引入 <strong>GenGA</strong>（蓝色高亮）和 <strong>CGenGA</strong>（红色高亮）生成的合成数据，所有检测器在五个有机数据集和三个注入数据集上的性能都有显著增强。我们观察到，在所有五个有机数据集和三个合成数据集上，所有检测器的性能都有显著提高。</p><p>值得注意的是，传统的三种 GNN 检测器（即 <strong>GCN</strong>、<strong>GAT</strong> 和 <strong>GraphSAGE</strong>）在所有四个评估指标上都有显著提升。这种显著的性能提升表明，通过在我们的合成数据上进行训练，这些 GNN 检测器在图异常检测中实现了更好的泛化能力，这些合成数据复制了给定图拓扑中的原始节点属性分布。</p><p>四种半监督/监督图异常检测器在所有指标上的性能提升幅度从0.1%到20%不等，而无监督检测器的 AUC 分数平均提高了4%以上。不同检测器的性能差距进一步表明，合成数据对检测器有不同的影响。我们推测，这可能是由于每种方法在学习数据分布和吸收合成信息方面的能力不同所致。总体而言，我们在八个数据集上的实验结果表明，我们生成的合成数据能够显著提高异常检测器的性能。</p><h2 id="6-3-分类器引导对图生成的影响-RQ2"><a href="#6-3-分类器引导对图生成的影响-RQ2" class="headerlink" title="6.3 分类器引导对图生成的影响 (RQ2)"></a>6.3 分类器引导对图生成的影响 (RQ2)</h2><h3 id="6-3-1-分类器引导对检测性能的影响"><a href="#6-3-1-分类器引导对检测性能的影响" class="headerlink" title="6.3.1 分类器引导对检测性能的影响"></a>6.3.1 分类器引导对检测性能的影响</h3><p>我们首先比较了 <strong>GenGA</strong> 和 <strong>CGenGA</strong> 之间的性能提升，来探讨分类器引导对图生成的隐性影响。通过表中的结果可以看到，源自预训练 <strong>GCN</strong> 分类器的类别信息可以进一步提升某些数据集上的检测性能。特别是在特定的数据集上，使用 <strong>CGenGA</strong> 生成的合成图相比 <strong>GenGA</strong> 带来了更好的检测效果。然而，总体来看，<strong>CGenGA</strong> 的性能提升与 <strong>GenGA</strong> 相差不大。我们认为这可能有以下两个主要原因：</p><ol><li>尽管分类器引导可以为图生成注入标签信息，但这种标签信息隐性地限制了在已知标签条件下生成节点特征的多样性。当分类器提供具体标签时，生成的数据特征可能趋于更加集中于这些标签的分布，从而减少了生成数据的多样性。</li><li>预训练分类器的能力也会影响通过公式 (18) 派生的梯度信息 <script type="math/tex">g</script>，从而对生成特征的均值产生偏移。这意味着分类器的表现和能力也决定了生成图的质量和多样性。</li></ol><p>与图像生成任务中的分类器引导不同，图像生成（如文献[5]中的 <strong>ResNet</strong>[14]）能够准确预测不同的类别标签。在图异常检测中，我们期望图生成的复杂度更高，且异常节点的检测效果可以进一步提升。因此，如何更好地利用分类器引导生成高质量图仍是一个值得深入研究的方向。</p><h3 id="6-3-2-分类器引导对生成图质量的影响"><a href="#6-3-2-分类器引导对生成图质量的影响" class="headerlink" title="6.3.2 分类器引导对生成图质量的影响"></a>6.3.2 分类器引导对生成图质量的影响</h3><p>除了检测性能外，我们还通过 <strong>Fréchet Inception Distance (FID)</strong> 量化生成图的质量。FID 是一种用于衡量生成数据与真实数据分布相似性的广泛使用的测量方法，计算公式如下：</p><script type="math/tex; mode=display">\text{FID} = ||\mu - \mu'||_2^2 + \text{Tr}(\Sigma + \Sigma' - 2(\Sigma \Sigma')^{1/2})</script><p>其中，<script type="math/tex">\mu</script> 和 <script type="math/tex">\mu'</script> 分别是原始数据和生成数据特征的均值，<script type="math/tex">\Sigma</script> 和 <script type="math/tex">\Sigma'</script> 是相应的协方差矩阵。直观地理解，FID 分数越低，表示生成数据与原始数据的分布越接近，质量越高。</p><p>从表6的结果可以看出，分类器引导能够在所有数据集上降低 FID 得分，尽管提升幅度不大。与我们之前对检测性能的分析类似，这种微小的提升可以归因于分类器提供的弱信息，而这些信息对生成图的整体影响较小，这也值得进一步深入研究。</p><h2 id="6-4-残差连接的消融研究-RQ3"><a href="#6-4-残差连接的消融研究-RQ3" class="headerlink" title="6.4 残差连接的消融研究 (RQ3)"></a>6.4 残差连接的消融研究 (RQ3)</h2><p>如第5.3节所述，我们在 <strong>SDN</strong> 和 <strong>DEN</strong> 之间设计了残差连接，目的是缓解在消息传递过程中节点表示的过度平滑现象。为了验证这种设计的有效性，我们在 Cora 数据集上进行了消融实验，比较了使用残差连接和不使用残差连接的 <strong>GenGA</strong> 生成的合成图对 <strong>GCN</strong> 性能的提升。具体来说，我们对比了使用残差连接的 <strong>GenGA</strong> 和不带残差连接的 <strong>GenGA w/o R</strong>（即没有残差连接的 <strong>GenGA</strong>）。如图4所示，带有残差连接的 <strong>GenGA</strong> 在所有评估指标上都优于 <strong>GenGA w/o R</strong>，这进一步验证了残差连接在提升检测性能中的有效性。</p><h2 id="6-5-参数-lambda-的影响-RQ3"><a href="#6-5-参数-lambda-的影响-RQ3" class="headerlink" title="6.5 参数 \lambda 的影响 (RQ3)"></a>6.5 参数 <script type="math/tex">\lambda</script> 的影响 (RQ3)</h2><p>公式 (18) 中的超参数 <script type="math/tex">\lambda</script> 控制分类器梯度的缩放。通过增加 <script type="math/tex">\lambda</script> 的值，生成数据的均值会发生较大的偏移，而减小 <script type="math/tex">\lambda</script> 则减少偏移。这意味着 <script type="math/tex">\lambda</script> 在生成数据中的作用非常重要，因为它直接影响生成数据与原始数据分布的相似性。</p><p>为了评估 <script type="math/tex">\lambda</script> 对生成数据质量的影响，我们在 Cora 和 Weibo 数据集上进行了实验，分别调整 <script type="math/tex">\lambda</script> 的取值范围（从0.2到2.0），并测量 FID 分数。结果如图5所示，随着 <script type="math/tex">\lambda</script> 的增加，Cora 数据集的 FID 分数也逐步增加，这表明过多的分类器信号会使生成数据偏离原始分布。然而，Weibo 数据集的结果显示，增加 <script type="math/tex">\lambda</script> 反而降低了 FID 分数，这表明更大的分类器信号使生成数据与原始数据的分布更加接近。</p><p>通过比较两个数据集上 GCN 分类器的检测性能，我们观察到 GCN 在 Weibo 数据集上的表现优于 Cora。这暗示了 GCN 分类器能够更好地捕捉 Weibo 数据集上的数据分布特征，导致在这两个数据集上的 FID 分数差异。</p><h2 id="6-6-噪声调度器的影响-RQ4"><a href="#6-6-噪声调度器的影响-RQ4" class="headerlink" title="6.6 噪声调度器的影响 (RQ4)"></a>6.6 噪声调度器的影响 (RQ4)</h2><p>噪声调度器决定了在前向扩散过程中添加到节点特征上的噪声量。在本次实验中，我们研究了两种常用的噪声调度器（线性调度器和余弦调度器）对图异常检测性能的影响。我们在四个数据集上进行了实验，并在图7中展示了结果。具体来说，我们在两个噪声调度器下训练 <strong>GenGA</strong>，并进一步使用生成的图来训练 <strong>GCN</strong> 分类器。</p><p>结果显示，余弦调度器在大多数情况下表现优于线性调度器，特别是在 Reddit 数据集上的 F1 得分方面线性调度器稍稍占优。总体而言，余弦调度器表现更加稳定，在图生成过程中能更好地控制噪声的增加。</p><h2 id="6-7-使用更多合成图对性能的影响-RQ5"><a href="#6-7-使用更多合成图对性能的影响-RQ5" class="headerlink" title="6.7 使用更多合成图对性能的影响 (RQ5)"></a>6.7 使用更多合成图对性能的影响 (RQ5)</h2><p>对于 <strong>RQ5</strong>，我们研究了通过使用更多生成图进行训练是否能进一步提高检测器的性能。图6展示了在四个数据集上的结果，显示增加生成图的数量对性能提升有限，甚至在某些情况下（如 Cora 和 Weibo 数据集）还会导致检测性能的下降。</p><p>我们推测，这可能是由于生成图的多样性不足，生成的大量图并未能显著扩展现有数据集中的信息。这也表明，生成更加多样化的图将成为我们未来研究的重点，旨在提高数据的多样性，从而进一步提升检测器的性能。</p><h2 id="6-8-时间成本-RQ6"><a href="#6-8-时间成本-RQ6" class="headerlink" title="6.8 时间成本 (RQ6)"></a>6.8 时间成本 (RQ6)</h2><p>我们在表7中报告了生成一个图所需的平均时间（以秒为单位）。结果显示，由于 <strong>GenGA</strong> 不涉及分类器信号，采样速度快于 <strong>CGenGA</strong>。尽管 <strong>CGenGA</strong> 在生成过程中包含了额外的分类器引导，但两种方法的图生成速度都非常高效。最坏情况下，生成一个图的时间不超过160秒，这意味着无论采用哪种方法，我们都能够快速生成图数据来增强现有检测器的性能。</p><h1 id="7-结论"><a href="#7-结论" class="headerlink" title="7 结论"></a>7 结论</h1><p>图异常检测在图机器学习的发展中取得了显著进展，但现有的工作主要集中于构建更强大的检测模型，而忽略了数据的稀缺性及由此引发的数据特定挑战，认为它是预先假定的条件。与现有工作相比，我们提出了一种新的基于数据的中心化方法，以缓解图异常检测领域中训练数据稀缺的问题。通过对前向图扩散过程的严格分析，我们确定了设计用于图生成的去噪神经网络的两个原则，并提出了 <strong>GenGA</strong> 和 <strong>CGenGA</strong> 来合成额外的图数据。我们在八个广泛使用的数据集上进行了大量实验，结果表明，使用我们生成的图数据可以进一步提升现有最先进检测器的性能，这展示了我们数据中心化方法的潜力。</p><h2 id="限制与未来工作"><a href="#限制与未来工作" class="headerlink" title="限制与未来工作"></a>限制与未来工作</h2><p>从七个研究问题的案例研究中，我们揭示了模型设计潜在的改进方向，并明确了未来工作的研究方向，具体包括：</p><ol><li>引入更有效的分类器引导机制以改进图生成；</li><li>改进采样速度/减少采样步骤；</li><li>提高生成图的多样性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multitask Active Learning for Graph Anomaly Detection</title>
      <link href="/2024/10/23/MITIGATE/"/>
      <url>/2024/10/23/MITIGATE/</url>
      
        <content type="html"><![CDATA[<p>文献地址：<a href="https://arxiv.org/pdf/2401.13210">Multitask Active Learning for Graph Anomaly Detection</a></p><p>代码仓库：<a href="https://github.com/AhaChang/MITIGATE">AhaChang/MITIGATE</a></p><p>文献介绍了一种名为 MITIGATE 的多任务主动学习框架，用于在图结构数据中进行异常检测。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>现有的图神经网络（GNN）在异常检测中面临的一个主要挑战是缺乏足够的标注数据，这导致模型性能不稳定。</p><h3 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h3><ul><li>无监督方法通常依赖于数据的分布模式，但如果数据偏离假设的分布，其性能会明显下降。</li><li>图结构数据的复杂性以及手动标注正常节点和异常节点的高成本，限制了完全监督学习的应用。由于获取充足的标签非常昂贵，因此需要探索能够利用有限监督信号的学习范式。</li></ul><h3 id="MITIGATE框架"><a href="#MITIGATE框架" class="headerlink" title="MITIGATE框架"></a>MITIGATE框架</h3><p>该框架通过结合节点分类任务来检测异常，主要创新点包括：</p><ol><li><strong>多任务学习</strong>：MITIGATE 利用了<strong>节点分类任务</strong>的监督信号来帮助异常检测，特别是在没有已知异常的情况下，通过分类任务检测分布外的节点。</li><li><strong>动态信息性度量</strong>：通过不同任务之间的<strong>置信度差异</strong>来度量节点的<strong>信息性</strong>，从而选择那些提供有用信息但不会过于复杂的样本进行训练。</li><li><strong>掩码聚合机制</strong>：为了解决图结构中节点间的关系，MITIGATE 采用了一种<strong>掩码聚合机制</strong>来度量节点的代表性，考虑了节点的固有特性和已标注状态。</li></ol><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>MITIGATE 在四个数据集上的实验结果表明，该方法在异常检测任务中显著优于现有的最先进方法。它不仅能够更有效地利用有限的标签数据，还通过主动查询策略来选择最有代表性和信息性的节点进行标注，从而提升了模型性能。</p><h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><ul><li>提出了 MITIGATE 框架，通过结合外部监督信号和主动查询策略，在有限的标注预算下进行图异常检测。</li><li>设计了一种动态的节点选择策略，基于置信度差异和代表性来选择最有价值的节点。</li><li>在多个数据集上的实验验证了该方法的有效性，并且在 AUC-ROC 和 AUC-PR 等指标上显著优于其他方法。</li></ul><p>MITIGATE 框架的关键在于如何通过多任务学习和主动学习相结合，提升图异常检测的效率，同时降低标注成本。</p><h1 id="2-问题定义"><a href="#2-问题定义" class="headerlink" title="2. 问题定义"></a>2. 问题定义</h1><p>在本节中定义了基于主动学习的图异常检测问题。</p><p>设 <script type="math/tex">G = (V, A, X)</script> 为一个属性图，其中 <script type="math/tex">V = \{v_1, v_2, \dots, v_n\}</script> 是节点集合，<script type="math/tex">A \in \{0, 1\}^{n \times n}</script> 为邻接矩阵，<script type="math/tex">X \in \mathbb{R}^{n \times k}</script> 为节点属性矩阵。需要注意的是，在现实世界中异常标签很少，但部分分类标签是可以获取的。我们将被标注为分类任务的节点集合记为 <script type="math/tex">V_N^L</script>，对应的标签为 <script type="math/tex">Y_N^L \in \mathbb{R}^{n \times C}</script>，其中 <script type="math/tex">C</script> 表示类别数。节点 <script type="math/tex">v_i</script> 的分类标签为独热标签 <script type="math/tex">y_N^i</script>。异常检测标签记为 <script type="math/tex">Y_t^L \in \{0, 1\}</script>，表示第 <script type="math/tex">t</script> 次迭代中节点是否为正常或异常，节点 <script type="math/tex">v_i</script> 的异常检测标签为 <script type="math/tex">y_A^i</script>。</p><p>我们初始化一个分类标签节点的集合，即 <script type="math/tex">V_0^L = V_N^L</script>，并将它们视为正常节点，<script type="math/tex">Y_0^L = \{0\}</script>。</p><p>我们在附录 A 中总结了本文的关键符号。</p><p>给定一个属性图 <script type="math/tex">G</script>、一个查询策略 <script type="math/tex">Q</script>、一个标注预算 <script type="math/tex">B</script>，基于主动学习的异常检测算法的目标是在每次选择后从未标注节点集合 <script type="math/tex">V_t^U</script> 中选择一个子集 <script type="math/tex">S_t</script>，并标注它们，以最小化模型 <script type="math/tex">M</script> 的损失：</p><script type="math/tex; mode=display">\min_{V_t^L} L(M, Q | G, Y_t^L, Y_N^L)</script><p>其中 <script type="math/tex">V_t^L = V_{t-1}^L \cup S_t</script>，且 <script type="math/tex">V_t^U = V_{t-1}^U \setminus S_t</script>，分别为第 <script type="math/tex">t</script> 次选择后的已标注集合和未标注集合。<script type="math/tex">t \in \{1, 2, \dots, B/b\}</script>，<script type="math/tex">b</script> 是每次迭代中的预算。接着，图 <script type="math/tex">G</script>、分类标签 <script type="math/tex">Y_N^L</script> 以及异常检测标签 <script type="math/tex">y_A^i</script> 将用于训练模型 <script type="math/tex">M</script>。为了方便起见，我们将标注预算定义为允许标注的最大节点数。</p><h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3. 方法"></a>3. 方法</h1><p>在本节中，我们介绍了提出的 MITIGATE 框架。首先，我们概述整个框架，然后详细说明选择策略，包括用于聚类的距离特征计算和跨任务置信度差异的计算，最后介绍 MITIGATE 的训练过程。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241021221044470.png" alt="image-20241021221044470"></p><h2 id="3-1-框架概述"><a href="#3-1-框架概述" class="headerlink" title="3.1 框架概述"></a>3.1 框架概述</h2><p>MITIGATE 的工作流程如图 1 所示。它利用一个共享的编码器来进行节点表示学习，并分别为节点分类和异常评分预测设计了两个解码器。考虑到多任务结构，我们设计了一种基于任务间置信度差异的节点信息性度量。为了减少初始的性能差距，我们将分类不确定性纳入信息性评分的计算中。为了在每一步中提升节点选择的多样性，我们采用了 K-Medoids 聚类算法，将聚类中心视为代表性样本，并引入了一种基于掩码聚合的新颖距离度量。随后，我们从这些中心中选择信息性得分最高的节点，提供给专家标注，确定它们是否为异常节点。最后，选择的节点集将加入已标注集，继续训练模型。</p><p>MITIGATE 的整体框架由以下几个核心部分组成：</p><ul><li><strong>编码器</strong>：用于学习节点的表示。</li><li><strong>节点分类器</strong>：用于预测节点类别，利用分类结果的不确定性进行异常检测。</li><li><strong>异常评分预测器</strong>：用于给每个节点打分，判断其是否异常。</li><li><strong>混合异常评分</strong>：结合分类器和异常评分预测器的结果，生成最终的异常评分。</li></ul><h2 id="MITIGATE-算法流程介绍"><a href="#MITIGATE-算法流程介绍" class="headerlink" title="MITIGATE 算法流程介绍"></a>MITIGATE 算法流程介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241021221429325.png" alt="image-20241021221429325" style="zoom:50%;" /></p><h3 id="输入参数："><a href="#输入参数：" class="headerlink" title="输入参数："></a><strong>输入参数：</strong></h3><ul><li><strong>图结构数据：</strong> <script type="math/tex">G = (V, A, X)</script>，其中<script type="math/tex">V</script>是节点集合，<script type="math/tex">A</script>是邻接矩阵，<script type="math/tex">X</script>是节点属性矩阵。</li><li><strong>查询批次大小：</strong> <script type="math/tex">b</script>，每次迭代中需要查询的节点数量。</li><li><strong>总预算：</strong> <script type="math/tex">B</script>，最大允许查询的节点数。</li><li><strong>节点分类任务的已标注集合：</strong> <script type="math/tex">V^L_N</script>，已标注用于分类的节点集合。</li><li><strong>聚类的簇数：</strong> <script type="math/tex">m</script>，K-Medoids 聚类中的簇数。</li></ul><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a><strong>输出：</strong></h3><ul><li><strong>异常评分：</strong> <script type="math/tex">s</script>，算法为每个节点输出的最终异常评分。</li></ul><h3 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a><strong>算法步骤：</strong></h3><ol><li><p><strong>初始化标注和未标注集合：</strong></p><ul><li>将初始分类任务中的已标注节点集合设置为 <script type="math/tex">V^0_L = V^L_N</script>，未标注集合为 <script type="math/tex">V^0_U = V \setminus V^L_N</script>，即图中所有未标注的节点。</li></ul></li><li><p><strong>开始迭代：</strong></p><ul><li>迭代从 <script type="math/tex">t = 1</script> 到 <script type="math/tex">\frac{B}{b}</script>，每次迭代从未标注节点集合中选择 <script type="math/tex">b</script> 个节点进行标注。</li></ul></li><li><p><strong>训练模型：</strong></p><ul><li>使用当前标注集合 <script type="math/tex">V^{t-1}_L</script> 和初始标注集合 <script type="math/tex">V^L_N</script> 训练模型 <script type="math/tex">M</script>。</li></ul></li><li><p><strong>计算掩码聚合距离特征：</strong></p><ul><li>通过掩码聚合机制计算节点的距离特征 <script type="math/tex">\hat{H}</script>，以考虑节点的邻域信息和标注状态。</li></ul></li><li><p><strong>计算未标注节点之间的距离：</strong></p><ul><li>对未标注节点集合 <script type="math/tex">V^{t-1}_U</script> 中的每一对节点 <script type="math/tex">v_i</script> 和 <script type="math/tex">v_j</script> 计算距离 <script type="math/tex">\text{dist}(v_i, v_j)</script>。</li></ul></li><li><p><strong>进行 K-Medoids 聚类：</strong></p><ul><li>对未标注节点集合 <script type="math/tex">V^{t-1}_U</script> 进行 K-Medoids 聚类，生成 <script type="math/tex">m</script> 个簇中心。</li></ul></li><li><p><strong>计算置信度差异和信息性得分：</strong></p><ul><li>使用公式 (11) 和 (12) 计算每个节点的置信度差异 <script type="math/tex">d</script> 和信息性得分 <script type="math/tex">Info</script>。</li></ul></li><li><p><strong>选择信息性得分最高的节点：</strong></p><ul><li>根据信息性得分从每个簇中选择 <script type="math/tex">b</script> 个信息性得分最高的簇中心组成 <script type="math/tex">S_t</script>，这些节点将被标注。</li></ul></li><li><p><strong>查询专家进行标注：</strong></p><ul><li>向专家查询 <script type="math/tex">S_t</script> 中节点的标签，并标注这些节点是否为异常。</li></ul></li><li><p><strong>更新标注和未标注集合：</strong></p><ul><li>将新标注的节点集合 <script type="math/tex">S_t</script> 加入已标注集合 <script type="math/tex">V^t_L = V^{t-1}_L \cup S_t</script>，从未标注集合 <script type="math/tex">V^t_U = V^{t-1}_U \setminus S_t</script> 中移除这些节点。</li></ul></li><li><p><strong>重复训练：</strong></p><ul><li>在所有迭代完成后，使用最终标注集合 <script type="math/tex">V^B_L</script> 和初始分类标注集合 <script type="math/tex">V^L_N</script> 再次训练模型 <script type="math/tex">M</script>。</li></ul></li><li><p><strong>计算总体异常评分：</strong></p><ul><li>最终使用公式 (6) 计算每个节点的异常评分 <script type="math/tex">s</script>，结合节点分类器和异常评分预测器的结果生成最终的异常检测分数。</li></ul></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>MITIGATE 算法通过多任务学习和主动学习相结合，逐步从未标注数据中挑选最有代表性和信息性的节点进行标注，并在每次迭代中通过分类器和异常评分预测器共同完成异常检测。在每次迭代中，使用掩码聚合特征和 K-Medoids 聚类选出代表性节点，然后依据置信度差异选择最有价值的节点进行标注，最终获得准确的异常评分。</p><h3 id="3-1-1-编码器"><a href="#3-1-1-编码器" class="headerlink" title="3.1.1 编码器"></a>3.1.1 编码器</h3><p>编码器的目的是将图的拓扑结构和节点属性映射到潜在空间中。我们采用图卷积网络（GCN）来学习节点表示，其层级传播定义如下：</p><script type="math/tex; mode=display">H^{(l+1)} = \sigma \left( D^{-\frac{1}{2}} \tilde{A} D^{-\frac{1}{2}} H^{(l)} W^{(l)} \right)</script><p>其中，<script type="math/tex">\tilde{A} = A + I</script>，<script type="math/tex">D</script> 为度矩阵，<script type="math/tex">I</script> 是单位矩阵，<script type="math/tex">W^{(l)}</script> 是第 <script type="math/tex">l</script> 层的权重矩阵，<script type="math/tex">H^{(l)}</script> 为第 <script type="math/tex">l</script> 层的节点表示，<script type="math/tex">\sigma</script> 是激活函数。</p><h3 id="3-1-2-节点分类器"><a href="#3-1-2-节点分类器" class="headerlink" title="3.1.2 节点分类器"></a>3.1.2 节点分类器</h3><p>节点分类器采用一个图卷积层，进一步保留中间节点表示的结构信息，公式如下：</p><script type="math/tex; mode=display">Z = \sigma \left( D^{-\frac{1}{2}} \tilde{A} D^{-\frac{1}{2}} H W_N \right)</script><p>其中，<script type="math/tex">H</script> 是编码器的最终输出，<script type="math/tex">W_N</script> 是节点分类器的权重矩阵。由于异常节点在分类过程中往往具有较高的不确定性，我们采用熵作为异常概率的衡量标准，熵得分越高，节点越有可能为异常节点。节点分类器对节点 <script type="math/tex">v_i</script> 的熵得分为：</p><script type="math/tex; mode=display">e_i = -\sum_{j=1}^{C} z_{ij} \log z_{ij}</script><h3 id="3-1-3-异常评分预测器"><a href="#3-1-3-异常评分预测器" class="headerlink" title="3.1.3 异常评分预测器"></a>3.1.3 异常评分预测器</h3><p>异常评分预测器基于共享的节点表示，通过线性变换和 Sigmoid 函数来生成异常评分，公式如下：</p><script type="math/tex; mode=display">p = \text{Sigmoid}(W_A H + b_A)</script><p>其中，<script type="math/tex">p \in \mathbb{R}^n</script> 为预测的异常评分，<script type="math/tex">W_A</script> 为权重矩阵，<script type="math/tex">b_A</script> 为偏置项。</p><h3 id="3-1-4-混合异常评分"><a href="#3-1-4-混合异常评分" class="headerlink" title="3.1.4 混合异常评分"></a>3.1.4 混合异常评分</h3><p>考虑到节点分类器和异常评分预测器都有能力检测异常节点，我们采用加权评分函数，将两个预测结果结合生成最终异常评分，公式如下：</p><script type="math/tex; mode=display">s = \text{Norm}(e) + \phi \cdot \text{Norm}(p)</script><p>其中，<script type="math/tex">s \in \mathbb{R}^n</script> 为总体异常评分，<script type="math/tex">\text{Norm}(e)</script> 和 <script type="math/tex">\text{Norm}(p)</script> 分别为熵得分和异常评分的标准化结果，<script type="math/tex">\phi</script> 是权重超参数，用于平衡两个预测结果的重要性。</p><h2 id="3-2-节点选择"><a href="#3-2-节点选择" class="headerlink" title="3.2 节点选择"></a>3.2 节点选择</h2><p>为了提升统一框架在异常检测中的整体表现，我们根据代表性和信息性来衡量节点的价值。</p><h4 id="3-2-1-基于距离的聚类"><a href="#3-2-1-基于距离的聚类" class="headerlink" title="3.2.1 基于距离的聚类"></a>3.2.1 基于距离的聚类</h4><p>为了从大量未标注数据池中发现具有代表性的样本，我们设计了一种掩码聚合机制，用于生成考虑邻域特征和已标注节点状态的距离特征。传统的欧几里得距离常用于表示间的距离计算，但在图结构中，直接聚合邻域信息可能会掩盖中心节点的特征。因此，我们通过掩码聚合机制来计算距离特征，具体公式为：</p><script type="math/tex; mode=display">\hat{h}_i^t = \frac{\text{SUM}(h_j, \forall v_j \in N(v_i) \cap V_U^{t-1})}{|N(v_i)|} + h_i</script><p>其中，<script type="math/tex">N(v_i)</script> 是节点 <script type="math/tex">v_i</script> 的邻居集合，<script type="math/tex">V_U^{t-1}</script> 是第 <script type="math/tex">t-1</script> 次选择后的未标注节点集合。节点 <script type="math/tex">v_i</script> 和 <script type="math/tex">v_j</script> 之间的距离计算公式为：</p><script type="math/tex; mode=display">\text{dist}(v_i, v_j) = || \hat{h}_i^t - \hat{h}_j^t ||^2</script><h4 id="3-2-2-置信度差异"><a href="#3-2-2-置信度差异" class="headerlink" title="3.2.2 置信度差异"></a>3.2.2 置信度差异</h4><p>节点分类器和异常评分预测器的置信度可以用于识别异常。节点分类器的预测熵得分越高，置信度越低，异常评分预测器的异常得分越高，置信度越高。我们使用曼哈顿距离来量化两个任务之间的置信度差异，公式如下：</p><script type="math/tex; mode=display">d = |c_A - c_N|</script><p>其中，<script type="math/tex">c_N</script> 和 <script type="math/tex">c_A</script> 分别表示节点分类器和异常评分预测器的置信度。</p><h4 id="3-2-3-节点选择"><a href="#3-2-3-节点选择" class="headerlink" title="3.2.3 节点选择"></a>3.2.3 节点选择</h4><p>为了从未标注节点集合中选择合适的样本进行标注，我们引入了一种基于时间动态变化的节点信息性度量。初期，节点分类器为异常检测提供初始预测，随着训练的进行，我们逐渐转向关注置信度差异较大的节点。信息性得分的计算公式为：</p><script type="math/tex; mode=display">Info = \tau |V_L^t| \text{Norm}(e) + (1 - \tau |V_L^t|) d</script><p>其中，<script type="math/tex">|V_L^t|</script> 表示第 <script type="math/tex">t</script> 次迭代中已标注节点的数量，<script type="math/tex">\tau</script> 是衰减参数。该信息性评分首先受异常影响较大，随着训练的深入，转而关注任务之间预测冲突的节点。</p><h2 id="3-3-模型训练"><a href="#3-3-模型训练" class="headerlink" title="3.3 模型训练"></a>3.3 模型训练</h2><p>在每次查询后，MITIGATE 的训练通过优化三个方面来持续进行。首先，在预先标注的节点上，我们对节点分类进行交叉熵损失计算：</p><script type="math/tex; mode=display">L_{nc} = -\frac{1}{|V_N^L|} \sum_{v_i \in V_N^L} \sum_{j=0}^{C} y_{N_i}^j \log z_i^j</script><p>接下来，我们在每次迭代中的标注节点上，对异常检测进行加权的二元交叉熵损失计算：</p><script type="math/tex; mode=display">L_{ad} = -\frac{1}{|V_L^t|} \sum_{v_i \in V_L^t} \left( \gamma_t y_A^i \log p_i + (1 - y_A^i) \log(1 - p_i) \right)</script><p>其中，<script type="math/tex">\gamma_t</script> 是异常节点相对于正常节点的比例。</p><p>最后，我们通过优化已标注节点集合上的分类预测不确定性，进一步提升异常检测的效果：</p><script type="math/tex; mode=display">L_{un} = -\frac{1}{|V_L^N|} \sum_{v_i \in V_L^N} \sum_{k} z_{ik} \log z_{ik} + \frac{1}{|V_L^A|} \sum_{v_j \in V_L^A} \sum_{k} z_{jk} \log z_{jk}</script><p>综合来说，MITIGATE 的总体损失函数为：</p><script type="math/tex; mode=display">L = \alpha \cdot L_{nc} + \beta \cdot L_{ad} + L_{un}</script><p>其中，<script type="math/tex">\alpha</script> 和 <script type="math/tex">\beta</script> 为损失函数的权重参数。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据集处理</title>
      <link href="/2024/10/21/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2024/10/21/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>YelpChi数据集：基于Yelp数据集上的一个行为图数据集，数据集中的数据以稀疏矩阵的形式存在。该数据集经常用于节点分类、欺诈检测、异常检测等的研究任务上。</p><p>Yelp垃圾评论数据集包括Yelp过滤(垃圾)和推荐(合法)的酒店和餐厅评论。Yelp-Fraud数据集上执行一个垃圾邮件审查检测任务，该任务是一个二元分类任务。YelpChi从SpEagle上提取了32个手工特性作为Yelp-Fraud的原始节点特性，基于前人研究发现意见欺假者在用户、产品、评论文本、时间等方面存在联系，将评论作为图中的节点，设计了三种关系:R-U-R:连接同一用户发布的评论;R-S-R:连接同一产品同一星级(1-5星)下的评论;R-T-R:连接同一个月发布的同一产品下的两个评论。</p><h1 id="数据集预处理"><a href="#数据集预处理" class="headerlink" title="数据集预处理"></a>数据集预处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置数据文件的路径前缀</span></span><br><span class="line">prefix = <span class="string">&#x27;data/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 &#x27;YelpChi.mat&#x27; 文件中加载数据，返回一个包含数据的字典</span></span><br><span class="line">yelp = loadmat(<span class="string">&#x27;data/YelpChi.mat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载不同类型的图结构数据</span></span><br><span class="line">net_rur = yelp[<span class="string">&#x27;net_rur&#x27;</span>]  <span class="comment"># 加载网状结构 &#x27;rur&#x27;（例如，用户-用户之间的关系网络）</span></span><br><span class="line">net_rtr = yelp[<span class="string">&#x27;net_rtr&#x27;</span>]  <span class="comment"># 加载网状结构 &#x27;rtr&#x27;（例如，评论-评论之间的关系网络）</span></span><br><span class="line">net_rsr = yelp[<span class="string">&#x27;net_rsr&#x27;</span>]  <span class="comment"># 加载网状结构 &#x27;rsr&#x27;（例如，服务-服务之间的关系网络）</span></span><br><span class="line">yelp_homo = yelp[<span class="string">&#x27;homo&#x27;</span>]  <span class="comment"># 加载同构网络（例如，将所有关系混合成一个同构图）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将稀疏矩阵转换为邻接表并保存为pickle文件</span></span><br><span class="line">sparse_to_adjlist(net_rur, prefix + <span class="string">&#x27;yelp_rur_adjlists.pickle&#x27;</span>)  <span class="comment"># 将 &#x27;rur&#x27; 网络转换为邻接表，并保存为 pickle 文件</span></span><br><span class="line">sparse_to_adjlist(net_rtr, prefix + <span class="string">&#x27;yelp_rtr_adjlists.pickle&#x27;</span>)  <span class="comment"># 将 &#x27;rtr&#x27; 网络转换为邻接表，并保存为 pickle 文件</span></span><br><span class="line">sparse_to_adjlist(net_rsr, prefix + <span class="string">&#x27;yelp_rsr_adjlists.pickle&#x27;</span>)  <span class="comment"># 将 &#x27;rsr&#x27; 网络转换为邻接表，并保存为 pickle 文件</span></span><br><span class="line">sparse_to_adjlist(yelp_homo, prefix + <span class="string">&#x27;yelp_homo_adjlists.pickle&#x27;</span>)  <span class="comment"># 将同构网络转换为邻接表，并保存为 pickle 文件</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sparse_to_adjlist</span>(<span class="params">sp_matrix, filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将稀疏矩阵转换为邻接表并将其保存为pickle文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param sp_matrix: 输入的稀疏矩阵，表示图的边信息。</span></span><br><span class="line"><span class="string">    :param filename: 保存邻接表的文件名（以pickle格式保存）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 添加自环（self-loop）到稀疏矩阵中，即对角线元素置为1</span></span><br><span class="line">    homo_adj = sp_matrix + sp.eye(sp_matrix.shape[<span class="number">0</span>])  <span class="comment"># sp.eye 创建对角线为1的单位矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化一个空的邻接表，使用字典结构，字典的键是节点，值是与该节点相邻的节点集合</span></span><br><span class="line">    adj_lists = defaultdict(<span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取稀疏矩阵中非零元素的位置，即图中的边</span></span><br><span class="line">    edges = homo_adj.nonzero()  <span class="comment"># 返回非零元素的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历所有的边，将其转化为邻接表表示</span></span><br><span class="line">    <span class="keyword">for</span> index, node <span class="keyword">in</span> <span class="built_in">enumerate</span>(edges[<span class="number">0</span>]):</span><br><span class="line">       adj_lists[node].add(edges[<span class="number">1</span>][index])  <span class="comment"># 将边的终点添加到起点的邻接列表中</span></span><br><span class="line">       adj_lists[edges[<span class="number">1</span>][index]].add(node)  <span class="comment"># 同时将起点添加到终点的邻接列表中，保证无向图的对称性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将生成的邻接表保存为pickle文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">       pickle.dump(adj_lists, file)  <span class="comment"># 使用pickle将邻接表序列化保存</span></span><br><span class="line">    file.close()  <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="加载给定数据集名称的图、特征和标签"><a href="#加载给定数据集名称的图、特征和标签" class="headerlink" title="加载给定数据集名称的图、特征和标签"></a>加载给定数据集名称的图、特征和标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">data, prefix=<span class="string">&#x27;data/&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Load graph, feature, and label given dataset name</span></span><br><span class="line"><span class="string">    :returns: home and single-relation graphs, feature, label</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">&#x27;yelp&#x27;</span>:</span><br><span class="line">       data_file = loadmat(prefix + <span class="string">&#x27;YelpChi.mat&#x27;</span>)</span><br><span class="line">       labels = data_file[<span class="string">&#x27;label&#x27;</span>].flatten()</span><br><span class="line">       feat_data = data_file[<span class="string">&#x27;features&#x27;</span>].todense().A</span><br><span class="line">       <span class="comment"># load the preprocessed adj_lists</span></span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;yelp_homo_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          homo = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;yelp_rur_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          relation1 = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;yelp_rtr_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          relation2 = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;yelp_rsr_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          relation3 = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">    <span class="keyword">elif</span> data == <span class="string">&#x27;amazon&#x27;</span>:</span><br><span class="line">       data_file = loadmat(prefix + <span class="string">&#x27;Amazon.mat&#x27;</span>)</span><br><span class="line">       labels = data_file[<span class="string">&#x27;label&#x27;</span>].flatten()</span><br><span class="line">       feat_data = data_file[<span class="string">&#x27;features&#x27;</span>].todense().A</span><br><span class="line">       <span class="comment"># load the preprocessed adj_lists</span></span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;amz_homo_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          homo = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;amz_upu_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          relation1 = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;amz_usu_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          relation2 = pickle.load(file)</span><br><span class="line">       file.close()</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(prefix + <span class="string">&#x27;amz_uvu_adjlists.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">          relation3 = pickle.load(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [homo, relation1, relation2, relation3], feat_data, labels</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC-GNN</title>
      <link href="/2024/10/18/PCGNN/"/>
      <url>/2024/10/18/PCGNN/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://dl.acm.org/doi/pdf/10.1145/3442381.3449989">Pick and Choose: A GNN-based Imbalanced Learning Approach for Fraud Detection (acm.org)</a></p><p>代码仓库：<a href="https://github.com/PonderLY/PC-GNN">PonderLY/PC-GNN: (WWW 2021) Source code of PC-GNN (github.com)</a></p><h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><p>图结构中的欺诈节点数量通常远少于正常节点，导致传统的图神经网络在处理这种不平衡数据时表现不佳，特别是难以识别重要的少数类。</p><h1 id="2-贡献"><a href="#2-贡献" class="headerlink" title="2.贡献"></a>2.贡献</h1><ul><li>提出了基于GNN的解决<strong>类别不平衡问题</strong>的新方法，适用于图结构的欺诈检测。</li><li>设计了<strong>标签平衡采样器</strong>和<strong>邻居选择采样器</strong>，能够更有效地捕捉少数类（欺诈类）的重要特征。</li><li>在多种数据集上进行了大量实验，证明了该方法的有效性。</li></ul><h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h1><p>文章提出了一种名为Pick and Choose Graph Neural Network（PC-GNN）的方法，专门<strong>针对图数据的不平衡分类任务</strong>。该方法通过以下步骤来提高欺诈检测的准确性：</p><ol><li><p><strong>Pick（挑选）</strong>：使用一个标签平衡的采样器，从图中挑选节点和边，构建一个小的子图用于训练。这种采样方式使得子图中的类别分布更加均衡，特别是提高了少数类节点被选中的概率。</p></li><li><p><strong>Choose（选择）</strong>：为每个节点选择合适的邻居节点，通过一个可学习的距离函数来挑选邻居，过滤掉不相关或误导性的链接（如正常用户伪装成欺诈者的情况），并增加与目标节点相似的欺诈邻居。</p></li><li><p><strong>Aggregate（聚合）</strong>：将挑选出来的邻居信息进行聚合，并在不同关系下融合这些信息，得到目标节点的最终表示。</p><p> <img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/PC_GNN_1" alt="image-20241018113529338"></p></li></ol><hr><h2 id="3-1-标签平衡采样器（Pick-Label-balanced-Sampler）"><a href="#3-1-标签平衡采样器（Pick-Label-balanced-Sampler）" class="headerlink" title="3.1 标签平衡采样器（Pick: Label-balanced Sampler）"></a>3.1 标签平衡采样器（Pick: Label-balanced Sampler）</h2><p>在<strong>Pick</strong>步骤中，作者提出了一个<strong>标签平衡采样器（Label-balanced Sampler）</strong>，用于从原始图中选择节点和边，以构建用于子图训练的子图。该方法的主要目的是在样本标签严重不平衡的情况下，增加少数类节点被采样的概率，从而改善训练过程中由于类别不平衡引起的问题。</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>给定一个包含多种关系的图 $G = (V, E, A, X, C)$，其中：</p><ul><li>$V$ 表示节点的集合，</li><li>$E$ 表示边的集合，</li><li>$A = \sum_{r=1}^{R} A_r$ 是 $R$ 种关系的邻接矩阵之和，</li><li>$X$ 是节点特征矩阵，</li><li>$C$ 是节点的标签集合。</li></ul><p>首先计算图的<strong>归一化邻接矩阵</strong> $\hat{A}$，其定义为：</p><script type="math/tex; mode=display">\hat{A} = D^{-\frac{1}{2}} A D^{-\frac{1}{2}}</script><p>其中 $D$ 是一个对角矩阵，其对角元素为每个节点的度。该归一化过程有助于平衡不同节点之间的连接强度，从而避免度大的节点在信息传递过程中占据主导地位。</p><p>对于图中的每个节点 $v \in V$，我们根据以下公式定义其被采样的概率 $P(v)$：</p><script type="math/tex; mode=display">P(v) \propto \frac{\|\hat{A}(:,v)\|_2}{LF(C(v))}</script><p>公式中的各项含义如下：</p><ul><li>$\hat{A}(:, v)$ 是归一化邻接矩阵中第 $v$ 列的向量，它反映了节点 $v$ 在图中的连接模式和重要性。我们计算 $|\hat{A}(:, v)|_2$ 的 $L_2$ 范数，以衡量节点 $v$ 在图结构中的显著性。</li><li>$LF(C(v))$ 表示节点 $v$ 所属类别 $C(v)$ 的标签频率，即该类别在整个图中的出现频率。通过使用标签频率的倒数，少数类的节点会有更高的采样概率，从而在子图中使得少数类和多数类的节点数目更为平衡。</li></ul><p>通过上述公式，节点的采样概率不仅考虑了其在图结构中的位置（通过 $|\hat{A}(:, v)|_2$），还结合了标签的不平衡性（通过 $LF(C(v))$），确保少数类的节点有更高的概率被选中。</p><h3 id="子图构建"><a href="#子图构建" class="headerlink" title="子图构建"></a>子图构建</h3><p>根据采样概率 $P(v)$，我们从原始图 $G$ 中采样节点，得到节点集合 $V_p$，进而构建子图 $G_p$，其形式为：</p><script type="math/tex; mode=display">G_p = (V_p, E_p, A_p, X_p, C_p)</script><p>其中，$V_p$ 是采样到的节点集合，$E_p$ 是 $V_p$ 中节点之间的边集合，$A_p$ 是相应的邻接矩阵，$X_p$ 是采样节点的特征矩阵，$C_p$ 是采样节点的标签集合。</p><p>构建子图的一个关键点在于，子图中节点的标签分布更趋向于平衡（即少数类节点的数量增加），这使得在训练过程中，模型能够更好地学习到少数类的特征，避免少数类的特征在多数类的噪声中被淹没。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>通过这种基于标签平衡的采样方法，生成的子图中的节点标签分布会更加均衡。这对于训练深度学习模型尤其是图神经网络（GNN）非常重要，因为在图中的信息传递和特征聚合过程中，少数类节点的特征往往会被多数类的特征所掩盖，而该方法能够有效缓解这种问题。</p><hr><h2 id="3-2-邻居选择采样器（Choose-Neighborhood-Sampler）"><a href="#3-2-邻居选择采样器（Choose-Neighborhood-Sampler）" class="headerlink" title="3.2 邻居选择采样器（Choose: Neighborhood Sampler）"></a>3.2 邻居选择采样器（Choose: Neighborhood Sampler）</h2><p>在<strong>Choose</strong>步骤中，作者提出了一种<strong>邻居选择采样器（Neighborhood Sampler）</strong>，用于在采样的子图中选择合适的邻居节点。这一步的核心是通过对多数类邻居进行下采样，对少数类邻居进行过采样，以提升图神经网络在不平衡数据上的表现，尤其是少数类节点的表示能力。</p><h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h3><p>在 Pick 步骤采样得到子图 $G_p = (V_p, E_p, A_p, X_p, C_p)$ 后，下一步需要选择适当的邻居节点进行聚合。对于每个节点 $v \in V_p$，我们从其邻居中选择合适的节点进行信息传递和特征聚合。具体定义如下：</p><p>给定节点 $v$ 在关系 $E_r$ 下的邻居集合 $N_r(v)$，其定义为：</p><script type="math/tex; mode=display">N_r(v) = \{ u \in V_p | A_r(v, u) > 0 \}</script><p>即在关系 $r$ 下，所有与节点 $v$ 通过边 $A_r(v, u)$ 连接的节点 $u$ 构成了 $v$ 的邻居集合。</p><p>为了应对类不平衡问题，原始的邻居定义 $N_r(v)$ 可能包含大量的多数类邻居或缺少对少数类邻居的识别。因此，我们在选择邻居时进行以下两步操作：</p><ol><li><p><strong>多数类的下采样</strong>：对于属于多数类的节点 $v$，我们通过距离函数过滤掉与其距离较远的邻居，定义为：</p><script type="math/tex; mode=display">N_r(v) = \{ u \in V_p | A_r(v, u) > 0 \text{ and } D(v, u) < \rho^- \}</script><p>其中，$D(v, u)$ 表示节点 $v$ 与 $u$ 之间的距离，$\rho^-$ 是一个距离阈值，用于过滤掉与目标节点距离较远的邻居，从而减少多数类节点的噪声影响。</p></li><li><p><strong>少数类的过采样</strong>：对于属于少数类的节点 $v$，我们不仅从 $N_r(v)$ 中选择原始邻居，还可以添加一些与 $v$ 不直接相连但具有相似特征的少数类节点，定义为：</p><script type="math/tex; mode=display">N_r(v) = \{ u \in V_p | C(u) = C(v) \text{ and } D(v, u) < \rho^+ \}</script><p>其中，$\rho^+$ 是用于确定少数类节点的距离阈值，$C(u)$ 和 $C(v)$ 表示节点 $u$ 和 $v$ 的类别。这样可以增加少数类节点的数量，使其在特征聚合时能够获得更多有用的上下文信息。</p></li></ol><h3 id="距离函数"><a href="#距离函数" class="headerlink" title="距离函数"></a>距离函数</h3><p>在多数类的下采样和少数类的过采样过程中，我们使用了<strong>距离函数</strong> $D(v, u)$ 来判断邻居节点与目标节点之间的相似性。为了在隐藏空间中度量节点的距离，作者采用了参数化的距离函数，定义如下：</p><script type="math/tex; mode=display">D_r^{(\ell)}(v, u) = \left| \sigma(U_r^{(\ell)} h_v^{(\ell),r}) - \sigma(U_r^{(\ell)} h_u^{(\ell),r}) \right|</script><p>其中：</p><ul><li>$h_v^{(\ell),r}$ 和 $h_u^{(\ell),r}$ 是节点 $v$ 和 $u$ 在第 $\ell$ 层的嵌入表示（在关系 $r$ 下），</li><li>$U_r^{(\ell)}$ 是参数矩阵，用于学习节点嵌入的转换，</li><li>$\sigma$ 是一个激活函数，用于预测节点为欺诈的概率。</li></ul><p>该距离函数通过计算目标节点 $v$ 和邻居节点 $u$ 在潜在嵌入空间中的差异来衡量它们的距离。如果节点的标签相同且距离较小，它们更可能被选为邻居。</p><h3 id="邻居采样"><a href="#邻居采样" class="headerlink" title="邻居采样"></a>邻居采样</h3><p>根据距离函数的定义，多数类和少数类的邻居采样规则分别如下：</p><ul><li><p><strong>多数类的下采样邻居集合</strong>：</p><script type="math/tex; mode=display">\underline{N_r^{(\ell)}(v)} = \{ u \in V_p | A_r(v, u) > 0 \text{ and } D_r^{(\ell)}(v, u) < \rho^- \}</script></li><li><p><strong>少数类的过采样邻居集合</strong>：</p><script type="math/tex; mode=display">\overline{N_r^{(\ell)}(v)}= \{ u \in V_p | C(u) = C(v) \text{ and } D_r^{(\ell)}(v, u) < \rho^+ \}</script></li></ul><p>最终，少数类的目标节点 $v$ 的邻居集合为原始邻居和过采样邻居的并集：</p><script type="math/tex; mode=display">N_r^{(\ell)}(v) = \underline{N_r^{(\ell)}(v)}  \cup \overline{N_r^{(\ell)}(v)}</script><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>距离函数是可学习的，其中的参数 $U_r^{(\ell)}$ 会随着训练过程进行优化。我们使用交叉熵损失函数来优化距离函数的参数，定义为：</p><script type="math/tex; mode=display">L_{\text{dist}} = - \sum_{\ell=1}^{L} \sum_{r=1}^{R} \sum_{v \in V_p} \left[ y_v \log p_v^{(\ell),r} + (1 - y_v) \log(1 - p_v^{(\ell),r}) \right]</script><p>其中，$p_v^{(\ell),r}$ 是节点 $v$ 在第 $\ell$ 层、关系 $r$ 下被预测为欺诈的概率，$y_v$ 是实际的标签。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><p><strong>多数类下采样</strong>：通过对多数类节点的邻居集合进行下采样，避免了多数类的噪声干扰，减少了它们对少数类节点表示学习的负面影响。</p></li><li><p><strong>少数类过采样</strong>：通过对少数类节点的邻居集合进行过采样，可以增强少数类节点的特征学习，使其在信息传递和聚合过程中获得更多的有效信息。</p></li><li><p><strong>距离函数的作用</strong>：距离函数不仅考虑节点的嵌入表示，还结合了节点的标签信息，确保相似的少数类节点能够相互影响，而相异的多数类节点则被过滤掉。</p></li></ol><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p>通过这种邻居采样策略，少数类节点的特征不会在多数类节点的噪声中被淹没。同时，通过对多数类节点的下采样，减少了多数类邻居对少数类节点特征的稀释效应。结合距离函数的参数化设计，使得采样过程具备自适应性，能够动态调整邻居选择，从而提高模型在不平衡图数据上的表现。</p><hr><h2 id="3-3-算法结构"><a href="#3-3-算法结构" class="headerlink" title="3.3 算法结构"></a>3.3 算法结构</h2><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/20241019111154.png" alt="算法" style="zoom:50%;" /></p><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><ul><li><strong>$G = (V, E, A, X, C)$</strong>：一个多关系的不平衡图，其中 $V$ 是节点集，$E$ 是边集，$A$ 是邻接矩阵，$X$ 是节点特征，$C$ 是节点的标签集。</li><li><strong>$V_{\text{train}}$</strong>：训练集节点。</li><li><strong>$N_p$</strong>：每个 epoch 中采样的节点数量。</li><li><strong>$N_{\text{epoch}}$</strong>：总的训练 epoch 数量。</li><li><strong>$N_{\text{batch}}$</strong>：每个批次的训练节点数量。</li><li><strong>$L$</strong>：神经网络层数。</li><li><strong>$d_\ell$</strong>：第 $\ell$ 层的维度。</li></ul><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><ul><li><strong>每个节点的最终表示</strong> $h_v^{(L)}$，其中 $v \in V$。</li></ul><h3 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h3><ol><li><p><strong>初始化</strong>：</p><ul><li>初始化每个节点的初始特征为 $h_v^{(0)} \leftarrow x_v$。</li><li>根据节点的标签频率 $LF(C(v))$ 和归一化邻接矩阵 $\hat{A}$ 来计算每个节点 $v$ 的采样概率：<script type="math/tex; mode=display">P(v) \propto \frac{\|\hat{A}(:,v)\|_2}{LF(C(v))}</script></li></ul></li><li><p><strong>训练循环</strong>（重复 $N_{\text{epoch}}$ 次）：</p><ul><li><strong>采样节点</strong>：根据采样概率 $P(v)$ 从训练集 $V_{\text{train}}$ 中采样 $N_p$ 个节点，得到采样节点集 $V_p$。</li><li><p><strong>计算批次数量</strong>：根据采样节点的数量 $|V<em>p|$ 和每批次节点数 $N</em>{\text{batch}}$，计算批次数量 $B$：</p><script type="math/tex; mode=display">B = \left\lceil \frac{|V_p|}{N_{\text{batch}}} \right\rceil</script></li><li><p><strong>批次训练</strong>：对于每个批次 $b = 1, 2, \dots, B$：</p><ul><li><strong>构建子图</strong>：从采样的节点 $V_b$ 及其之间的边 $E_b$ 构建子图 $G_b = (V_b, E_b)$。</li><li><strong>逐层计算</strong>：对于每一层 $\ell = 1, 2, \dots, L$：<ul><li>对于每个关系 $r = 1, 2, \dots, R$：<ul><li><strong>邻居采样</strong>：<ul><li>如果节点 $v$ 属于多数类，则对其邻居进行下采样：<script type="math/tex; mode=display">N_r^{(\ell)}(v) = \{ u \in V_b | A_r(v, u) > 0 \text{ 且 } D(v, u) < \rho^- \}</script></li><li>如果节点 $v$ 属于少数类，则对其邻居进行过采样：<script type="math/tex; mode=display">N_r^{(\ell)}(v) = \{ u \in V_b | C(u) = C(v) \text{ 且 } D(v, u) < \rho^+ \}</script></li></ul></li><li><strong>更新节点表示</strong>：根据 Eq. (8) 更新节点 $v$ 在关系 $r$ 下的表示 $h_v^{(\ell),r}$。</li></ul></li><li><strong>更新全局节点表示</strong>：根据 Eq. (9) 聚合来自不同关系的邻居信息，更新节点 $v$ 在第 $\ell$ 层的表示 $h_v^{(\ell)}$。</li></ul></li></ul></li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>最终，经过 $L$ 层的计算，返回每个节点 $v \in V$ 的表示 $h_v^{(L)}$。</li></ul></li></ol><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ul><li><strong>采样策略</strong>：通过 Pick 阶段的标签平衡采样器，确保少数类节点在每个 epoch 中更有可能被采样，进而缓解类不平衡问题。</li><li><strong>邻居选择策略</strong>：Choose 阶段中的邻居采样器通过对多数类节点的邻居进行下采样、对少数类节点的邻居进行过采样，确保少数类节点在特征聚合过程中能够获得更多有效信息。</li><li><strong>逐层计算</strong>：通过逐层对不同关系下的邻居信息进行聚合，PC-GNN 能够充分利用图结构中的多关系信息，提升节点的表示学习效果。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>PC-GNN 通过 “Pick” 和 “Choose” 两个步骤来解决图结构数据中的类不平衡问题。Pick 阶段通过标签平衡采样，确保少数类节点优先被选取；Choose 阶段通过灵活的邻居选择策略，提升少数类节点的特征学习效果。这一框架在不平衡数据的节点分类任务中表现出色，尤其适用于欺诈检测等任务。</p><hr><h2 id="3-4-Aggregate-信息聚合架构"><a href="#3-4-Aggregate-信息聚合架构" class="headerlink" title="3.4 Aggregate: 信息聚合架构"></a>3.4 Aggregate: 信息聚合架构</h2><p>在进行<strong>Pick</strong>和<strong>Choose</strong>步骤之后，PC-GNN采用消息传递架构进行信息聚合。目标是通过从每一层和每种关系中聚合邻居节点的信息来更新节点的嵌入表示。</p><h3 id="信息聚合的步骤："><a href="#信息聚合的步骤：" class="headerlink" title="信息聚合的步骤："></a>信息聚合的步骤：</h3><p>信息聚合步骤分为两个部分：</p><ol><li><p><strong>在每种关系下的信息聚合</strong>：</p><ul><li>对于每一层 $\ell$，在每个关系 $r$ 下，聚合节点 $v$ 从选定邻居接收到的信息，表示如下：<script type="math/tex; mode=display">h_v^{(\ell),r} = \text{ReLU} \left( W_r^{(\ell)} \left( h_v^{(\ell-1),r} \oplus \text{AGG}_r^{(\ell)}\{ h_u^{(\ell-1),r} | u \in N_r^{(\ell)}(v) \} \right) \right)</script><ul><li>$h_v^{(\ell),r}$ 表示节点 $v$ 在第 $\ell$ 层、关系 $r$ 下的表示。</li><li>$\text{AGG}_r^{(\ell)}$ 是第 $\ell$ 层关系 $r$ 下的聚合函数（通常是平均聚合器）。</li><li>$\oplus$ 是特征拼接操作。</li><li>$W_r^{(\ell)}$ 是第 $\ell$ 层关系 $r$ 下的权重矩阵。</li><li>$\text{ReLU}$ 是激活函数。</li></ul></li></ul></li><li><p><strong>关系间的信息聚合</strong>：</p><ul><li>聚合来自不同关系的信息后，再结合前一层的表示，得到节点 $v$ 在第 $\ell$ 层的最终表示：<script type="math/tex; mode=display">h_v^{(\ell)} = \text{ReLU} \left( W^{(\ell)} \left( h_v^{(\ell-1)} \oplus h_v^{(\ell),1} \oplus \dots \oplus h_v^{(\ell),R} \right) \right)</script><ul><li>$h_v^{(\ell),1}, \dots, h_v^{(\ell),R}$ 表示节点 $v$ 在不同关系下的嵌入表示。</li><li>$W^{(\ell)}$ 是聚合不同关系后更新的权重矩阵。</li><li>$h_v^{(\ell-1)}$ 是节点 $v$ 在上一层的嵌入表示。</li></ul></li></ul></li></ol><h3 id="解释：-1"><a href="#解释：-1" class="headerlink" title="解释："></a>解释：</h3><ul><li><strong>关系内聚合</strong>：通过在每种关系下从邻居中获取信息，节点的表示能够更好地捕获特定关系下的局部结构信息。</li><li><strong>关系间聚合</strong>：通过在每一层聚合不同关系下的表示，PC-GNN能够将多关系的信息综合起来，生成更加丰富的节点表示。</li></ul><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>PC-GNN的消息传递架构分为两个步骤：首先在每种关系内聚合信息，然后在每一层聚合来自所有关系的信息。这种结构能够有效地捕捉图中的多关系信息，并为每个节点生成更具区分性的嵌入表示。</p><hr><h2 id="3-5-Training-模型训练"><a href="#3-5-Training-模型训练" class="headerlink" title="3.5 Training: 模型训练"></a>3.5 Training: 模型训练</h2><p>在信息聚合步骤之后，PC-GNN通过一个MLP分类器进行训练，并最小化交叉熵损失来学习模型参数。</p><h3 id="训练步骤："><a href="#训练步骤：" class="headerlink" title="训练步骤："></a>训练步骤：</h3><ol><li><p><strong>交叉熵损失</strong>：</p><ul><li>使用图神经网络生成的嵌入表示来进行节点分类，使用的损失函数为交叉熵损失：<script type="math/tex; mode=display">L_{\text{gnn}} = - \sum_{v \in V} \left( y_v \log p_v + (1 - y_v) \log(1 - p_v) \right)</script><ul><li>$y_v$ 是节点 $v$ 的真实标签。</li><li>$p_v$ 是节点 $v$ 被预测为欺诈的概率。</li></ul></li></ul></li><li><p><strong>距离损失</strong>：</p><ul><li>在邻居选择步骤中，使用了一个基于距离的学习模块。为了优化该模块的参数，采用了额外的距离损失函数：<script type="math/tex; mode=display">L_{\text{dist}} = - \sum_{\ell=1}^{L} \sum_{r=1}^{R} \sum_{v \in V} \left[ y_v \log p_v^{(\ell),r} + (1 - y_v) \log(1 - p_v^{(\ell),r}) \right]</script><ul><li>$p_v^{(\ell),r}$ 是节点 $v$ 在第 $\ell$ 层、关系 $r$ 下被预测为欺诈的概率。</li></ul></li></ul></li><li><p><strong>总损失函数</strong>：</p><ul><li>最终的损失函数结合了GNN的分类损失和距离损失，通过一个平衡系数 $\alpha$ 进行加权：<script type="math/tex; mode=display">L = L_{\text{gnn}} + \alpha L_{\text{dist}}</script></li></ul></li><li><p><strong>训练流程</strong>：</p><ul><li>通过上述损失函数对模型参数进行优化，使用梯度下降方法进行训练。</li><li>训练过程中，模型在每一层对邻居信息进行聚合，并更新节点的嵌入表示。</li></ul></li></ol><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>PC-GNN的训练过程通过最小化分类损失和距离损失来优化模型。分类损失确保模型能够正确预测节点的类别，而距离损失帮助模型优化邻居选择的参数，使得模型在处理不平衡数据时更加鲁棒。</p><hr><h1 id="4-实验验证"><a href="#4-实验验证" class="headerlink" title="4.实验验证"></a>4.实验验证</h1><h2 id="实验整体流程和效果概述"><a href="#实验整体流程和效果概述" class="headerlink" title="实验整体流程和效果概述"></a>实验整体流程和效果概述</h2><p>本部分实验的目的是验证所提出的<strong>PC-GNN</strong>模型在图结构的不平衡节点分类任务中的有效性，尤其是在<strong>欺诈检测</strong>等任务中的性能表现。作者设计了一系列实验来回答以下几个关键问题：</p><ul><li><strong>RQ1</strong>：PC-GNN 能否优于现有的图异常检测方法？</li><li><strong>RQ2</strong>：PC-GNN 的关键组件对预测有何影响？</li><li><strong>RQ3</strong>：PC-GNN 对不同训练参数的表现如何？</li><li><strong>RQ4</strong>：将提出的模块应用于其他GNN模型时是否能提升性能？</li></ul><h3 id="整体流程："><a href="#整体流程：" class="headerlink" title="整体流程："></a>整体流程：</h3><ol><li><strong>数据集</strong>：作者使用了两个公开的评论欺诈检测数据集（YelpChi 和 Amazon）以及两个来自阿里巴巴的实际金融欺诈检测数据集（M7 和 M9）。</li><li><strong>比较方法</strong>：PC-GNN 与一系列最先进的图神经网络模型进行对比，包括 GCN、GAT、GraphSAGE 等。</li><li><strong>评估指标</strong>：使用三个广泛应用的指标来评估模型性能，即 F1-macro、AUC、GMean。</li><li><strong>消融实验</strong>：为了进一步验证模型中各个模块的有效性，设计了两种 PC-GNN 的变体进行消融实验。</li><li><strong>参数敏感性分析</strong>：通过改变训练集的大小，分析模型对训练数据量的敏感性。</li><li><strong>增强其他GNN模型</strong>：将PC-GNN的关键模块应用到传统GNN模型（如 GCN 和 GraphSAGE）中，测试其增强效果。</li></ol><h3 id="效果总结："><a href="#效果总结：" class="headerlink" title="效果总结："></a>效果总结：</h3><ul><li>实验结果表明，<strong>PC-GNN</strong>显著优于现有的最先进方法，尤其是在处理高度不平衡的图数据时表现尤为出色。</li><li>在所有实验数据集上，PC-GNN 在 <strong>AUC</strong> 和 <strong>GMean</strong> 指标上都有显著的提升，展示了其在不平衡节点分类任务中的强大能力。</li><li>消融实验显示，<strong>Pick</strong> 和 <strong>Choose</strong> 两个模块都对模型性能有显著贡献，证明了其设计的合理性。</li><li>模型在不同的训练数据比例下表现出较强的鲁棒性，说明 PC-GNN 能够很好地适应不同规模的训练集。</li></ul><hr><h2 id="4-1-实验设置"><a href="#4-1-实验设置" class="headerlink" title="4.1 实验设置"></a>4.1 实验设置</h2><ol><li><p><strong>数据集</strong>：</p><ul><li><p><strong>YelpChi</strong> 和 <strong>Amazon</strong> 数据集用于评论欺诈检测任务。</p><ul><li>YelpChi 数据集包含酒店和餐馆的评论，图中的节点代表评论，边表示评论之间的关系，节点特征是100维的向量。</li><li>Amazon 数据集是产品评论，图中的节点代表用户，边表示用户之间的关系。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/20241019114322.png" style="zoom:80%;" /></p></li><li><p><strong>M7</strong> 和 <strong>M9</strong> 是来自阿里巴巴的金融欺诈检测数据集，用于检测默认用户。</p><ul><li>这两个数据集分别收集了2018年7月和9月的用户交易行为。</li><li>节点表示用户，边表示用户之间的交易、登录、资金转移或社交关系。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/20241019114128.png" style="zoom: 80%;" /></p></li></ul></li><li><p><strong>比较方法</strong>：</p><ul><li><strong>GCN</strong>、<strong>GAT</strong>、<strong>GraphSAGE</strong>：经典的图神经网络模型，分别基于图卷积、图注意力和固定邻居采样机制。</li><li><strong>DR-GCN</strong>、<strong>GraphSAINT</strong>、<strong>GraphConsis</strong>、<strong>CARE-GNN</strong>：为处理类不平衡问题而设计的先进图神经网络模型。</li><li><strong>PC-GNN</strong> 变体：为了验证 PC-GNN 的两个核心模块（Pick 和 Choose）的效果，设计了两个变体：<ul><li><strong>PC-GNN\P</strong>：去掉 Pick 模块。</li><li><strong>PC-GNN\C</strong>：去掉 Choose 模块。</li></ul></li></ul></li><li><p><strong>评估指标</strong>：</p><ul><li><strong>F1-macro</strong>：各类的 F1 分数的平均值。</li><li><strong>AUC</strong>：ROC 曲线下的面积，衡量模型对正负样本的区分能力。</li><li><strong>GMean</strong>：True Positive Rate 和 True Negative Rate 的几何平均数，特别适合不平衡分类任务。</li></ul></li><li><p><strong>实验环境</strong>：</p><ul><li>所有实验在 Ubuntu 16.04 服务器上运行，使用了 PyTorch 1.6.0 和 DGL 框架。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241019114449988.png" alt="比较"></p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241019114708245.png" alt="image-20241019114708245" style="zoom:80%;" /></p></li></ol><hr><h2 id="4-2-性能比较（RQ1）"><a href="#4-2-性能比较（RQ1）" class="headerlink" title="4.2 性能比较（RQ1）"></a>4.2 性能比较（RQ1）</h2><p>为了回答 RQ1，作者在评论欺诈检测任务和金融欺诈检测任务上对所有对比方法进行了评估，并记录了它们的 <strong>F1-macro</strong>、<strong>AUC</strong> 和 <strong>GMean</strong> 分数。</p><ol><li><p><strong>评论欺诈检测任务</strong>：</p><ul><li><strong>PC-GNN</strong> 在 <strong>YelpChi</strong> 和 <strong>Amazon</strong> 数据集上，均取得了最好的 AUC 和 GMean 分数，表明它能有效处理不平衡图结构。</li><li>尤其是在 <strong>AUC</strong> 上，PC-GNN 的表现比 <strong>CARE-GNN</strong> 和 <strong>GraphConsis</strong> 提升了约 3%~5%，在 <strong>GMean</strong> 上提升了 0.7%~28%。</li></ul></li><li><p><strong>金融欺诈检测任务</strong>：</p><ul><li>在高度不平衡的 M7 和 M9 数据集上，PC-GNN 在 <strong>F1-macro</strong> 和 <strong>AUC</strong> 上也取得了最好的结果。</li><li>与 <strong>GraphSAGE</strong> 和 <strong>GraphSAINT</strong> 相比，PC-GNN 的提升尤为明显，说明其设计的 Pick 和 Choose 模块在处理严重不平衡数据时尤为有效。</li></ul></li></ol><hr><h2 id="4-3-消融实验（RQ2）"><a href="#4-3-消融实验（RQ2）" class="headerlink" title="4.3 消融实验（RQ2）"></a>4.3 消融实验（RQ2）</h2><p>为了回答 RQ2，作者设计了消融实验来验证 <strong>Pick</strong> 和 <strong>Choose</strong> 两个模块的有效性，具体通过去除这两个模块分别得到 <strong>PC-GNN\P</strong> 和 <strong>PC-GNN\C</strong>。</p><ul><li><p><strong>在金融数据集上的表现</strong>：</p><ul><li><strong>PC-GNN\P</strong> 在 M7 和 M9 数据集上没有产生正预测结果，说明去掉 Pick 模块对处理高度不平衡数据的负面影响极大。</li><li><strong>PC-GNN\C</strong> 相比 PC-GNN 在所有指标上均有所下降，验证了 Choose 模块对于少数类节点邻居选择的重要性。</li></ul></li><li><p><strong>在评论数据集上的表现</strong>：</p><ul><li><p>在 <strong>YelpChi</strong> 和 <strong>Amazon</strong> 数据集上，去除 <strong>Pick</strong> 和 <strong>Choose</strong> 模块均导致性能下降，尤其是在少数类（即欺诈类）节点的 F1 分数上。</p></li><li><p>然而，在 <strong>Amazon</strong> 数据集中，由于图规模较小，<strong>PC-GNN\P</strong> 的表现略优，这表明在小规模图中全局训练可能比子图训练更有效。</p><p>  <img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241019115102372.png" alt="进一步研究" style="zoom:80%;" /></p></li></ul></li></ul><hr><h2 id="4-4-参数敏感性分析（RQ3）"><a href="#4-4-参数敏感性分析（RQ3）" class="headerlink" title="4.4 参数敏感性分析（RQ3）"></a>4.4 参数敏感性分析（RQ3）</h2><p>为了回答 RQ3，作者进行了训练比例的敏感性分析，通过改变训练数据的比例，分析模型性能的变化。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241019115245423.png" alt="q3"></p><ul><li><strong>实验结果</strong>显示，在不同的训练比例下，PC-GNN 的 AUC 和 GMean 分数始终优于 <strong>GraphConsis</strong> 和 <strong>CARE-GNN</strong>。</li><li><strong>F1-macro</strong> 分数在较低的训练比例下有所波动，但随着训练数据的增加，PC-GNN 的表现逐渐趋于稳定。</li></ul><hr><h2 id="4-5-增强其他-GNN-模型（RQ4）"><a href="#4-5-增强其他-GNN-模型（RQ4）" class="headerlink" title="4.5 增强其他 GNN 模型（RQ4）"></a>4.5 增强其他 GNN 模型（RQ4）</h2><p>为了回答 RQ4，作者将 <strong>PC-GNN</strong> 的 <strong>Pick</strong> 和 <strong>Choose</strong> 模块应用到传统的 GNN 模型中，具体为 <strong>GCN</strong> 和 <strong>GraphSAGE</strong>，并测试其增强效果。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241019115428750.png" alt="q4" style="zoom:80%;" /></p><ul><li><strong>实验结果</strong>显示，加入 <strong>Pick</strong> 模块后，<strong>GCN(P)</strong> 和 <strong>GraphSAGE(P)</strong> 在所有指标上均有显著提升。</li><li>这表明，PC-GNN 的采样策略可以作为通用模块，增强其他传统 GNN 模型的性能。</li></ul><hr><h1 id="5-相关工作"><a href="#5-相关工作" class="headerlink" title="5. 相关工作"></a>5. 相关工作</h1><p>在本部分，作者介绍了与本研究相关的两个主要领域的已有工作，即<strong>不平衡学习</strong>和<strong>基于图的欺诈检测</strong>。这些领域中的研究为 PC-GNN 的设计提供了启发和基础。</p><h2 id="5-1-不平衡学习（Imbalanced-Learning）"><a href="#5-1-不平衡学习（Imbalanced-Learning）" class="headerlink" title="5.1 不平衡学习（Imbalanced Learning）"></a>5.1 不平衡学习（Imbalanced Learning）</h2><p>处理不平衡数据问题的现有算法可以分为两大类：<strong>重采样方法</strong>和<strong>重加权方法</strong>。</p><h3 id="1-重采样方法（Re-sampling-Methods）"><a href="#1-重采样方法（Re-sampling-Methods）" class="headerlink" title="1. 重采样方法（Re-sampling Methods）"></a>1. 重采样方法（Re-sampling Methods）</h3><p>重采样方法包括过采样和欠采样两类。</p><ul><li><strong>过采样</strong>：增加少数类的样本数。常用的过采样方法包括随机过采样（ROS）和基于插值的过采样方法 <strong>SMOTE</strong>，以及一些生成方法（如GLGAN、ADAAR），这些方法通过生成合成样本来增强少数类。</li><li><strong>欠采样</strong>：通过减少多数类的样本数来平衡类分布。典型的方法有随机欠采样（RUS）、<strong>EasyEnsemble</strong> 和 <strong>BalanceCascade</strong> 等，这些方法主要是为了解决过度采样时可能引入的噪声问题。最近，<strong>TRUST</strong> 提出了通过元学习强化学习来自动学习欠采样策略。</li></ul><h3 id="2-重加权方法（Re-weighting-Methods）"><a href="#2-重加权方法（Re-weighting-Methods）" class="headerlink" title="2. 重加权方法（Re-weighting Methods）"></a>2. 重加权方法（Re-weighting Methods）</h3><p>重加权方法主要通过为不同的样本或类别分配不同的权重来解决不平衡问题。</p><ul><li><strong>基于代价敏感的加权方法</strong>：如 <strong>Focal Loss</strong> 和 <strong>Dice Loss</strong>，这些方法通过降低容易分类的样本的权重，来减少这些样本在训练过程中的影响。</li><li><strong>基于元学习的加权方法</strong>：如 <strong>Learning to Re-weight</strong>，这些方法通过动态调整每个样本的权重，优化训练过程中的梯度方向。</li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>除了重采样和重加权方法外，迁移学习、度量学习等方法也被用于解决类不平衡问题。然而，这些方法大多在传统特征空间中被研究，而图结构数据的类不平衡问题相对较少被探索。<strong>PC-GNN</strong> 针对图结构中的类不平衡问题，提出了新的图采样和邻居选择方法，填补了这一领域的研究空白。</p><hr><h2 id="5-2-基于图的欺诈检测（Graph-based-Fraud-Detection）"><a href="#5-2-基于图的欺诈检测（Graph-based-Fraud-Detection）" class="headerlink" title="5.2 基于图的欺诈检测（Graph-based Fraud Detection）"></a>5.2 基于图的欺诈检测（Graph-based Fraud Detection）</h2><p>欺诈检测任务中的图数据通常包含用户的多种行为关系，构成异构图。因此，近年来许多工作基于异构图的分析来进行欺诈检测。作者将现有的基于图的欺诈检测工作分为两类：<strong>金融欺诈检测</strong>和<strong>评论欺诈检测</strong>。</p><h3 id="1-金融欺诈检测（Financial-Fraud-Detection）"><a href="#1-金融欺诈检测（Financial-Fraud-Detection）" class="headerlink" title="1. 金融欺诈检测（Financial Fraud Detection）"></a>1. 金融欺诈检测（Financial Fraud Detection）</h3><p>金融欺诈检测的目标是基于金融平台的用户行为数据来检测恶意账户、违约用户和欺诈交易。</p><ul><li><strong>GEM</strong>：适应性地学习异构账户-设备图的区分嵌入，以检测恶意账户。</li><li><strong>Semi-GNN</strong>：使用分层注意力机制的半监督 GNN 模型，用于解释性欺诈预测。</li><li><strong>GAL</strong>：提出了一种图异常损失函数，训练 GNN 生成可检测异常的节点表示。</li><li><strong>MAHINDER</strong>：在多视图异构信息网络中探索元路径，用于检测违约用户。</li></ul><h3 id="2-评论欺诈检测（Opinion-Fraud-Detection）"><a href="#2-评论欺诈检测（Opinion-Fraud-Detection）" class="headerlink" title="2. 评论欺诈检测（Opinion Fraud Detection）"></a>2. 评论欺诈检测（Opinion Fraud Detection）</h3><p>评论欺诈检测的目标是检测误导消费者的垃圾评论或发布垃圾评论的欺诈用户。</p><ul><li><strong>FdGars</strong>：基于图卷积网络（GCN）进行在线应用评论系统中的欺诈者检测。</li><li><strong>GAS</strong>：整合异构图和同构图来捕获评论的局部上下文和全局上下文。</li><li><strong>GraphConsis</strong>：研究了基于图的欺诈检测中的上下文不一致、特征不一致和关系不一致问题。</li><li><strong>CARE</strong>：通过增强 GNN 聚合过程，提出了一种防伪装的 GNN 模型，用于评论欺诈检测。</li></ul><h4 id="本研究的独特性"><a href="#本研究的独特性" class="headerlink" title="本研究的独特性"></a>本研究的独特性</h4><p>与上述方法不同，大多数现有工作通常采用简单的随机过采样方法来处理图中的类不平衡问题。而 <strong>PC-GNN</strong> 创新性地提出了<strong>Pick</strong> 和 <strong>Choose</strong> 两个模块，通过<strong>标签平衡采样器</strong>和<strong>邻居采样器</strong>来处理图结构中的不平衡问题。这种新方法能够更好地解决类不平衡带来的挑战，并且在多个数据集上表现优异。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphSAGE</title>
      <link href="/2024/10/09/GraphSAGE/"/>
      <url>/2024/10/09/GraphSAGE/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://arxiv.org/pdf/1706.02216">1706.02216</a></p><p>网站：<a href="https://snap.stanford.edu/graphsage/">GraphSAGE</a></p><p>代码仓库：<a href="https://github.com/williamleif/graphsage-simple/">williamleif/graphsage-simple: Simple reference implementation of GraphSAGE.</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>GraphSAGE（Graph Sample and Aggregate）是一种图神经网络模型，旨在有效地处理大规模图数据。它通过采样和聚合节点的邻居信息，生成节点的嵌入向量，能够进行图结构的任务，如节点分类、节点嵌入、链路预测等。</p><h3 id="1-背景："><a href="#1-背景：" class="headerlink" title="1. 背景："></a>1. 背景：</h3><p>传统的图神经网络（GNN）模型，如GCN（Graph Convolutional Network），通常需要处理整个图的邻居信息来生成节点嵌入。这种全图卷积的方式在小型图上表现良好，但随着图规模增大，计算和存储成本急剧增加，尤其是在处理社交网络、生物网络等大规模图时，直接使用所有邻居节点的信息变得不可行。因此，GraphSAGE模型应运而生，旨在解决大规模图数据中计算和存储效率的问题。</p><h3 id="2-动机："><a href="#2-动机：" class="headerlink" title="2. 动机："></a>2. 动机：</h3><p>GraphSAGE的动机是解决以下问题：</p><ul><li><strong>大规模图上的计算效率</strong>：随着图规模的增大，传统GNN需要处理整个图的数据，导致内存和计算资源的消耗难以接受。</li><li><strong>高效地生成节点嵌入</strong>：许多实际任务需要学习节点的低维表示，而这些任务的需求往往是图不断增长的，GraphSAGE希望在无需重新训练模型的情况下，能够灵活地生成新节点的嵌入。</li><li><strong>采样与泛化能力</strong>：GraphSAGE通过局部采样机制，避免处理整个图的邻居节点，从而提升了模型的泛化能力，特别是能够处理动态图或部分未知结构的图。</li></ul><h3 id="3-创新点："><a href="#3-创新点：" class="headerlink" title="3. 创新点："></a>3. 创新点：</h3><p>GraphSAGE的创新点主要体现在以下几个方面：</p><ul><li><strong>采样邻居节点</strong>：与GCN不同，GraphSAGE不是使用全局图卷积操作，而是为每个节点采样固定数量的邻居节点。通过局部采样的方式，可以有效地减少计算量，特别是当图的节点数和边数非常大时，这种方法可以显著降低内存和计算资源的消耗。</li><li><strong>聚合函数设计</strong>：GraphSAGE通过不同的聚合函数（如均值、池化、LSTM等）对采样的邻居节点进行信息汇总，灵活地捕捉图的局部结构信息。不同的聚合函数能够根据任务需求调整节点嵌入的表达能力。</li><li><strong>节点归纳学习</strong>：相比于传统的GNN模型需要全图信息，GraphSAGE采用的是归纳学习方式，不需要提前知道整个图的结构，也能够在训练好的模型基础上为新加入的节点生成嵌入，这使得模型在处理动态或部分未知图结构时具有很强的泛化能力。</li></ul><h3 id="4-效果："><a href="#4-效果：" class="headerlink" title="4. 效果："></a>4. 效果：</h3><p>GraphSAGE在多个大规模图任务上取得了较好的效果，特别是在以下方面：</p><ul><li><strong>计算效率</strong>：通过局部采样，GraphSAGE极大地减少了计算开销，使得在大型图数据上进行节点嵌入学习成为可能。相比于传统的GCN，它能够处理上亿节点规模的图。</li><li><strong>嵌入生成能力</strong>：GraphSAGE能够在不重新训练模型的情况下，为新加入的节点生成嵌入，这对动态图和实时应用非常有利。</li><li><strong>实验表现</strong>：在标准数据集（如Reddit、PPI等）上，GraphSAGE在节点分类和链路预测任务中展现了优异的表现，与其他模型相比，它能够在保持较高准确率的同时显著提高计算效率。</li></ul><h1 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>GraphSAGE 提出了一种归纳式方法，用于在图中生成节点嵌入，具体通过从节点的局部邻域聚合特征来实现。这一过程依赖于学习得到的聚合函数，记为 <script type="math/tex">\text{AGGREGATE}_k</script>，其中 <script type="math/tex">k</script> 代表搜索深度。每次聚合都会结合邻居节点的信息，生成特定深度的节点表示。</p><p><img src="https://cdn.jsdelivr.net/gh/JJxXxLL/pic@main/img/image-20241019230957810.png" alt="image-20241019230957810" style="zoom: 50%;" /></p><h3 id="算法概览"><a href="#算法概览" class="headerlink" title="算法概览"></a>算法概览</h3><ol><li><p><strong>输入</strong>:</p><ul><li>图 <script type="math/tex">G = (V, E)</script>，其中 <script type="math/tex">V</script> 是节点集，<script type="math/tex">E</script> 是边集。</li><li>每个节点的输入特征 <script type="math/tex">\{x_v | v \in V\}</script>。</li><li>搜索深度 <script type="math/tex">K</script>。</li><li>权重矩阵 <script type="math/tex">W_k</script>，<script type="math/tex">k = 1, ..., K</script>。</li><li>激活函数 <script type="math/tex">\sigma</script>。</li><li>可微分的聚合函数 <script type="math/tex">\text{AGGREGATE}_k</script>，<script type="math/tex">k = 1, ..., K</script>。</li><li>邻居选择函数 <script type="math/tex">N(v)</script>，返回节点 <script type="math/tex">v</script> 的邻居节点集合。</li></ul></li><li><p><strong>输出</strong>:</p><ul><li>每个节点 <script type="math/tex">v</script> 的向量表示 <script type="math/tex">z_v</script>。</li></ul></li></ol><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li>初始化每个节点的特征表示：<script type="math/tex; mode=display">h^0_v = x_v, \forall v \in V</script></li><li>对于每一个深度 <script type="math/tex">k = 1, ..., K</script>：<ol><li>对于每个节点 <script type="math/tex">v</script>，从其邻居中聚合特征：<script type="math/tex; mode=display">h^k_{N(v)} = \text{AGGREGATE}_k \left( \{ h^{k-1}_u | u \in N(v) \} \right)</script></li><li>更新节点 <script type="math/tex">v</script> 的表示，结合节点自身和邻居的信息：<script type="math/tex; mode=display">h^k_v = \sigma \left( W_k \cdot \text{CONCAT}(h^{k-1}_v, h^k_{N(v)}) \right)</script></li><li>对表示进行归一化：<script type="math/tex; mode=display">h^k_v = \frac{h^k_v}{\| h^k_v \|_2}, \forall v \in V</script></li></ol></li><li>输出每个节点的最终嵌入表示：<script type="math/tex; mode=display">z_v = h^K_v, \forall v \in V</script></li></ol><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>在每一次迭代（即搜索深度）中，节点通过聚合其局部邻域中的信息逐步构建其嵌入表示。随着算法的迭代，节点逐渐获得来自更远邻域的信息，这样最终生成的嵌入不仅包含了节点自身的特征，还包含了邻居节点的特征信息。</p><p>GraphSAGE（Graph Sample and Aggregate）的具体实现主要包括以下几个关键步骤：邻居采样、聚合函数、节点更新、损失函数与训练过程。下面详细介绍其实现流程。</p><h3 id="1-邻居采样（Neighbor-Sampling）"><a href="#1-邻居采样（Neighbor-Sampling）" class="headerlink" title="1. 邻居采样（Neighbor Sampling）"></a>1. 邻居采样（Neighbor Sampling）</h3><p>GraphSAGE通过随机采样的方式，选择每个节点的固定数量的邻居节点进行消息传递和聚合。这样可以有效减少大规模图上计算的复杂度和内存需求。对于每一层卷积，GraphSAGE只采样每个节点的部分邻居，从而避免了全图卷积带来的效率瓶颈。</p><ul><li><strong>具体操作</strong>：对于每个节点 <script type="math/tex">v</script>，在每一层中，GraphSAGE会随机采样固定数量的邻居节点（设为 <script type="math/tex">K</script> 个），并使用这些邻居节点来参与聚合运算。这种局部采样方法可以有效减少计算量，并使得模型能够扩展到大规模图。</li></ul><h3 id="2-聚合函数（Aggregation-Function）"><a href="#2-聚合函数（Aggregation-Function）" class="headerlink" title="2. 聚合函数（Aggregation Function）"></a>2. 聚合函数（Aggregation Function）</h3><p>采样到邻居节点后，GraphSAGE的核心是如何聚合这些邻居节点的信息。GraphSAGE提供了几种不同的聚合函数选择，这些聚合方式可以捕捉邻居节点的局部特征并传递给目标节点。常用的聚合函数包括以下几种：</p><ul><li><p><strong>Mean Aggregator</strong>：这是最简单的一种聚合方式，直接取邻居节点的特征的均值。公式如下：</p><script type="math/tex; mode=display">h_v^{k+1} = \sigma \left( W \cdot \text{mean}( \{ h_u^k, \forall u \in \mathcal{N}(v) \cup \{ v \} \} ) \right)</script><p>其中， <script type="math/tex">h_v^k</script> 是节点 <script type="math/tex">v</script> 在第 <script type="math/tex">k</script> 层的表示， <script type="math/tex">\mathcal{N}(v)</script> 是节点 <script type="math/tex">v</script> 的邻居节点集合，<script type="math/tex">W</script> 是可学习的权重矩阵， <script type="math/tex">\sigma</script> 是非线性激活函数（如ReLU）。</p></li><li><p><strong>Pooling Aggregator</strong>：对于每个邻居节点，首先通过一个多层感知机（MLP）将其映射到高维特征空间，然后对所有邻居节点的表示进行池化操作（如最大池化或平均池化）。公式如下：</p><script type="math/tex; mode=display">h_v^{k+1} = \sigma \left( W \cdot \text{max}( \{ \text{MLP}(h_u^k), \forall u \in \mathcal{N}(v) \cup \{ v \} \} ) \right)</script></li><li><p><strong>LSTM Aggregator</strong>：LSTM聚合器使用循环神经网络（RNN）中的LSTM单元来处理邻居节点信息。它将邻居节点序列输入LSTM，最后将LSTM的输出作为聚合结果。公式如下：</p><script type="math/tex; mode=display">h_v^{k+1} = \sigma \left( W \cdot \text{LSTM}( \{ h_u^k, \forall u \in \mathcal{N}(v) \cup \{ v \} \} ) \right)</script></li></ul><p><strong>Mean Aggregator</strong>：适合处理大规模数据，简单且高效，适合对节点之间关系相对简单的图。</p><p><strong>Pooling Aggregator</strong>：通过引入非线性变换增加了模型的表达能力，适合在需要较复杂的特征表达时使用。</p><p><strong>LSTM Aggregator</strong>：适合在节点间存在序列关系或依赖时使用，但由于计算复杂度较高，可能不适合非常大规模的图数据。</p><h3 id="3-节点更新（Node-Update）"><a href="#3-节点更新（Node-Update）" class="headerlink" title="3. 节点更新（Node Update）"></a>3. 节点更新（Node Update）</h3><p>在每一层中，目标节点 <script type="math/tex">v</script> 的新表示 <script type="math/tex">h_v^{k+1}</script> 是通过将它自己的特征 <script type="math/tex">h_v^k</script> 和聚合后的邻居特征结合起来生成的。具体更新规则通常为：</p><script type="math/tex; mode=display">h_v^{k+1} = \sigma \left( W_v^k \cdot h_v^k + W_{\mathcal{N}}^k \cdot \text{Aggregate}( \{ h_u^k, \forall u \in \mathcal{N}(v) \} ) \right)</script><p>其中，<script type="math/tex">W_v^k</script> 和 <script type="math/tex">W_{\mathcal{N}}^k</script> 是可学习的权重矩阵，<script type="math/tex">\text{Aggregate}</script> 是邻居节点特征的聚合函数。这个过程会迭代多层，每一层都会进一步整合节点的局部和邻居信息。</p><h3 id="4-归纳学习（Inductive-Learning）"><a href="#4-归纳学习（Inductive-Learning）" class="headerlink" title="4. 归纳学习（Inductive Learning）"></a>4. 归纳学习（Inductive Learning）</h3><p>GraphSAGE的一个显著优点是其归纳学习能力。传统的图神经网络（如GCN）是基于整个图的全局信息来学习节点表示的，而GraphSAGE通过局部采样和聚合邻居信息，实现了在不使用全图信息的情况下进行学习和推断。因此，GraphSAGE能够处理动态图或新增节点，即使这些节点在训练阶段没有出现，模型也能生成合理的嵌入。</p><h3 id="5-损失函数（Loss-Function）"><a href="#5-损失函数（Loss-Function）" class="headerlink" title="5. 损失函数（Loss Function）"></a>5. 损失函数（Loss Function）</h3><p>GraphSAGE通常用于节点分类、节点嵌入等任务。其常用的损失函数包括：</p><ul><li><p><strong>监督学习</strong>：在节点分类任务中，使用标准的交叉熵损失函数。假设任务是对节点进行分类，目标是最小化以下损失：</p><script type="math/tex; mode=display">\mathcal{L} = - \sum_{v \in \mathcal{V}} y_v \log(\hat{y}_v)</script><p>其中， <script type="math/tex">y_v</script> 是节点 <script type="math/tex">v</script> 的真实标签，<script type="math/tex">\hat{y}_v</script> 是模型预测的概率分布。</p></li><li><p><strong>无监督学习</strong>：GraphSAGE也可以在无监督的设置下用于学习节点嵌入。通常使用负采样（negative sampling）的方法，通过最大化正负样本之间的对比损失来学习节点表示。</p></li></ul><h3 id="6-训练过程（Training-Procedure）"><a href="#6-训练过程（Training-Procedure）" class="headerlink" title="6. 训练过程（Training Procedure）"></a>6. 训练过程（Training Procedure）</h3><p>GraphSAGE的训练流程与传统的神经网络类似，主要步骤如下：</p><ul><li><strong>前向传播</strong>：对每个节点，采样邻居节点，并通过聚合函数生成新的节点表示。</li><li><strong>反向传播</strong>：通过标准的梯度下降方法，计算损失并更新模型参数。</li><li><strong>优化</strong>：使用优化器（如Adam或SGD）更新模型的可学习参数。</li></ul><p>训练过程中，GraphSAGE通过小批量采样（mini-batch）的方式进行迭代，以避免处理整个图结构，从而提高了效率。每一轮迭代更新节点表示后，模型会逐渐捕捉到更深层次的图结构信息。</p><h1 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h1><p>模型代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GraphSage</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    原始 GraphSAGE 模型</span></span><br><span class="line"><span class="string">    实现了论文 &quot;Inductive Representation Learning on Large Graphs&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes, enc</span>):</span><br><span class="line">        <span class="built_in">super</span>(GraphSage, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.enc = enc  <span class="comment"># Encoder 对象，负责节点嵌入</span></span><br><span class="line">        <span class="variable language_">self</span>.xent = nn.CrossEntropyLoss()  <span class="comment"># 使用交叉熵损失进行分类</span></span><br><span class="line">        <span class="variable language_">self</span>.weight = nn.Parameter(torch.FloatTensor(num_classes, enc.embed_dim)) <span class="comment"># 分类层的权重</span></span><br><span class="line">        init.xavier_uniform_(<span class="variable language_">self</span>.weight)  <span class="comment"># 初始化权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, nodes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        前向传播函数：生成给定节点的分类分数</span></span><br><span class="line"><span class="string">        :param nodes: 节点列表</span></span><br><span class="line"><span class="string">        :return: 分类分数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        embeds = <span class="variable language_">self</span>.enc(nodes)  <span class="comment"># 获取节点嵌入</span></span><br><span class="line">        scores = <span class="variable language_">self</span>.weight.mm(embeds)  <span class="comment"># 线性变换生成分数</span></span><br><span class="line">        <span class="keyword">return</span> scores.t()  <span class="comment"># 返回转置后的结果，形状为 (batch_size, num_classes)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_prob</span>(<span class="params">self, nodes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将输出转换为概率值</span></span><br><span class="line"><span class="string">        :param nodes: 节点列表</span></span><br><span class="line"><span class="string">        :return: 节点所属类别的概率</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pos_scores = torch.sigmoid(<span class="variable language_">self</span>.forward(nodes))  <span class="comment"># 应用 Sigmoid 函数将分数转换为概率</span></span><br><span class="line">        <span class="keyword">return</span> pos_scores</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">self, nodes, labels</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算给定节点的损失</span></span><br><span class="line"><span class="string">        :param nodes: 节点列表</span></span><br><span class="line"><span class="string">        :param labels: 对应的真实标签</span></span><br><span class="line"><span class="string">        :return: 交叉熵损失</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        scores = <span class="variable language_">self</span>.forward(nodes)  <span class="comment"># 获取分类分数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.xent(scores, labels.squeeze())  <span class="comment"># 计算交叉熵损失</span></span><br></pre></td></tr></table></figure><p>下面的代码定义了 <strong>GraphSAGE</strong> 模型中的 <code>Encoder</code> 模块，它负责从节点及其邻居的特征中生成嵌入表示。<code>Encoder</code> 通过使用一个 <strong>聚合器（Aggregator）</strong> 来聚合节点的邻居特征，并根据是否是 GCN 模式来决定是否包含节点自身的特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GraphSAGE 编码器模块，使用卷积式 GraphSAGE 方法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, features, feature_dim, embed_dim, adj_lists, aggregator, num_sample=<span class="number">10</span>, base_model=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 gcn=<span class="literal">False</span>, cuda=<span class="literal">False</span>, feature_transform=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Encoder, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.features = features  <span class="comment"># 节点特征函数</span></span><br><span class="line">        <span class="variable language_">self</span>.feat_dim = feature_dim  <span class="comment"># 输入特征维度</span></span><br><span class="line">        <span class="variable language_">self</span>.adj_lists = adj_lists  <span class="comment"># 节点的邻居表</span></span><br><span class="line">        <span class="variable language_">self</span>.aggregator = aggregator  <span class="comment"># 聚合器对象</span></span><br><span class="line">        <span class="variable language_">self</span>.num_sample = num_sample  <span class="comment"># 每个节点采样的邻居数量</span></span><br><span class="line">        <span class="variable language_">self</span>.gcn = gcn  <span class="comment"># 是否为 GCN 模式</span></span><br><span class="line">        <span class="variable language_">self</span>.embed_dim = embed_dim  <span class="comment"># 嵌入维度</span></span><br><span class="line">        <span class="variable language_">self</span>.cuda = cuda  <span class="comment"># 是否使用 GPU</span></span><br><span class="line">        <span class="variable language_">self</span>.aggregator.cuda = cuda  <span class="comment"># 聚合器是否使用 GPU</span></span><br><span class="line">        <span class="variable language_">self</span>.weight = nn.Parameter(</span><br><span class="line">            torch.FloatTensor(embed_dim, <span class="variable language_">self</span>.feat_dim <span class="keyword">if</span> <span class="variable language_">self</span>.gcn <span class="keyword">else</span> <span class="number">2</span> * <span class="variable language_">self</span>.feat_dim))  <span class="comment"># 权重矩阵</span></span><br><span class="line">        init.xavier_uniform_(<span class="variable language_">self</span>.weight)  <span class="comment"># 使用 Xavier 初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, nodes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成一批节点的嵌入表示</span></span><br><span class="line"><span class="string">        :param nodes: 节点列表</span></span><br><span class="line"><span class="string">        :return: 节点的嵌入表示</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        neigh_feats = <span class="variable language_">self</span>.aggregator.forward(nodes, [<span class="variable language_">self</span>.adj_lists[<span class="built_in">int</span>(node)] </span><br><span class="line">                                 <span class="keyword">for</span> node <span class="keyword">in</span> nodes],<span class="variable language_">self</span>.num_sample)  <span class="comment"># 聚合邻居特征</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(nodes, <span class="built_in">list</span>):</span><br><span class="line">            index = torch.LongTensor(nodes)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index = nodes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.gcn:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.cuda:</span><br><span class="line">                self_feats = <span class="variable language_">self</span>.features(index).cuda()  <span class="comment"># 获取节点自身特征</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self_feats = <span class="variable language_">self</span>.features(index)</span><br><span class="line">            combined = torch.cat((self_feats, neigh_feats), dim=<span class="number">1</span>)  <span class="comment"># 将节点自身特征与邻居特征拼接</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            combined = neigh_feats  <span class="comment"># 如果是 GCN 模式，则不拼接自身特征</span></span><br><span class="line"></span><br><span class="line">        combined = F.relu(<span class="variable language_">self</span>.weight.mm(combined.t()))  <span class="comment"># 通过线性层并应用 ReLU 激活</span></span><br><span class="line">        <span class="keyword">return</span> combined  <span class="comment"># 返回嵌入表示</span></span><br></pre></td></tr></table></figure><p>下面的代码实现了 <strong>GraphSAGE</strong> 中的 <code>MeanAggregator</code> 模块，使用邻居节点的特征均值来<strong>聚合</strong>节点的嵌入。这个模块的核心思想是从每个节点的邻居中采样，并计算邻居特征的平均值，从而生成聚合的节点表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MeanAggregator</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用邻居节点嵌入的平均值来聚合节点的嵌入</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, features, cuda=<span class="literal">False</span>, gcn=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化聚合器</span></span><br><span class="line"><span class="string">        :param features: 用于映射节点ID到特征的函数</span></span><br><span class="line"><span class="string">        :param cuda: 是否使用 GPU</span></span><br><span class="line"><span class="string">        :param gcn: 是否使用 GraphSAGE 的 GCN 变体（带自环）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(MeanAggregator, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.features = features  <span class="comment"># 节点特征</span></span><br><span class="line">        <span class="variable language_">self</span>.cuda = cuda  <span class="comment"># 是否使用 GPU</span></span><br><span class="line">        <span class="variable language_">self</span>.gcn = gcn  <span class="comment"># 是否添加自环（类似 GCN）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, nodes, to_neighs, num_sample=<span class="number">10</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        进行聚合操作</span></span><br><span class="line"><span class="string">        :param nodes: 批次中的节点列表</span></span><br><span class="line"><span class="string">        :param to_neighs: 每个节点的邻居集合</span></span><br><span class="line"><span class="string">        :param num_sample: 每个节点采样的邻居数量（如果为 None 则不进行采样）</span></span><br><span class="line"><span class="string">        :return: 聚合后的特征</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        _<span class="built_in">set</span> = <span class="built_in">set</span></span><br><span class="line">        <span class="keyword">if</span> num_sample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _sample = random.sample</span><br><span class="line">            samp_neighs = [_<span class="built_in">set</span>(_sample(to_neigh, num_sample)) </span><br><span class="line">                  <span class="keyword">if</span> <span class="built_in">len</span>(to_neigh) &gt;= num_sample <span class="keyword">else</span> to_neigh <span class="keyword">for</span> to_neigh <span class="keyword">in</span> to_neighs]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            samp_neighs = to_neighs  <span class="comment"># 不进行采样时，使用所有邻居</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.gcn:</span><br><span class="line">            samp_neighs = [samp_neigh.union(<span class="built_in">set</span>([<span class="built_in">int</span>(nodes[i])])) <span class="keyword">for</span> i, samp_neigh <span class="keyword">in</span></span><br><span class="line">                           <span class="built_in">enumerate</span>(samp_neighs)]  <span class="comment"># 为每个节点添加自环</span></span><br><span class="line"></span><br><span class="line">        unique_nodes_list = <span class="built_in">list</span>(<span class="built_in">set</span>.union(*samp_neighs))  <span class="comment"># 获取所有唯一节点的列表</span></span><br><span class="line">        unique_nodes = &#123;n: i <span class="keyword">for</span> i, n <span class="keyword">in</span> <span class="built_in">enumerate</span>(unique_nodes_list)&#125;  <span class="comment"># 创建节点映射表</span></span><br><span class="line"></span><br><span class="line">        mask = Variable(torch.zeros(<span class="built_in">len</span>(samp_neighs), <span class="built_in">len</span>(unique_nodes)))  <span class="comment"># 初始化掩码矩阵</span></span><br><span class="line">        column_indices = [unique_nodes[n] <span class="keyword">for</span> samp_neigh <span class="keyword">in</span> samp_neighs <span class="keyword">for</span> n <span class="keyword">in</span> samp_neigh]</span><br><span class="line">        row_indices = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(samp_neighs)) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(samp_neighs[i]))]</span><br><span class="line">        mask[row_indices, column_indices] = <span class="number">1</span>  <span class="comment"># 构建掩码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.cuda:</span><br><span class="line">            mask = mask.cuda()</span><br><span class="line"></span><br><span class="line">        num_neigh = mask.<span class="built_in">sum</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)  <span class="comment"># 计算邻居数量</span></span><br><span class="line">        mask = mask.div(num_neigh)  <span class="comment"># 正则化掩码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.cuda:</span><br><span class="line">            embed_matrix = <span class="variable language_">self</span>.features(torch.LongTensor(unique_nodes_list).cuda())  <span class="comment"># 获取节点特征</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            embed_matrix = <span class="variable language_">self</span>.features(torch.LongTensor(unique_nodes_list))</span><br><span class="line"></span><br><span class="line">        to_feats = mask.mm(embed_matrix)  <span class="comment"># 聚合特征</span></span><br><span class="line">        <span class="keyword">return</span> to_feats  <span class="comment"># 返回聚合后的特征</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pre-trained Online Contrastive Learning for Insurance Fraud Detection</title>
      <link href="/2024/09/29/Pre-trained%20Online%20Contrastive%20Learning%20for%20Insurance%20Fraud%20Detection/"/>
      <url>/2024/09/29/Pre-trained%20Online%20Contrastive%20Learning%20for%20Insurance%20Fraud%20Detection/</url>
      
        <content type="html"><![CDATA[<p>主要探讨了医疗保险欺诈检测中的挑战，并提出了一种创新的解决方案，称为预训练的在线对比学习模型（POCL）</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>​    医疗保险欺诈一直是医疗行业中的重要挑战。现有的欺诈检测模型大多集中在离线学习场景。然而，欺诈模式不断演变，这使得基于过去数据训练的模型难以检测新出现的欺诈模式，在医疗欺诈检测中构成了严重的挑战。此外，现有的增量学习模型主要旨在解决灾难性遗忘问题，但在欺诈检测中的表现往往不尽如人意。为了解决这一挑战，本文提出了一种创新的在线学习方法，称为POCL。该方法将对比学习的预训练与在线更新策略相结合。在预训练阶段，我们利用对比学习在历史数据上进行预训练，能够学习到深层特征并获取丰富的风险表示。在在线学习阶段，我们采用了“时间记忆感知突触”在线更新策略，使模型能够基于不断涌现的新数据进行增量学习和优化。这确保了模型能够及时适应欺诈模式，并减少对以往知识的遗忘。我们的模型在真实世界的保险欺诈数据集上进行了广泛的实验和评估，结果表明，与最先进的基线方法相比，我们的模型在准确性上具有显著优势，同时表现出较低的运行时间和空间消耗。我们的代码已在 <a href="https://github.com/finint/POCL">https://github.com/finint/POCL</a> 上发布。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>​    医疗保险欺诈对社会造成了严重危害，并引起了广泛关注。2017年，美国在医疗保健上的支出达到3.5万亿美元，其中约7200亿美元用于医疗保险。然而，欺诈性组织和个人利用这些资金，导致3%到10%的医疗保险资金被浪费。随着欺诈手段的不断演变，传统的静态检测系统难以应对这些新的挑战。</p><p>​    欺诈检测领域已有悠久历史，最早可以追溯到20世纪80年代。传统方法主要基于规则或机器学习，但随着深度学习的普及，图神经网络（GNN）开始在欺诈检测中展现出潜力。然而，大多数现有方法依赖于离线学习，直接应用于在线场景时表现不佳。重新训练模型也带来了巨大的计算负担。</p><p>​    近年出现了一些增量学习和在线学习的欺诈检测模型，它们在动态场景中展现了良好效果，但仍存在忽视欺诈结构特征或无法存储历史数据的局限性。</p><p>​    为了应对这些挑战，我们提出了一种新的预训练在线对比学习模型（POCL），这是一个创新的在线学习图神经网络，专门用于医疗保险欺诈检测。</p><p>​    我们首先将历史数据集划分为正负医疗节点图，通过对比这两类图之间的差异来预训练模型。对比学习可以帮助发现复杂的模式，从而提高欺诈检测的精度。实验表明，该模型能够有效地将不断演变的欺诈特征映射到一致的空间中，从而减少更新的难度并降低遗忘的概率。接着，我们引入了下游欺诈检测网络，并将其与预训练模型结合，构建了一个端到端的欺诈检测模型。在在线学习阶段，我们采用了一种新颖的时间记忆感知突触（MAS）方法来更新模型。该方法结合了时间特征，并通过动量技术来整合历史权重，确保在不存储任何历史数据的情况下，平衡新数据的学习和已有知识的保留。<br>​    我们的工作有以下贡献：</p><pre><code> 1. 我们首次在保险欺诈检测领域引入了**在线学习模型**，模型能够有效融合结构特征并适应不断变化的欺诈模式。 2. 我们提出了**基于对比学习预训练**的创新型**在线学习**GNN模型，结合Temporal MAS方法，能够有效识别欺诈行为并减少遗忘。 3. 在真实的医疗保险欺诈数据集上的大量实验表明，该模型在长期在线更新中表现出色，且具备较低的时间和空间复杂性。</code></pre><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><h2 id="欺诈检测"><a href="#欺诈检测" class="headerlink" title="欺诈检测"></a>欺诈检测</h2><p>​    近年来，欺诈检测的影响已经扩展到多个行业，尤其是在信用卡业务、金融领域和保险领域。机器学习算法在遏制欺诈行为方面发挥了重要作用。在欺诈检测中，有三种显著的深度学习方法。</p><pre><code> 1. FraudNE算法通过深度结构嵌入在欺诈检测中脱颖而出，能够捕捉复杂的非线性结构特征，并将异构顶点类型嵌入到一致的潜在空间中。 2. 图神经网络（GNNs），如PCGNN、CAREGNN和GTAN，在处理非结构化数据时展现了强大的鲁棒性。 3. 长短期记忆网络（LSTM）的应用在序列数据的解释中同样有效。</code></pre><p>​    然而，这些欺诈检测技术大多适用于离线学习场景，因此，当欺诈模式发生变化时，模型的准确性会显著降低，从而需要全面的模型重新训练。相比之下，我们的模型通过动态更新参数来规避这一问题，从而显著减少了时间和计算的负担。</p><h2 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h2><p>​    在线学习方法可以大致分为三类：1）权重正则化和优化策略；（2）内存管理策略；（3）网络结构自适应策略。<br>​    <strong>权重正则化和优化策略</strong>通过限制模型权重的更新来保持已学任务的性能，这种限制在学习新任务时抑制了权重的变化。<br>​    <strong>内存管理策略</strong>通过保存并重新学习部分已完成任务的数据，帮助模型记住旧任务。具体的应用包括记忆回放和伪重演。<br>​    <strong>网络结构自适应策略</strong>通过调整神经网络的结构来容纳新任务，从而缓解灾难性遗忘问题。<br>​    这类方法的具体应用包括动态可扩展网络、渐进神经网络、MAS和PackNet。就与图神经网络的结合而言，记忆回放方法已取得了显著成效，如ERGNN和基于生成重演的Stream GNN。然而，许多模型忽略了欺诈结构和时间演变的细微差别。此外，由于金融场景对数据存储的限制，保存历史数据变得不可行。相比之下，我们的模型无缝集成了时间和结构信息，能够在线更新参数，并且不需要存储历史数据。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240929104437783.png" alt="image-20240929104437783"></p><p>​    如图1所示，我们的模型流程可以分为三个阶段：<strong>预训练阶段</strong>、<strong>任务学习阶段</strong>和<strong>在线学习阶段</strong>。<br>​    首先，我们将对问题进行公式化描述。<br>​    然后，在预训练阶段中介绍预训练模型及其优化策略。在任务学习阶段中，我们将描述如何将预训练模型与任务学习模型结合起来训练离线模型。<br>​    最后，在在线学习阶段，我们将介绍用于确定变量变化程度的Temporal MAS在线更新方法。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​    在在线医疗欺诈检测中，我们将医疗索赔图定义为 $ G(C, E) $，其中 $ C = (h<em>1, h_2, …, h</em>{N<em>C}) $ 表示医疗索赔的集合，每个医疗索赔的特征为 $ h_i $，而 $ E = (e_1, e_2, …, e_N) $ 表示索赔之间的边，其中两个连接的索赔来自同一个医疗提供者或受益人。这里，$ N_C $ 是索赔的数量，$ N $ 是图中的边数。在在线学习场景中，给定两部分数据：历史数据集 $ G_h = (G_1^h, G_2^h, …, G_T^h) $ 和在线学习数据集 $ G_o = (G_1^o, G_2^o, …, G_T^o) $，我们的目标是学习一系列参数 $ (\theta_0, \theta_1, …, \theta_T) $，其中 $ \theta_0 $ 是基于整个历史数据集 $ G_h $ 使用传统训练方法训练的GNN模型的参数，而 $ \theta_t $ (当 $ t &gt; 0 $ 时) 是通过在线学习数据 $ G_t^o $ 递增地训练得出的模型参数，基于上一轮参数 $ \theta</em>{t-1} $ 进行在线学习更新。我们的目标是在不重新训练整个模型的情况下，保持模型 $ \theta $ 的高准确性，并期望它能够检测到一些模式发生变化的情况。</p><h2 id="提升鲁棒性的预训练模型"><a href="#提升鲁棒性的预训练模型" class="headerlink" title="提升鲁棒性的预训练模型"></a>提升鲁棒性的预训练模型</h2><p>​    在预训练阶段，我们将医疗索赔图 $ G $ 中的索赔分为正集 $ h<em>p $ 和负集 $ h_n $。随后，利用数据集提供的方案在两个图中建立边，从而生成了两个独立的图：正图 $ G_p $ 和负图 $ G_n $。接着，我们使用这两个图训练预训练模型 $ \theta</em>{pre} $。</p><p>​    我们使用GraphSAGE作为我们的预训练模型，其第 $ k $ 层定义如下：</p><script type="math/tex; mode=display">h_k = \sigma(W_k \cdot \text{MEAN}(\{h_{k-1}^v\} \cup \{h_{k-1}^u, \forall u \in N(v)\})),</script><p>​    其中 $ N(v) $ 是节点 $ v $ 的邻居集合，$ \sigma $ 是激活函数。接着，我们通过模型更新两个特征嵌入 $ h’<em>p = F</em>{\theta<em>{pre}}(h_p) $ 和 $ h’_n = F</em>{\theta_{pre}}(h_n) $，这些将被用于欺诈检测。</p><p>​    我们借鉴了文献中的方法，使用二元交叉熵损失函数来帮助识别欺诈模式：</p><script type="math/tex; mode=display">L_{pre} = \sum \log(D(h'_p, s)) + \sum \log(1 - D(h'_n, s)),</script><p>​    其中 $ D $ 是距离函数，定义为 $ D = h’_p \cdot W \cdot s $，$ W $ 是可学习的矩阵，$ s $ 是逻辑中心，可以设为 $ h_p $ 或 $ E $ 的均值。在实际应用中，我们将 $ s $ 设为 $ E $，从而公式可以简化为：</p><script type="math/tex; mode=display">L_{pre} = \sum \log(h'_p \cdot W) + \sum \log(1 - h'_n \cdot W),</script><p>​    该损失函数旨在有效区分正负实例，使模型能够专注于学习与医疗欺诈相关的特定模式。它将相同标签的节点彼此拉近，将不同标签的节点在特征空间中推开，使模型能够专注于相似节点之间的关系，并找到欺诈节点与非欺诈节点之间的差异。</p><h2 id="检测网络和任务学习"><a href="#检测网络和任务学习" class="headerlink" title="检测网络和任务学习"></a>检测网络和任务学习</h2><p>​    预训练模型的输出修改了特征矩阵而非直接进行预测，在下游任务中，我们使用图注意力网络（GAT）作为我们的检测网络，其中在第 $ k $ 层中，计算注意力系数的公式如下：</p><script type="math/tex; mode=display">\alpha^{(i,j)}_k = \frac{\exp\left(\sigma\left(a^T [W_k h^{(i)}_k || W_k h^{(j)}_k]\right)\right)}{\sum_{m \in N(i)} \exp\left(\sigma\left(a^T [W_k h^{(i)}_k || W_k h^{(m)}_k]\right)\right)},</script><p>​    其中 $ W_k $ 是第 $ k $ 层的权重矩阵，$ a $ 是注意力参数，$ || $ 表示拼接操作，$ \sigma $ 是LeakyReLU函数。在获得节点之间的注意力系数后，我们将GAT的第 $ k $ 层定义为：</p><script type="math/tex; mode=display">\text{GATLayer}_k(h_k) = \sigma\left(\sum_{j \in N(i)} \alpha^{(i,j)}_k W_k h^{(j)}_k\right),</script><p>​    其中 $ N(i) $ 是节点 $ i $ 的邻居节点集合。</p><p>​    接下来，我们将预训练模型与检测网络结合，构建了一个端到端模型。我们使用历史数据集 $ G<em>h $ 训练整个模型，这包括训练检测模型 $ \theta</em>{detect} $ 并微调预训练模型 $ \theta<em>{pre} $。然而，在此步骤中会面临一个关键挑战——确保预训练网络 $ \theta</em>{detect} $ 能够从标签中学习，而 $ \theta<em>{pre} $ 不会遗忘其已经获取的有价值信息。为了解决这一问题，我们提出了一种新的损失函数，能够有效缓解灾难性遗忘。我们在标准的交叉熵损失函数上引入了一个惩罚项 $ P = \sum \log(h’</em>{ppre} \cdot W) + \sum \log(1 - h’<em>{npre} \cdot W) $，因此整体损失 $ L</em>{detect} $ 为：</p><script type="math/tex; mode=display">L_{detect} = -\sum (y \cdot \log(p) + (1 - y) \cdot \log(1 - p)) + \sum \log(h'_{ppre} \cdot W) + \sum \log(1 - h'_{npre} \cdot W),</script><p>​    其中 $ h’<em>{ppre} $ 是预训练模型 $ F</em>{\theta<em>{pre}}(h) $ 的正输出部分，而 $ h’</em>{npre} $ 是负输出部分。我们修改后的二元交叉熵损失基于之前的交叉熵损失 $ L<em>{pre} $。通过在损失函数中引入惩罚项 $ P $，我们鼓励预训练网络 $ \theta</em>{pre} $ 保留其先前学习到的特征，同时帮助整个模型从新数据中学习。该方法确保了学习过程的平衡，防止模型过度关注新数据而忽视在预训练阶段获得的重要信息。</p><h2 id="在线学习与遗忘控制"><a href="#在线学习与遗忘控制" class="headerlink" title="在线学习与遗忘控制"></a>在线学习与遗忘控制</h2><p>​    为了应对不断变化的欺诈模式，而不需要重新训练整个模型，我们采用了一种在线学习方法对模型进行增量更新。由于金融场景的独特性，我们每次只能访问部分在线数据集 $ G_o $。在时间点 $ t $ 时，我们的模型可以表示为：</p><script type="math/tex; mode=display">\hat{p}_t = F_{\theta_{t-1}^{detect}}(F_{\theta_{t-1}^{pre}}(G_t^o)),</script><p>​    其中 $ \hat{p}<em>t $ 表示预测的欺诈可能性，$ F</em>{\theta<em>{t-1}^{detect}} $ 是时间点 $ t-1 $ 时的检测模型函数，$ F</em>{\theta_{t-1}^{pre}} $ 是时间点 $ t-1 $ 时的预训练模型函数。这些函数从时间点 1 到 $ t-1 $ 的数据中学习。</p><p>​    在医疗保险欺诈检测场景中，我们观察到新出现的欺诈模式往往伴随着现有的模式。这意味着无法及时学习新模式或遗忘旧模式都会导致准确性下降。为了在在线学习期间控制学习和遗忘的内容，我们设计了一种基于MAS（Memory Aware Synapses）的新方法，称为Temporal MAS。与其他增量学习或在线学习方法相比，这种方法不需要存储历史数据，这对我们的模型至关重要。它的时间效率非常高，因为它只需计算每个参数的梯度并将其合并，从而产生固定的时间和空间开销。此外，它利用了医疗保险欺诈检测中欺诈模式不断变化的特点。通过动量方法结合历史重要性权重和个体任务的重要性权重，该模型能够在学习新模式时平衡遗忘和保留知识。这样可以让模型随着时间的推移适应欺诈模式的变化，使其在检测医疗欺诈方面更加稳健和有效。</p><p>​    首先，我们需要计算模型参数在单个图中的重要性权重。我们使用每个参数的梯度作为当前任务的参数重要性权重，因为较大的梯度表明修改该参数对模型输出的影响更大，从而更容易遭遇灾难性遗忘：</p><script type="math/tex; mode=display">F_{\theta}(h_k + \delta) - F_{\theta}(h_k) \approx \sum_{i,j} \Omega_{ij}(h_k)\delta_{ij},</script><p>​    其中 $ h_k $ 是图特征，$ \delta $ 是参数 $ \theta $ 的小变化。我们使用梯度计算这些重要性权重：</p><script type="math/tex; mode=display">\Omega_{ij} = \frac{\partial(F_{\theta}(x_k))}{\partial\theta_{ij}}.</script><p>​    在医疗保险欺诈检测的在线学习中，新的欺诈模式逐渐出现，并可能取代旧的模式。简单地将多个图的参数重要性权重相加是不足的。为了解决这一问题，我们采用了动量的概念，考虑参数重要性权重变化的趋势，并逐渐减少先前权重的重要性。通过引入动量思想，我们能够自适应地调整重要性权重，允许模型逐渐忘记长时间未出现的过时模式。这种自适应机制确保了模型能够不断学习并适应新的欺诈模式，同时仍然保留检测旧模式的能力。我们通过以下公式计算调整后的重要性权重：</p><script type="math/tex; mode=display">I_t = \lambda \times I_{t-1} + (1 - \lambda) \times \Omega_t,</script><p>​    其中 $ \lambda $ 是动量参数，$ \Omega_t $ 是图 $ G_t^o $ 的重要性权重。</p><p>​    在计算出全局重要性权重后，我们将其作为惩罚项纳入损失函数 $ L $ 中：</p><script type="math/tex; mode=display">L_{online} = -\sum( y_t \cdot \log(p_t) + (1 - y_t) \cdot \log(1 - p_t)) + \sum \log(h'_p \cdot W) + \sum \log(1 - h'_n \cdot W) + \omega \sum_{i,j} I_t(\theta_{t-1} - \theta_t)^2.</script><p>​    其中 $ y<em>t $ 是输入的真实标签，$ p_t $ 是模型的预测结果，$ h’_p $ 是预训练模型 $ \theta</em>{t-1}^{pre} $ 在时间点 $ t $ 的正输出，$ \omega $ 是惩罚项的权重，$ h’_n $ 是负输出。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>在本节中，我们通过广泛的实验来评估我们提出的POCL模型的有效性。我们的实验设置包括以下几部分内容：数据集的介绍、实验设置以及基线模型的选择。接着，我们报告实验结果，评估我们的方法与现有方法的性能对比。</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>我们使用了一个真实世界的医疗保险欺诈数据集，该数据集由一家大型医疗保险公司提供。数据集中包含了数百万的医疗索赔记录，每条记录对应一个医疗服务的申请。欺诈行为包括不同类型的虚假索赔，例如过度开具处方、无效的医疗服务收费等。我们将这些数据集按照时间顺序分为历史数据集和在线数据集，历史数据集用于离线训练，而在线数据集则用于在线学习和模型更新。</p><h2 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h2><p>在所有实验中，我们使用了以下设置来训练和评估模型：</p><ul><li><strong>预处理</strong>：我们对每个医疗索赔的特征进行了标准化处理，并将其转化为嵌入向量。为了保证结果的可复现性，我们随机选择了80%的数据作为训练集，剩余20%作为测试集。</li><li><strong>训练过程</strong>：在预训练阶段，我们首先使用GraphSAGE对历史数据集进行训练。随后，在任务学习阶段，我们将预训练模型与检测网络相结合，并在离线任务中训练模型。在在线学习阶段，我们使用Temporal MAS方法对模型进行增量更新。</li><li><strong>评估指标</strong>：为了评估模型的性能，我们使用了以下评估指标：准确率（Accuracy）、查准率（Precision）、查全率（Recall）以及F1值（F1 Score）。此外，我们还计算了每个模型的运行时间和空间开销，以评估其在大规模数据集上的适用性。</li></ul><h2 id="基线模型"><a href="#基线模型" class="headerlink" title="基线模型"></a>基线模型</h2><p>我们将POCL模型与以下几种流行的欺诈检测模型进行了对比：</p><ol><li><strong>FraudNE</strong>：这是一个基于嵌入的方法，通过捕捉医疗服务的结构特征来检测欺诈。</li><li><strong>PCGNN</strong>：这是一个图神经网络模型，专为医疗欺诈检测设计，能够利用图结构信息进行预测。</li><li><strong>GTAN</strong>：这是一个基于图注意力网络的欺诈检测模型，通过引入注意力机制来改善检测的准确性。</li><li><strong>LSTM</strong>：这是一个基于时间序列数据的长短期记忆网络（LSTM），适用于处理带有时间维度的欺诈检测任务。</li><li><strong>Online-GNN</strong>：这是一个现有的在线学习图神经网络模型，用于动态检测欺诈行为。</li></ol><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>在实验中，我们对各个模型的性能进行了全面评估，实验结果如表1所示。</p><div class="table-container"><table><thead><tr><th>模型</th><th>准确率(%)</th><th>查准率(%)</th><th>查全率(%)</th><th>F1值(%)</th><th>运行时间(s)</th><th>空间开销(MB)</th></tr></thead><tbody><tr><td>FraudNE</td><td>85.3</td><td>81.2</td><td>78.4</td><td>79.8</td><td>1234</td><td>512</td></tr><tr><td>PCGNN</td><td>87.6</td><td>84.5</td><td>82.3</td><td>83.4</td><td>1305</td><td>560</td></tr><tr><td>GTAN</td><td>88.2</td><td>85.7</td><td>83.9</td><td>84.8</td><td>1450</td><td>600</td></tr><tr><td>LSTM</td><td>82.5</td><td>78.1</td><td>77.2</td><td>77.6</td><td>1100</td><td>480</td></tr><tr><td>Online-GNN</td><td>89.0</td><td>86.3</td><td>85.1</td><td>85.7</td><td>1400</td><td>580</td></tr><tr><td><strong>POCL (我们的模型)</strong></td><td><strong>92.3</strong></td><td><strong>90.5</strong></td><td><strong>89.2</strong></td><td><strong>89.8</strong></td><td><strong>1280</strong></td><td><strong>520</strong></td></tr></tbody></table></div><p>​    从表1的结果中可以看出，POCL模型在所有评估指标上均优于其他基线模型，特别是在准确率和F1值上具有显著的优势。同时，POCL模型在运行时间和空间开销方面表现出色，能够在大规模数据集上高效运行。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>为了进一步验证我们方法中的各个组件对整体性能的影响，我们还进行了消融实验。我们分别去除对比学习预训练和Temporal MAS在线更新策略，并比较了模型的性能变化。</p><div class="table-container"><table><thead><tr><th>实验配置</th><th>准确率(%)</th><th>查准率(%)</th><th>查全率(%)</th><th>F1值(%)</th></tr></thead><tbody><tr><td>全模型（POCL）</td><td>92.3</td><td>90.5</td><td>89.2</td><td>89.8</td></tr><tr><td>去除对比学习预训练</td><td>88.4</td><td>85.1</td><td>84.2</td><td>84.6</td></tr><tr><td>去除Temporal MAS在线更新</td><td>86.9</td><td>84.3</td><td>82.7</td><td>83.5</td></tr></tbody></table></div><p>​    从表2中可以看出，对比学习预训练和Temporal MAS在线更新对模型的整体性能均有重要贡献。去除对比学习预训练后，模型的准确率和F1值显著下降，而去除Temporal MAS在线更新策略也会导致性能下降。这表明，POCL模型中各个组件之间的协同作用在提高医疗欺诈检测的准确性和鲁棒性方面具有重要意义。</p><h2 id="案例研究"><a href="#案例研究" class="headerlink" title="案例研究"></a>案例研究</h2><p>​    在 POCL 模型中，通过对比学习实现的预训练模型在欺诈表示学习中发挥了关键作用，增强了模型的稳健性。同时，Temporal MAS 在线更新方法巧妙地平衡了信息保留和淘汰之间的微妙关系。</p><p>​    我们展示了一个案例研究，重点关注第100天和第300天的两个不同的医疗索赔图，如图5所示。图中黄色节点代表欺诈性索赔，而蓝色节点表示合法交易。在降维处理后，这些节点被映射到二维空间。图5(a)和图5(c)分别显示了原始特征的分布，而图5(b)和图5(d)展示了预训练模型的属性输出。</p><p>​    预训练模型扩大了不同标签节点之间的空间，并促使相同标签节点的聚类。这种增强使欺诈检测网络更容易区分这两类不同的节点。我们注意到图5(a)和图5(c)之间的节点分布模式发生了显著变化。图5(a)展示了欺诈性节点和合法节点的均匀分布，而图5(c)则显示出欺诈性节点的密集聚集，这表明在200天的跨度中欺诈模式发生了演变。尽管输入特征发生了变化，然而图5(b)和图5(d)的输出特征模式却保持了显著的一致性。与图5(a)和图5(c)中的显著变化相比，这种一致性表明 Temporal MAS 在线学习方法有效地减少了灾难性遗忘的影响，进一步证明了该方法的有效性。此外，由预训练模型生成的输出特征的一致性增加了系统的稳健性，这有助于减少在线学习过程中参数调整的幅度，并降低灾难性遗忘的可能性。</p><p>​    总结来说，POCL 模型在长期在线更新过程中是应对灾难性遗忘的有效对策，同时展示出识别欺诈性和合法节点特征的细微能力。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>​    在本研究中，我们提出了 POCL 模型，该模型结合了对比学习和在线学习，以应对不断演变的保险欺诈场景。我们的模型采用对比学习提取和映射特征，同时集成了 Temporal MAS 方法进行在线参数更新。这保证了模型在长期在线学习场景中的高性能，同时减少了计算开销和训练时间。我们对多个真实世界数据集进行了广泛的评估，结果表明，与其他在线学习和欺诈检测模型相比，POCL 模型具有更高的效率。我们相信该模型能够在打击保险欺诈方面做出贡献。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图异常检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GFN</title>
      <link href="/2024/09/18/GFN/"/>
      <url>/2024/09/18/GFN/</url>
      
        <content type="html"><![CDATA[<p>这篇论文的核心研究问题是探讨现有的图神经网络（GNNs）在处理图分类任务时，是否需要复杂的架构和高计算成本来实现优异的性能。为此，论文提出了将GNN分解为两个主要部分，并对这两个部分的必要性进行深入研究和简化实验。</p><h3 id="1-图神经网络的背景"><a href="#1-图神经网络的背景" class="headerlink" title="1. 图神经网络的背景"></a>1. <strong>图神经网络的背景</strong></h3><p>GNN在近年来吸引了大量的关注，尤其是在图分类和节点分类任务中取得了显著的性能提升。与传统的神经网络（如CNN和RNN）不同，GNN能够直接作用于图结构数据，这使得它们在处理社交网络、生物网络等具有复杂关系的数据时表现得更为出色。</p><p>然而，GNN的高效能背后往往伴随着复杂的计算过程。作者提出的问题是：这些复杂的计算，尤其是多层邻居聚合和非线性激活等操作，是否真的是必要的？尤其是在实际任务中，GNN是否真的学到了复杂的图结构特征？</p><h3 id="2-提出的框架：分解与简化"><a href="#2-提出的框架：分解与简化" class="headerlink" title="2. 提出的框架：分解与简化"></a>2. <strong>提出的框架：分解与简化</strong></h3><p>为了更好地理解GNN的学习机制，作者将GNN的架构分解为两个部分：</p><ul><li><strong>图过滤部分（Graph Filtering）</strong>：这一部分负责通过邻居聚合操作更新节点表示，通常包括多步的邻居聚合操作以及非线性激活函数。</li><li><strong>集合函数部分（Set Function）</strong>：这一部分负责将更新后的节点特征组合在一起进行全图级别的预测，通常通过池化操作来汇总节点特征。</li></ul><p>在此基础上，作者提出了两种简化模型：</p><ul><li><strong>图特征网络（Graph Feature Network, GFN）</strong>：GFN简化了图过滤部分，它通过图增强特征直接构造输入，而不是多步的邻居聚合。具体地，GFN只在训练之前通过简单的图拓扑特征（如节点度数）和图传播特征（如节点属性的多层传播）构建输入，然后通过一个轻量级的神经网络进行学习。这一简化显著减少了计算成本。</li><li><strong>图线性网络（Graph Linear Network, GLN）</strong>：GLN在GFN的基础上进一步简化，将集合函数部分也线性化，最终形成一个线性模型。</li></ul><h3 id="3-实验结果与分析"><a href="#3-实验结果与分析" class="headerlink" title="3. 实验结果与分析"></a>3. <strong>实验结果与分析</strong></h3><p>为了验证这些简化模型的有效性，作者在多个常见的图分类数据集上进行了实验。结果令人惊讶，GFN的表现与许多最近提出的复杂GNN模型相当，甚至在某些情况下表现更优，但其计算成本却显著降低。与之相比，GLN的性能则显著下降，这表明非线性的集合函数在图分类任务中起着关键作用。</p><p>以下是实验中的一些关键发现：</p><ul><li><strong>GFN与复杂GNN性能相当</strong>：尽管没有多层的非线性邻居聚合操作，GFN仍然能够在大多数数据集上达到或超过最先进的GNN模型。这表明，现有的数据集可能并不需要非常复杂的图结构特征提取，简单的图增强特征和非线性集合函数就足够了。</li><li><strong>GLN性能较差</strong>：相比之下，GLN的表现要差得多。这进一步验证了非线性集合函数的重要性。</li><li><strong>训练效率显著提高</strong>：GFN在计算效率上具有明显优势，尤其是在训练过程中，GFN的速度比传统GNN要快得多，速度提升在1.4倍至6.7倍之间，具体取决于数据集的规模和图结构的复杂度。</li></ul><h3 id="4-深入探讨非线性图过滤的必要性"><a href="#4-深入探讨非线性图过滤的必要性" class="headerlink" title="4. 深入探讨非线性图过滤的必要性"></a>4. <strong>深入探讨非线性图过滤的必要性</strong></h3><p>论文提出了一个有趣的假设：现有的图分类基准测试可能对复杂的图过滤操作需求较低。这意味着，虽然GNN理论上可以处理非常复杂的图结构，但在许多实际应用中，简单的线性图过滤可能已经足够好。换句话说，现有的数据集可能没有足够的图结构复杂度来真正挑战GNN的潜力。因此，未来更复杂、更具挑战性的图分类任务可能需要更复杂的图过滤操作。</p><h3 id="5-GFN与GCN的对比"><a href="#5-GFN与GCN的对比" class="headerlink" title="5. GFN与GCN的对比"></a>5. <strong>GFN与GCN的对比</strong></h3><p>GFN相比于图卷积网络（GCN）的一个优势在于，它不需要多次迭代邻居聚合，这显著减少了训练过程中的计算量。此外，由于GFN在初始阶段已经获得了多尺度的节点特征，因此可以在更少的特征转换层中取得与GCN类似的效果。</p><h3 id="6-未来的研究方向"><a href="#6-未来的研究方向" class="headerlink" title="6. 未来的研究方向"></a>6. <strong>未来的研究方向</strong></h3><p>论文在结论部分提出了一些未来的研究方向，包括：</p><ul><li>探索是否有更复杂的图分类任务可以揭示复杂GNN的优势。</li><li>研究不同的图增强特征以及它们如何影响模型的表现。</li><li>进一步研究GFN在其他类型图任务（如节点分类、链接预测）上的表现。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇论文通过对GNN的分解和线性化，质疑了复杂GNN架构在图分类任务中的必要性。研究结果表明，简单的图增强特征加上非线性集合函数已经足够应对许多常见的图分类任务，同时显著提高了计算效率。论文为未来的GNN研究提供了新的思路，即如何在不增加模型复杂度的情况下，优化性能和效率。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphPro-Graph Pre-training and Prompt Learning for Recommendation</title>
      <link href="/2024/09/09/GraphPro/"/>
      <url>/2024/09/09/GraphPro/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 研究背景和动机</strong></p><ul><li>现有基于 GNN 的推荐系统大多针对静态场景，忽略了推荐的动态性，在处理新数据分布变化时存在局限性，难以适应用户偏好的变化，导致推荐效果和可扩展性受限。</li></ul><p><strong>2. 主要贡献</strong></p><ul><li><p>强调了有效且可扩展地预训练和微调基于图的推荐器的重要性，以适应随时间演变的用户偏好，从而在动态环境中提供最新且准确的推荐。</p></li><li><p>引入 GraphPro 框架，通过 GNN 的预训练和微调有效处理不断变化的用户偏好，提出的提示学习范式能够在时间和结构上促进相关知识从预训练模型到下游推荐任务的转移。</p></li><li><p>引入基于快照的动态推荐系统评估设置，相比于传统的单时间测试方法，更能近似真实世界的推荐场景。</p></li><li><p>通过在不同数据集上的实验展示了 GraphPro 的鲁棒性、效率和性能优势，并通过在大规模在线平台上的部署进一步验证了其有效性。</p><p><img src="https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/image-20240909142218096.png" alt="image-20240909142218096"></p></li></ul><p><strong>3. 方法</strong></p><ul><li>Graph Pro-training with Temporal Prompt Mechanism：在实际推荐场景中，用户 - 物品交互数据不断积累，引入时间提示机制，通过相对时间编码方案捕获用户 - 物品交互的时间序列，将时间感知的上下文信息从最新的用户偏好和行为中融入，从而实现个性化和及时的推荐。具体包括：<ul><li><strong>Temporal Prompt Mechanism</strong>：提出相对时间编码方案，与 NLP 中序列建模的最新进展类似，利用相对位置编码，避免了像 BERT 中使用绝对位置嵌入的局限性，能够更好地捕获不同时间槽中用户行为的依赖关系，具有更好的泛化能力。</li><li><strong>Temporal Prompt - enhanced Graph Convolutions</strong>：将相对时间编码融入图卷积中，考虑邻居间的时间信息，通过 softmax 函数对图上一阶邻居的时间属性进行处理，引入额外的归一化项到 LightGCN 的消息传递步骤中，增强了 GNN 对用户 - 物品交互随时间演变的适应性，提高了推荐的准确性和个性化程度，同时具有良好的通用性和计算效率。</li></ul></li><li>Fine - Tuning with Graph Prompt Mechanism：在微调阶段，传统的增量微调机制存在一些问题，如可能导致模型收敛到局部最优，以及计算负担较大。为了解决这些问题，引入了图结构提示机制：<ul><li><strong>Graph - Structural Prompt Mechanism</strong>：利用预训练时间和当前时间之间的交互边缘作为提示边缘，将图在特定时间段的边缘视为离散提示，以指导预训练嵌入的传播，捕获预训练和微调时间点之间的表示偏移，为微调提供更好的时间感知初始嵌入。通过生成提示结构，结合预训练图结构和采样的未来边缘，进行前向传播生成微调的嵌入，并引入随机门控机制来减轻过拟合，提高泛化能力。</li><li><strong>Prompt Learning with Adaptive Gating Mechanism</strong>：为了解决时间感知图快照之间节点表示的分布偏移问题，引入了可学习的门控机制，自适应地转换输入嵌入，以建模用户 / 物品表示随时间的变化，保留做出准确未来推荐所需的信息信号，通过梯度截断防止对大规模预训练模型的直接优化，使用新的交互结构上下文微调以提高目标时间间隔的预测准确性。</li></ul></li></ul><p><strong>4. 实验评估</strong></p><ul><li>实验设置：<ul><li><strong>数据集</strong>：使用三个覆盖不同真实场景的公共数据集，包括淘宝、口碑和亚马逊。</li><li><strong>基线模型</strong>：包括最近的动态 GNNs 和图提示方法，如 DGCN、GraphPrompt、GPF、EvolveGCN、ROLAND 等。</li><li><strong>与 GNN 推荐器集成</strong>：GraphPro 可作为插件组件与任何基于 GNN 的推荐器集成，实验中使用 LightGCN 实现，并与 SGL、MixGCF、SimGCL 等自监督学习推荐器集成进行评估。</li><li><strong>评估协议</strong>：使用图快照模拟现实动态，采用两步滑动窗口技术进行学习和预测，在预训练和微调框架下进行评估，使用 Recall@k 和 nDCG@k 等标准指标。</li></ul></li><li>性能比较（RQ1 - RQ3）：<ul><li><strong>与基线比较</strong>：GraphPro 优于图提示和动态图学习方法，其时间提示机制和图提示设计能够有效捕获用户 - 物品交互的演变，确保知识的无缝转移，减少分布偏移；不同基线方法的性能表现复杂，EvolveGCN 在某些数据集上表现较好，但可能存在过拟合问题，ROLAND 由于模型参数更新方案复杂，可能导致表示学习受干扰，性能受限。</li><li><strong>与 SOTA 方法集成</strong>：GraphPro 与各种先进推荐器集成时表现出色，具有灵活性和提升性能的能力；不同基线方法的性能根据推荐器和数据集的不同而有所变化，没有一种方法在所有场景中占主导地位；GraphPro 能够充分利用基础模型改进的表示，而一些方法如 EvolveGCN - O 则未能体现出随着基础模型提升而带来的性能增益。</li><li><strong>与全数据训练比较</strong>：GraphPro 在淘宝和口碑数据集上的表现优于传统全数据训练方法，在亚马逊数据集上初始阶段具有优势；GraphPro 在训练效率上有显著提高，相比全数据训练方法在不同数据集上分别实现了 60 倍、24 倍和 81 倍的速度提升。</li></ul></li><li>消融实验（RQ4）：<ul><li><strong>关键组件在微调中的作用</strong>：通过移除 GraphPro 中的关键组件（Prompt Tuning、Adaptive GaTing、Interplotive Update）形成三个变体进行实验，结果表明 GraphPro 的三个关键元素都起着重要作用，任何一个元素的缺失都会降低推荐精度，延长收敛时间；结构提示和插值更新特征有助于提高准确性和避免局部最优，自适应门控特征对于加速收敛和提高准确性至关重要。</li><li><strong>预训练模型的影响</strong>：通过检查四个变体（包括使用相对时间编码和不同的预训练模型架构）来评估不同预训练模型架构对微调结果的影响。结果表明，时间提示机制在预训练和微调期间都能提高收敛速度和预测准确性，使用更强大的预训练模型与改进的性能相关，体现了框架在使用强大预训练模型方面的可扩展性和适应性。</li></ul></li><li>学习影响分析（RQ5 &amp; RQ6）：<ul><li><strong>微调与未微调（冷启动）节点</strong>：将用户分为微调用户和冷启动用户进行独立评估，GraphPro 能够有效增强两类用户的表示，在大多数场景中表现优于基线；GraphPro 在长期表现上更有效，能够避免陷入局部最优，实现更优的长期推荐效果。</li><li><strong>学习效率</strong>：GraphPro 作为一种参数高效的方法，在预训练和微调过程中减少了可学习权重，从而降低了训练时间和计算成本；与 EvolveGCN - O 和 GPF 相比，GraphPro 在淘宝和口碑数据集上不仅性能更优，而且收敛所需的轮次更少，训练时间更短。</li></ul></li><li><strong>在线部署（RQ7）</strong>：在一个大型在线内容平台上实施 GraphPro，用于个性化内容推荐，通过在线 A / B 测试，结果表明 GraphPro 能够有效建模不断演变的用户和物品表示，利用深度用户兴趣进行预训练和微调，显著增强了现实世界的推荐系统，并且易于部署和具有成本效益。</li></ul><p><strong>5. 相关工作</strong></p><ul><li><strong>GNNs 用于推荐</strong>：GNNs 在推荐系统中用于捕获多跳协作信号，如 NGCF、PinSage 等通过消息传递增强用户和物品嵌入，GCCF 添加残差结构，LightGCN 简化非线性；为解决图推荐器的稀疏性，引入了自监督技术如对比学习和生成方法。</li><li><strong>GNNs 的预训练和微调</strong>：研究者借鉴 NLP 的预训练和微调概念应用于 GNNs，设计了对比学习和基于信息最大化的预训练技术，以及链接预测、特征生成和基于提示的微调等创新方法，但这些方法在处理动态图学习的复杂性方面尚未完全克服，在具有时间元素的任务中性能不理想；在推荐任务中，一些方法专注于静态推荐设置，未能考虑用户偏好的动态演变，GraphPro 在处理预训练和微调中的动态图方面具有优势。</li><li><strong>动态图学习</strong>：研究动态图学习的方法如 EvolveGCN、Dyngraph2vec、DGNN、ROLAND 和 WinGNN 等利用 RNNs 和循环层来捕捉图的变化，但缺乏针对动态图的专用预训练和微调策略，可能会给用户和物品表示引入噪声；DGCN 在图推荐学习中考虑了动态性，但不能处理具有演变快照的图。</li><li><strong>序列推荐</strong>：序列推荐领域的一些方法如注意力 - 基于的 SASRec 和 BERT4Rec、GNN - 基于的 SURGE 和 Retagnn 以及 SSL 模型如 S3 - rec、ICL 和 DCRec 等，与本文方法类似关注时间动态，但与基于图的方法在 Top - K 项检索方面有所不同，且它们不包含明确的时间间隔。</li></ul><p><strong>6. 结论</strong><br>本文引入的 GraphPro 框架通过动态图预训练和提示学习相结合，显著增强了推荐系统对时间动态的适应性和可扩展性，通过实验验证了其在各种时间背景下提供准确动态推荐的能力，未来研究将深入探讨 GraphPro 的可解释性，特别是提示图边缘的方面。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph Contrastive Learning with Augmentations</title>
      <link href="/2024/08/26/GraphCL/"/>
      <url>/2024/08/26/GraphCL/</url>
      
        <content type="html"><![CDATA[<h1 id="引言（Introduction）"><a href="#引言（Introduction）" class="headerlink" title="引言（Introduction）"></a>引言（Introduction）</h1><ul><li>本文提出了一种新的图对比学习框架——<strong>GraphCL</strong>，专注于图神经网络（GNNs）的无监督预训练。</li><li>传统的GNN方法在处理图结构数据时，通常依赖于有监督的标签信息，而获取这些标签代价高昂。为了解决这个问题，作者采用了对比学习，通过最大化同一图的不同增强视图之间的相似性，来学习图的有效表示。</li></ul><h1 id="方法（Methodology）"><a href="#方法（Methodology）" class="headerlink" title="方法（Methodology）"></a>方法（Methodology）</h1><ul><li><strong>数据增强</strong>：作者设计了四种图数据增强方法：节点删除（Node Dropping）、边扰动（Edge Perturbation）、属性遮蔽（Attribute Masking）、子图抽样（Subgraph Sampling）。这些增强方法旨在通过不同视角来生成图数据，从而学习到对扰动具有鲁棒性的图表示。</li><li><strong>图对比学习框架（GraphCL）</strong>：<ul><li>两个增强视图通过GNN编码器生成图级表示向量，并通过投影头映射到另一个潜在空间。</li><li>使用归一化的温度缩放交叉熵损失（NT-Xent）作为对比损失函数，最大化正样本对之间的相似性，同时最小化负样本对之间的相似性。</li></ul></li></ul><h1 id="实验与结果（Experiments-and-Results）"><a href="#实验与结果（Experiments-and-Results）" class="headerlink" title="实验与结果（Experiments and Results）"></a>实验与结果（Experiments and Results）</h1><ul><li>作者在多个图分类数据集上验证了GraphCL的性能，并与其他最先进的方法进行了对比：<ul><li><strong>半监督学习</strong>：GraphCL在低标签率下的表现优于传统方法。</li><li><strong>无监督表示学习</strong>：GraphCL超越了多种图核方法和图表示学习方法。</li><li><strong>迁移学习</strong>：GraphCL在跨数据集的任务中表现出色，证明了其迁移能力。</li><li><strong>对抗鲁棒性</strong>：GraphCL在面对对抗攻击时表现出更强的鲁棒性，尤其是在更深层的GNN模型中。</li></ul></li></ul><h1 id="结论（Conclusion）"><a href="#结论（Conclusion）" class="headerlink" title="结论（Conclusion）"></a>结论（Conclusion）</h1><ul><li><strong>贡献总结</strong>：GraphCL框架通过对比学习和多样化的数据增强方法，实现了无监督预训练的有效性和广泛适用性。实验结果表明，GraphCL在多种任务和数据集上均表现优异，尤其在半监督学习、无监督表示学习、迁移学习以及对抗鲁棒性方面。</li><li><strong>未来展望</strong>：<ul><li>探索更多的数据增强方法和自适应策略。</li><li>扩展GraphCL的应用场景，如社交网络分析、生物信息学等。</li><li>结合其他图表示学习方法，构建更强大的混合模型。</li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文提出的GraphCL框架为图神经网络的无监督预训练提供了一个强大的工具，通过创新的对比学习机制和有效的数据增强方法，实现了在多种任务中的领先表现，为未来的研究和应用指明了方向。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01背包问题</title>
      <link href="/2024/08/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%923/"/>
      <url>/2024/08/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%923/</url>
      
        <content type="html"><![CDATA[<h1 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h1><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/description/">416. 分割等和子集 - 力扣（LeetCode）</a></p><p>使用01背包解决</p><p>定义：物品种类=nums.size()，物品重量=i，背包大小=sum/2，判断能否刚好装满</p><ul><li><p><code>1 &lt;= nums.length &lt;= 200</code></p></li><li><p><code>1 &lt;= nums[i] &lt;= 100</code></p><p>根据题目条件，sum可直接去最大值200*100=20000，则背包大小可即为10000+1=10001</p><p>dp[i]：</p></li></ul><p>递推公式：<script type="math/tex">dp[j]=max(dp[j],dp[j-nums[i]]+nums[i])</script></p><p>初始化：dp(10001,0)</p><p>遍历顺序：正常顺序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=sum/<span class="number">2</span>;j&gt;=nums[i];j--)&#123;</span><br><span class="line">        dp[j]=<span class="built_in">max</span>(dp[j],dp[j-nums[i]]+nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断：<script type="math/tex">dp[sum/2]==sum/2</script>即可</p><p>完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i : nums)</span><br><span class="line">            sum += i;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = target; j &gt;= nums[i]; j--)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (dp[target] == target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="1049-最后一块石头的重量II"><a href="#1049-最后一块石头的重量II" class="headerlink" title="1049.最后一块石头的重量II"></a>1049.最后一块石头的重量II</h1><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/description/">1049. 最后一块石头的重量 II - 力扣（LeetCode）</a></p><p>和上题思路一样，相当于划分集合，使得两集合相最小</p><p>直接给出答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i : stones)</span><br><span class="line">            sum += i;</span><br><span class="line">        <span class="type">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stones.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = target; j &gt;= stones[i]; j--)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">        <span class="keyword">return</span> sum - dp[target]*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494.目标和"></a>494.目标和</h1><p><a href="https://leetcode.cn/problems/target-sum/description/">494. 目标和 - 力扣（LeetCode）</a></p><p>本题是装满有几种方法，是一个<strong>组合</strong>问题，常用公式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] += dp[j - nums[i]]</span><br></pre></td></tr></table></figure><p>思路：还是分两个集合，两者相减为target</p><p>left+right=sum</p><p>left-right=target</p><p>left=(sum+target)/2</p><p>right=(sum-target)/2</p><p>定义：dp[j] 表示：填满j的包有dp[j]种方法</p><p>递推公式：已知nums[i]，则凑成dp[j]就有dp[j - nums[i]] 种方法。</p><p>初始化：dp[0]=1</p><p>遍历顺序：先nums，后target</p><p>！注意<script type="math/tex">abs(target) > sum</script>的特殊情况，此时没有方案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i : nums)</span><br><span class="line">            sum += i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(target) &gt; sum)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((sum + target) % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bagsize = (sum + target) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(bagsize + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = bagsize; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[bagsize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474.一和零"></a>474.一和零</h1><p><a href="https://leetcode.cn/problems/ones-and-zeroes/description/">474. 一和零 - 力扣（LeetCode）</a></p><p>特殊点：每个物品有两个维度的重量</p><p>定义：<script type="math/tex">dp[i][j]</script>：子集中i个0，j个1的最大长度</p><p>递推公式：计算str[i]中0、1个数记为m、n</p><script type="math/tex; mode=display">dp[i][j]=dp[i-m][j-n]+1</script><p>初始化：<script type="math/tex">dp[0][0]=0</script></p><p>遍历顺序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string s, <span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        a = b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                a++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;strs.<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">            <span class="built_in">func</span>(strs[k],a,b);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=a;i--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=b;j--)&#123;</span><br><span class="line">                    dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i-a][j-b]<span class="number">+1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全背包问题</title>
      <link href="/2024/08/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%924/"/>
      <url>/2024/08/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%924/</url>
      
        <content type="html"><![CDATA[<h1 id="518-零钱兑换II"><a href="#518-零钱兑换II" class="headerlink" title="518.零钱兑换II"></a>518.零钱兑换II</h1><p><a href="https://leetcode.cn/problems/coin-change-ii/description/">518. 零钱兑换 II - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;coins.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=coins[i];j&lt;=amount;j++)&#123;</span><br><span class="line">                dp[j]+=dp[j-coins[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然题简单，但是<strong>遍历顺序</strong>须仔细琢磨</p><p>因为<strong>纯完全背包</strong>求得装满背包的最大价值是多少，和凑成总和的元素有没有顺序没关系，即：有顺序也行，没有顺序也行。</p><p>而本题要求凑成总和的<strong>组合数</strong>，元素之间明确要求没有顺序。</p><p>所以纯完全背包是能凑成总和就行，不用管怎么凑的。</p><p>本题是求凑出来的方案个数，且每个方案个数是为<strong>组合数</strong>。</p><p>那么本题，两个for循环的先后顺序可就有说法了。</p><p>先来看 外层for循环遍历物品（钱币），内层for遍历背包（金钱总额）的情况。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设：coins[0] = 1，coins[1] = 5。</p><p>那么就是先把1加入计算，然后再把5加入计算，得到的方法数量只有{1, 5}这种情况。而不会出现{5, 1}的情况。</p><p><strong>所以这种遍历顺序中dp[j]里计算的是组合数！</strong></p><p>如果把两个for交换顺序，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j - coins[i] &gt;= <span class="number">0</span>) dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背包容量的每一个值，都是经过 1 和 5 的计算，包含了{1, 5} 和 {5, 1}两种情况。</p><p><strong>此时dp[j]里算出来的就是排列数！</strong></p><h1 id="377-组合总和-Ⅳ"><a href="#377-组合总和-Ⅳ" class="headerlink" title="377. 组合总和 Ⅳ"></a>377. 组合总和 Ⅳ</h1><p><a href="https://leetcode.cn/problems/combination-sum-iv/description/">377. 组合总和 Ⅳ - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; coins.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - coins[j] &gt;= <span class="number">0</span>&amp;&amp;dp[i] &lt; INT_MAX - dp[i-coins[j]])</span><br><span class="line">                    dp[i] += dp[i - coins[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;coins.size();i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j=coins[i];j&lt;=amount;j++)&#123;</span></span><br><span class="line">        <span class="comment">//         dp[j]+=dp[j-coins[i]];</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总结：</p><p><strong>如果求组合数就是外层for循环遍历物品，内层for遍历背包</strong>。</p><p><strong>如果求排列数就是外层for遍历背包，内层for循环遍历物品</strong>。</p><h1 id="70-爬楼梯（进阶版）"><a href="#70-爬楼梯（进阶版）" class="headerlink" title="70. 爬楼梯（进阶版）"></a>70. 爬楼梯（进阶版）</h1><p><a href="https://kamacoder.com/problempage.php?pid=1067">57. 爬楼梯（第八期模拟笔试） (kamacoder.com)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(i-j&gt;=<span class="number">0</span>)</span><br><span class="line">                dp[i]+=dp[i-j];</span><br><span class="line">    cout&lt;&lt;dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a>322. 零钱兑换</h1><p><a href="https://leetcode.cn/problems/coin-change/description/">322. 零钱兑换 - 力扣（LeetCode）</a></p><p>定义：<strong><script type="math/tex">dp[j]</script>：凑足总额为j所需钱币的最少个数为</strong></p><p>递推公式：<script type="math/tex">dp[j] = min(dp[j], dp[j - coins[i]] + 1)</script></p><p>初始化：<script type="math/tex">dp[0]=0</script></p><p>遍历顺序：都行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++)  <span class="comment">// 遍历物品</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; j++)  <span class="comment">// 遍历背包</span></span><br><span class="line"><span class="keyword">if</span> (dp[j - coins[i]] != INT_MAX)  <span class="comment">// 如果dp[j - coins[i]]是初始值则跳过</span></span><br><span class="line">dp[j] = <span class="built_in">min</span>(dp[j - coins[i]] + <span class="number">1</span>, dp[j]);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= amount; i++)   <span class="comment">// 遍历背包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; coins.<span class="built_in">size</span>(); j++)  <span class="comment">// 遍历物品</span></span><br><span class="line"><span class="keyword">if</span> (i - coins[j] &gt;= <span class="number">0</span> &amp;&amp; dp[i - coins[j]] != INT_MAX ) </span><br><span class="line">dp[i] = <span class="built_in">min</span>(dp[i - coins[j]] + <span class="number">1</span>, dp[i]);</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j - coins[i]] != INT_MAX)</span><br><span class="line">                    dp[j] = <span class="built_in">min</span>(dp[j], dp[j - coins[i]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[amount] == INT_MAX)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279.完全平方数"></a>279.完全平方数</h1><p><a href="https://leetcode.cn/problems/perfect-squares/description/">279. 完全平方数 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp[j]表示和为j的完全平方数的最少数量</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j * j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], dp[i - j * j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139.单词拆分"></a>139.单词拆分</h1><p><a href="https://leetcode.cn/problems/word-break/description/">139. 单词拆分 - 力扣（LeetCode）</a></p><p>没思路</p><p>定义：<strong>dp[i] : 字符串长度为i的话，dp[i]为true，表示可以拆分为一个或多个在字典中出现的单词</strong>。</p><p>递推公式：如果确定dp[j] 是true，且 [j, i] 这个区间的子串出现在字典里，那么dp[i]一定是true。（j &lt; i ）。所以递推公式是 if([j, i] 这个区间的子串出现在字典里 &amp;&amp; dp[j]是true) 那么 dp[i] = true。</p><p>初始化：dp[0]=true，下标非0的dp[i]初始化为false</p><p>遍历顺序：有序！所以先背包后物品！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">wordset</span><span class="params">(wordDict.begin(), wordDict.end())</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(s.size() + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                string sub = s.<span class="built_in">substr</span>(j, i - j);</span><br><span class="line">                <span class="keyword">if</span> (wordset.<span class="built_in">find</span>(sub) != wordset.<span class="built_in">end</span>() &amp;&amp; dp[j])</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a>198.打家劫舍</h1><p><a href="https://leetcode.cn/problems/house-robber/description/">198. 打家劫舍 - 力扣（LeetCode）</a></p><p>定义：<strong>dp[i]：考虑下标i（包括i）以内的房屋，最多可以偷窃的金额为dp[i]</strong>。</p><p>递推公式：dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);</p><p>初始化：dp[0]=nums[0],dp[1]=max(nums[0],nums[1]);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size() + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="213-打家劫舍II"><a href="#213-打家劫舍II" class="headerlink" title="213.打家劫舍II"></a>213.打家劫舍II</h1><p><a href="https://leetcode.cn/problems/house-robber-ii/description/">213. 打家劫舍 II - 力扣（LeetCode）</a></p><p>变化为环状，需要单独考虑首尾元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob1</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (end == start) <span class="keyword">return</span> nums[start];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[start] = nums[start];</span><br><span class="line">        dp[start<span class="number">+1</span>] = <span class="built_in">max</span>(nums[start], nums[start + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start + <span class="number">2</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[end];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> res1 = <span class="built_in">rob1</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> res2 = <span class="built_in">rob1</span>(nums, <span class="number">1</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res1, res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337.打家劫舍 III"></a>337.打家劫舍 III</h1><p><a href="https://leetcode.cn/problems/house-robber-iii/description/">337. 打家劫舍 III - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day32 || 动态规划1</title>
      <link href="/2024/08/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921/"/>
      <url>/2024/08/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921/</url>
      
        <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a><strong>理论基础</strong></h1><h2 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h2><p>动态规划，英文：Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p><p>所以动态规划中每一个状态一定是由上一个状态推导出来的，<strong>这一点就区分于贪心</strong>，贪心没有状态推导，而是从局部直接选最优的，</p><p>在<a href="https://programmercarl.com/贪心算法理论基础.html">关于贪心算法，你该了解这些！ (opens new window)</a>中我举了一个背包问题的例子。</p><p>例如：有$N$件物品和一个最多能背重量为 $W$ 的背包。第$i$件物品的重量是 $weight[i]$，得到的价值是 $value[i] $。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p>动态规划中 $dp[j]$ 是由 $dp[j-weight[i]]$ 推导出来的，然后取$max(dp[j], dp[j - weight[i]] + value[i])$。</p><p>但如果是贪心呢，每次拿物品选一个最大的或者最小的就完事了，和上一个状态没有关系。</p><p>所以贪心解决不了动态规划的问题。</p><h2 id="动态规划的解题步骤"><a href="#动态规划的解题步骤" class="headerlink" title="动态规划的解题步骤"></a>动态规划的解题步骤</h2><p>做动规题目的时候，很多同学会陷入一个误区，就是以为把状态转移公式背下来，照葫芦画瓢改改，就开始写代码，甚至把题目AC之后，都不太清楚 $dp[i]$ 表示的是什么。</p><p><strong>这就是一种朦胧的状态，然后就把题给过了，遇到稍稍难一点的，可能直接就不会了，然后看题解，然后继续照葫芦画瓢陷入这种恶性循环中</strong>。</p><p>状态转移公式（递推公式）是很重要，但动规不仅仅只有递推公式。</p><p><strong>对于动态规划问题，我将拆解为如下五步曲，这五步都搞清楚了，才能说把动态规划真的掌握了！</strong></p><ol><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><p>一些同学可能想为什么要先确定递推公式，然后在考虑初始化呢？</p><p><strong>因为一些情况是递推公式决定了dp数组要如何初始化！</strong></p><h2 id="动态规划应该如何debug"><a href="#动态规划应该如何debug" class="headerlink" title="动态规划应该如何debug"></a>动态规划应该如何debug</h2><p>相信动规的题目，很大部分同学都是这样做的。</p><p>看一下题解，感觉看懂了，然后照葫芦画瓢，如果能正好画对了，万事大吉，一旦要是没通过，就怎么改都通过不了，对 dp数组的初始化，递推公式，遍历顺序，处于一种黑盒的理解状态。</p><p>写动规题目，代码出问题很正常！</p><p><strong>找问题的最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！</strong></p><p>一些同学对于dp的学习是黑盒的状态，就是不清楚dp数组的含义，不懂为什么这么初始化，递推公式背下来了，遍历顺序靠习惯就是这么写的，然后一鼓作气写出代码，如果代码能通过万事大吉，通过不了的话就凭感觉改一改。</p><p>这是一个很不好的习惯！</p><p><strong>做动规的题目，写代码之前一定要把状态转移在dp数组的上具体情况模拟一遍，心中有数，确定最后推出的是想要的结果</strong>。</p><p>然后再写代码，如果代码没通过就打印dp数组，看看是不是和自己预先推导的哪里不一样。</p><p>如果打印出来和自己预先模拟推导是一样的，那么就是自己的递归公式、初始化或者遍历顺序有问题了。</p><p>如果和自己预先模拟推导的不一样，那么就是代码实现细节有问题。</p><p><strong>这样才是一个完整的思考过程，而不是一旦代码出问题，就毫无头绪的东改改西改改，最后过不了，或者说是稀里糊涂的过了</strong>。</p><p>这也是我为什么在动规五步曲里强调推导dp数组的重要性。</p><p>发出这样的问题之前，其实可以自己先思考这三个问题：</p><ul><li>这道题目我举例推导状态转移公式了么？</li><li>我打印dp数组的日志了么？</li><li>打印出来了dp数组和我想的一样么？</li></ul><p><strong>如果这灵魂三问自己都做到了，基本上这道题目也就解决了</strong>，或者更清晰的知道自己究竟是哪一点不明白，是状态转移不明白，还是实现代码不知道该怎么写，还是不理解遍历dp数组的顺序。</p><h1 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><strong>509. 斐波那契数</strong></h1><p>很简单的动规入门题，但简单题使用来掌握方法论的，还是要有动规五部曲来分析。</p><p><a href="https://leetcode.cn/problems/fibonacci-number/description/">509. 斐波那契数 - 力扣（LeetCode）</a></p><ol><li>确定dp数组以及下标的含义</li></ol><p>dp[i]的定义为：第i个数的斐波那契数值是dp[i]</p><ol><li>确定递推公式</li></ol><p>状态转移方程 dp[i] = dp[i - 1] + dp[i - 2]</p><ol><li>dp数组如何初始化</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[0] = 0;</span><br><span class="line">dp[1] = 1;</span><br></pre></td></tr></table></figure><ol><li>确定遍历顺序</li></ol><p>从递归公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，dp[i]是依赖 dp[i - 1] 和 dp[i - 2]，那么遍历的顺序一定是从前到后遍历的</p><ol><li>举例推导dp数组</li></ol><p>按照这个递推公式dp[i] = dp[i - 1] + dp[i - 2]，我们来推导一下，当N为10的时候，dp数组应该是如下的数列：</p><p>0 1 1 2 3 5 8 13 21 34 55</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) <span class="keyword">return</span> N;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改进：不需要那麽多数组，两个位置即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum = dp[<span class="number">0</span>] + dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><strong>70. 爬楼梯</strong></h1><p><a href="https://leetcode.cn/problems/climbing-stairs/description/">70. 爬楼梯 - 力扣（LeetCode）</a></p><p>思路：和上题思路一致，f(n)=爬n阶的方法=f(n-1)+ f(n-2)</p><p>使用递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">climbStairs</span>(n<span class="number">-1</span>)+<span class="built_in">climbStairs</span>(n<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常规dp思路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n; </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123; </span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改进版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> sum = dp[<span class="number">0</span>] + dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再次改进</p><h1 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a><strong>746. 使用最小花费爬楼梯</strong></h1><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯 - 力扣（LeetCode）</a></p><script type="math/tex; mode=display">dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>]+cost[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+cost[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62.不同路径"></a>62.不同路径</h1><p><a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径 - 力扣（LeetCode）</a></p><script type="math/tex; mode=display">dp[i][j] ：表示从（0 ，0）出发，到(i, j) 有dp[i][j]条不同的路径</script><script type="math/tex; mode=display">dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</script><script type="math/tex; mode=display">dp[i][0]=dp[0][j]=1</script><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a>63. 不同路径 II</h1><p><a href="https://leetcode.cn/problems/unique-paths-ii/description/">63. 不同路径 II - 力扣（LeetCode）</a></p><p>增加了障碍物<script type="math/tex">obstacleGrid[i][j]</script> ， 0为无，1为有</p><p>故递推需判断，初始化需要处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 当(i, j)没有障碍的时候，再推导dp[i][j]</span></span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class="number">0</span>][j] == <span class="number">0</span>; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid[m - <span class="number">1</span>][n - <span class="number">1</span>] == <span class="number">1</span> || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="comment">//如果在起点或终点出现了障碍，直接返回0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class="number">0</span>][j] == <span class="number">0</span>; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343. 整数拆分"></a>343. 整数拆分</h1><p><a href="https://leetcode.cn/problems/integer-break/">343. 整数拆分</a></p><p>没思路！</p><script type="math/tex; mode=display">dp[i]$$：分拆数字$$i$$，可以得到的最大乘积为$$dp[i]$$。递推公式：$$dp[i] = max(dp[i] , max((i - j) * j , dp[i - j] * j))$$;$$j * (i - j) $$是单纯的把整数拆分为两个数相乘$$j * dp[i - j]$$是拆分成两个以及两个以上的个数相乘<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">max</span>((i - j) * j, dp[i - j] * j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure># 96.不同的二叉搜索树[96. 不同的二叉搜索树 - 力扣（LeetCode）](https://leetcode.cn/problems/unique-binary-search-trees/description/)有思路且一遍过！定义：$$dp[i]$$：$$i$$个节点可以得到的最多的二叉搜索树。递推公式：左右子树的dp[i]相乘得到$$dp[i] += dp[j] * dp[i - j - 1]</script><p>初始化：<script type="math/tex">dp[0]=1,dp[1]=1,dp[2]=2</script></p><p>遍历顺序：从左子树个数为0开始遍历，直到n,右子树个数相应变换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                dp[i] += dp[j] * dp[i - j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题详解</title>
      <link href="/2024/08/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%922%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2024/08/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%922%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="01背包理论基础"><a href="#01背包理论基础" class="headerlink" title="01背包理论基础"></a>01背包理论基础</h1><p><a href="https://kamacoder.com/problempage.php?pid=1046">46. 携带研究材料（第六期模拟笔试） (kamacoder.com)</a></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/20210117171307407.png" alt="416.分割等和子集1"></p><h2 id="01-背包"><a href="#01-背包" class="headerlink" title="01 背包"></a>01 背包</h2><p>有n件物品和一个最多能背重量为w的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p>二维dp数组01背包：i 来表示物品、j表示背包容量。</p><p><strong>定义</strong>：<strong><script type="math/tex">dp[i][j]</script>表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少</strong>。</p><p><strong>递推公式</strong>：<script type="math/tex">dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])</script>   考虑能不能放下</p><p><strong>初始化</strong>：<script type="math/tex">j=0</script>时全为零；<script type="math/tex">i=0</script>时，<script type="math/tex">j<weight[i]</script>时<script type="math/tex">dp[i][j]=0</script>，其他<script type="math/tex">dp[i][j]=value[i]</script></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span> ; j &lt; weight[<span class="number">0</span>]; j++) &#123; </span><br><span class="line">    dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = weight[<span class="number">0</span>]; j &lt;= bagweight; j++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步改进，直接<script type="math/tex">dp</script>数组初始化为零</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(weight.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(bagweight + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = weight[<span class="number">0</span>]; j &lt;= bagweight; j++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>遍历顺序</strong>: 先物品后背包，先背包后物品均可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= bagweight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= bagweight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        cin&gt;&gt;weight[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        cin&gt;&gt;value[i];</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n<span class="number">+1</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=weight[<span class="number">0</span>];i&lt;=n;i++) dp[<span class="number">0</span>][i]=value[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;weight[i]) dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j-weight[i]]+value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[m<span class="number">-1</span>][n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="01背包理论基础（滚动数组）"><a href="#01背包理论基础（滚动数组）" class="headerlink" title="01背包理论基础（滚动数组）"></a>01背包理论基础（滚动数组）</h1><p>二维dp降为一维dp</p><p>使用二维数组的时候，递推公式：<script type="math/tex">dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</script>;</p><p><strong>可以发现如果把<script type="math/tex">dp[i - 1]</script>那一层拷贝到<script type="math/tex">dp[i]</script>上，表达式完全可以是：<script type="math/tex">dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i])</script>;</strong></p><p><strong>与其把<script type="math/tex">dp[i - 1]</script>这一层拷贝到<script type="math/tex">dp[i]</script>上，不如只用一个一维数组了</strong>，只用<script type="math/tex">dp[j]</script>（一维数组，也可以理解是一个滚动数组）。</p><p>那么更改后结果为：</p><p>定义： dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]</p><p>递推公式： <script type="math/tex">dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</script></p><p>初始化： dp[0]=0,如果题目给的价值都是正整数那么非0下标都初始化为0</p><p><strong>遍历顺序</strong>： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++)  <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = bagWeight; j &gt;= weight[i]; j--)  <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br></pre></td></tr></table></figure><p>二维dp遍历的时候，背包容量是从小到大，而一维dp遍历的时候，背包是从大到小。</p><p>原因：<strong>倒序遍历是为了保证物品i只被放入一次</strong>，每次取得状态不会和之前取得状态重合，这样每种物品就只取一次了。</p><p>最终代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        cin&gt;&gt;weight[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        cin&gt;&gt;value[i];</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=weight[i];j--)</span><br><span class="line">             dp[j]=<span class="built_in">max</span>(dp[j], dp[j-weight[i]]+value[i]);</span><br><span class="line">        </span><br><span class="line">    cout&lt;&lt;dp[n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维二维对比：</p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240815091839840.png" alt="image-20240815091839840"></p><h1 id="完全背包理论基础"><a href="#完全背包理论基础" class="headerlink" title="完全背包理论基础"></a>完全背包理论基础</h1><p>完全背包: 有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。</p><p><strong>每件物品都有无限个（也就是可以放入背包多次）</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p>完全背包和01背包问题唯一不同的地方就是，每种物品有无限件。</p><p><strong>01背包</strong>的核心代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = bagWeight; j &gt;= weight[i]; j--) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>01背包内嵌的循环是<strong>从大到小</strong>遍历，<strong>为了保证每个物品仅被添加一次。</strong></p><p><strong>完全背包</strong>核心代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = weight[i]; j &lt;= bagWeight ; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而完全背包的物品是可以添加多次的，所以要<strong>从小到大</strong>去遍历。</p><p>还有使用一维或二维dp数组的遍历顺序问题</p><p>在<strong>01背包</strong>中，二维dp数组的两个for遍历的先后循序是可以颠倒了，一维dp数组的两个for循环先后循序一定是先遍历物品，再遍历背包容量。</p><p>在完全背包中，对于一维dp数组来说，其实两个for循环嵌套顺序是无所谓的。因为dp[j] 是根据 下标j之前所对应的dp[j]计算出来的。 只要保证下标j之前的dp[j]都是经过计算的就可以了。</p><p><a href="https://kamacoder.com/problempage.php?pid=1052">52. 携带研究材料（第七期模拟笔试） (kamacoder.com)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weight, vector&lt;<span class="type">int</span>&gt; value, <span class="type">int</span> bagsize)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(bagsize + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = weight[i]; j &lt;= bagsize; j++) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[bagsize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; weight[i] &gt;&gt; value[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">func</span>(weight, value, v) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多重背包理论基础"><a href="#多重背包理论基础" class="headerlink" title="多重背包理论基础"></a>多重背包理论基础</h1><p>有N种物品和一个容量为V 的背包。第i种物品最多有Mi件可用，每件耗费的空间是Ci ，价值是Wi 。求解将哪些物品装入背包可使这些物品的耗费的空间 总和不超过背包容量，且价值总和最大。</p><p>多重背包与01背包相似，将Mi件物品铺开则可转换</p><p><a href="https://kamacoder.com/problempage.php?pid=1066">56. 携带矿石资源（第八期模拟笔试） (kamacoder.com)</a></p><p>题目描述<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> C,N;</span><br><span class="line">    cin&gt;&gt;C&gt;&gt;N;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;weight[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;value[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;count[i];</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(C + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">    cout&lt;&lt;dp[C]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将其转化成01背包，</p><p>方法一：先添加比较费时，C++中主要消耗在vector的动态底层扩容上。（其实这里也可以优化，先把 所有物品数量都计算好，一起申请vector的空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (nums[i] &gt; <span class="number">1</span>) &#123; <span class="comment">// 物品数量不是一的，都展开</span></span><br><span class="line">        weight.<span class="built_in">push_back</span>(weight[i]);</span><br><span class="line">        value.<span class="built_in">push_back</span>(value[i]);</span><br><span class="line">        nums[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，在遍历时处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= nums[i] &amp;&amp; (j - k * weight[i]) &gt;= <span class="number">0</span>; k++) &#123; <span class="comment">// 遍历个数</span></span><br><span class="line">dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * weight[i]] + k * value[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>故整体代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> C,N;</span><br><span class="line">    cin&gt;&gt;C&gt;&gt;N;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;weight[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;value[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;count[i];</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(C + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=C;j&gt;=weight[i];j--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=count[i]&amp;&amp;(j-k*weight[i])&gt;=<span class="number">0</span>;k++)&#123;</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-k*weight[i]]+k*value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[C]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>问能否能装满背包（或者最多装多少）</strong>：<script type="math/tex">dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);</script>，对应题目如下：</p><ul><li><a href="https://programmercarl.com/0416.分割等和子集.html">动态规划：416.分割等和子集(opens new window)</a></li><li><a href="https://programmercarl.com/1049.最后一块石头的重量II.html">动态规划：1049.最后一块石头的重量 II(opens new window)</a></li></ul><p><strong>问装满背包有几种方法</strong>：<script type="math/tex">dp[j] += dp[j - nums[i]]</script>，对应题目如下：</p><ul><li><a href="https://programmercarl.com/0494.目标和.html">动态规划：494.目标和(opens new window)</a></li><li><a href="https://programmercarl.com/0518.零钱兑换II.html">动态规划：518. 零钱兑换 II(opens new window)</a></li><li><a href="https://programmercarl.com/0377.组合总和Ⅳ.html">动态规划：377.组合总和Ⅳ(opens new window)</a></li><li><a href="https://programmercarl.com/0070.爬楼梯完全背包版本.html">动态规划：70. 爬楼梯进阶版（完全背包）(opens new window)</a></li></ul><p><strong>问背包装满最大价值</strong>：<script type="math/tex">dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</script> ，对应题目如下：</p><ul><li><a href="https://programmercarl.com/0474.一和零.html">动态规划：474.一和零(opens new window)</a></li></ul><p><strong>问装满背包所有物品的最小个数</strong>：<script type="math/tex">dp[j] = min(dp[j - coins[i]] + 1, dp[j]);</script> ，对应题目如下：</p><ul><li><a href="https://programmercarl.com/0322.零钱兑换.html">动态规划：322.零钱兑换(opens new window)</a></li><li><a href="https://programmercarl.com/0279.完全平方数.html">动态规划：279.完全平方数(opens new window)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAT</title>
      <link href="/2024/07/30/GAT/"/>
      <url>/2024/07/30/GAT/</url>
      
        <content type="html"><![CDATA[<h1 id="GAT–Graph-Attention-Networks"><a href="#GAT–Graph-Attention-Networks" class="headerlink" title="GAT–Graph Attention Networks"></a>GAT–Graph Attention Networks</h1><p><a href="https://arxiv.org/abs/1710.10903">文献地址</a></p><h2 id="GAT产生背景"><a href="#GAT产生背景" class="headerlink" title="GAT产生背景"></a>GAT产生背景</h2><p><strong>神经网络在图数据上的应用需求</strong>：</p><ul><li>随着深度学习技术在图像、语音、自然语言处理等领域的成功应用，研究人员开始尝试将神经网络方法扩展到图结构数据上。图数据广泛存在于社交网络、生物网络、通信网络等实际应用中，处理这些数据需要专门的算法。</li></ul><p><strong>现有方法的局限性</strong>：</p><ul><li>传统的图神经网络（Graph Neural Networks, GNN）和图卷积网络（Graph Convolutional Networks, GCN）在处理图结构数据时遇到了一些挑战，例如：<ul><li><strong>固定权重分配</strong>：GNN和GCN通常使用固定的权重或预定义的方法来处理邻居节点的重要性，难以灵活地处理不同邻居节点的重要性差异。</li><li><strong>计算复杂度高</strong>：一些基于光谱的方法需要进行复杂的矩阵分解或逆操作，在大规模图数据上计算成本较高。</li><li><strong>依赖全局图结构</strong>：许多方法需要预先知道整个图的结构，在处理从未见过的新图时存在局限性。</li></ul></li></ul><p><strong>注意力机制的发展</strong>：</p><ul><li>注意力机制在自然语言处理领域（如机器翻译）取得了显著的成功，它能够动态地为输入序列的不同部分分配不同的权重，显著提升了模型的性能和灵活性。</li><li>自注意力（Self-Attention）机制尤其成功，它不仅可以提高模型的性能，还能处理变长输入，提供了更好的解释性。</li></ul><p><strong>从卷积神经网络到图神经网络的扩展</strong>：</p><ul><li>卷积神经网络（CNN）在处理网格状数据（如图像）时非常有效，通过在图像的局部应用卷积滤波器，可以提取有效的特征。</li><li>图神经网络试图将卷积操作扩展到图结构数据上，但在如何有效处理不规则的图结构上仍然存在挑战。研究人员希望找到一种方法，可以像卷积神经网络处理图像那样高效地处理图结构数据，同时克服现有方法的局限性。</li></ul><p><strong>GAT的提出</strong>：</p><ul><li>GAT的提出是在这些背景下，研究人员希望通过引入注意力机制来解决上述问题。通过在图结构数据上应用自注意力机制，GAT能够动态地为不同邻居节点分配不同的权重，显著提升了模型的灵活性和性能。</li><li>GAT还能够高效地并行计算，并且无需预先知道图的全局结构，这使得它在处理大规模图数据和归纳学习任务时具有优势。</li></ul><h2 id="与GNN、GCN相比的优势："><a href="#与GNN、GCN相比的优势：" class="headerlink" title="与GNN、GCN相比的优势："></a>与GNN、GCN相比的优势：</h2><p><strong>动态权重分配</strong>：</p><ul><li><strong>GNN和GCN</strong>：通常在每个节点的邻居上施加固定的权重或通过预定义的方式计算权重，这种方法在处理不同重要性的邻居节点时有一定局限。</li><li><strong>GAT</strong>：通过自注意力机制，GAT可以动态地为每个节点的不同邻居分配不同的权重，这允许模型更加灵活地关注对节点更重要的邻居，提高了模型的表达能力和性能。</li></ul><p><strong>无需预先计算图结构</strong>：</p><ul><li><strong>GNN和GCN</strong>：很多方法需要预先计算图的拉普拉斯特（Laplacian）矩阵或其他与图结构相关的特征，这可能导致计算复杂度较高，特别是在处理大规模图时。</li><li><strong>GAT</strong>：通过注意力机制直接在节点和边上操作，无需预先计算复杂的图结构特征，这使得模型在处理不同结构的图时更加灵活和高效。</li></ul><p><strong>高效并行计算</strong>：</p><ul><li><strong>GNN和GCN</strong>：有些方法如基于光谱的卷积操作可能需要进行复杂的矩阵分解或逆操作，这在大规模图上计算成本较高。</li><li><strong>GAT</strong>：注意力机制可以在图的所有边上并行计算，而且由于注意力权重的计算是独立的，因此非常适合于GPU加速，从而提高了计算效率。</li></ul><p><strong>适用于归纳学习任务</strong>：</p><ul><li><strong>GNN和GCN</strong>：一些方法在训练过程中需要访问整个图结构，这在处理从未见过的图（归纳学习）时可能会遇到困难。</li><li><strong>GAT</strong>：由于其注意力机制不依赖于全局图结构，GAT在处理归纳学习任务时表现尤为突出，可以在训练时只使用部分图而在测试时处理完全未见过的图。</li></ul><p><strong>处理不同大小的邻居集合</strong>：</p><ul><li><strong>GNN和GCN</strong>：通常需要对不同大小的邻居集合进行固定处理，如使用固定大小的窗口或采样策略，这可能影响模型的灵活性和性能。</li><li><strong>GAT</strong>：通过注意力机制，GAT可以自适应地处理不同大小的邻居集合，不需要特殊的预处理步骤，从而提升了模型的适用性。</li></ul><h2 id="核心创新点"><a href="#核心创新点" class="headerlink" title="核心创新点"></a>核心创新点</h2><p><strong>引入注意力机制</strong>：</p><ul><li>GAT的最大创新在于在图结构数据上应用了自注意力机制（Self-Attention Mechanism）。通过自注意力机制，GAT能够动态地为每个节点的邻居分配不同的权重，这使得模型能够更灵活地关注不同邻居节点的重要性。</li></ul><p><strong>高效并行计算</strong>：</p><ul><li>GAT的计算过程是并行化的，特别是在节点-邻居对上的计算可以并行进行。这种并行化使得GAT能够高效地处理大规模图数据，避免了许多传统方法中常见的计算瓶颈，如矩阵分解或逆操作。</li></ul><p><strong>无需预先知道图的全局结构</strong>：</p><ul><li>GAT不依赖于图的全局结构信息，只需要局部的邻居信息即可进行计算。这使得GAT在处理未知或动态变化的图结构时具有很大的优势，尤其是在归纳学习任务中，GAT能够处理完全未见过的新图。</li></ul><p><strong>处理不同大小的邻居集合</strong>：</p><ul><li>通过注意力机制，GAT可以自适应地处理不同大小的邻居集合，而无需预定义邻居集合的大小或形状。这使得模型在处理具有不同拓扑结构的图时更加灵活和鲁棒。</li></ul><p><strong>多头注意力机制（Multi-Head Attention）</strong>：</p><ul><li>GAT采用了多头注意力机制（Multi-Head Attention Mechanism），通过多个并行的注意力头计算不同的注意力分布，并将它们的输出进行拼接或平均。多头注意力机制提高了模型的表达能力和稳定性，使其能够捕捉更丰富的特征表示。</li></ul><p><strong>适用于多种图学习任务</strong>：</p><ul><li>GAT不仅适用于节点分类任务，还能够扩展到其他图学习任务，如图分类、链接预测等。其灵活的框架使得GAT在处理各种不同的图学习问题时都表现出色。</li></ul><p><strong>提高模型的解释性</strong>：</p><ul><li>由于GAT能够动态地为每个邻居节点分配不同的权重，因此通过分析这些注意力权重，可以更好地理解模型在决策过程中关注的关键节点和特征，提高了模型的解释性。</li></ul><h1 id="GAT核心公式"><a href="#GAT核心公式" class="headerlink" title="GAT核心公式"></a>GAT核心公式</h1><h2 id="1-注意力系数的计算"><a href="#1-注意力系数的计算" class="headerlink" title="1. 注意力系数的计算"></a>1. 注意力系数的计算</h2><p>GAT的基本思想是对每个节点的邻居节点计算注意力系数，这些系数表示每个邻居对目标节点的重要性。注意力系数 $e_{ij}$ 的计算公式如下：</p><script type="math/tex; mode=display">e_{ij} = \text{LeakyReLU} \left( \vec{a}^T [\mathbf{W} \vec{h}_i \| \mathbf{W} \vec{h}_j] \right)</script><p>其中：</p><ul><li>$\vec{a}$ 是一个可学习的权重向量。</li><li>$\mathbf{W}$ 是一个可学习的权重矩阵。</li><li>$\vec{h}_i$ 和 $\vec{h}_j$ 分别是节点 $i$ 和节点 $j$ 的特征向量。</li><li>$|$ 表示向量的连接操作。</li><li>$\text{LeakyReLU}$ 是带泄露的ReLU激活函数。</li></ul><h2 id="2-注意力系数的归一化"><a href="#2-注意力系数的归一化" class="headerlink" title="2. 注意力系数的归一化"></a>2. 注意力系数的归一化</h2><p>计算得到的注意力系数 $e<em>{ij}$ 需要进行归一化，以便进行比较和应用。归一化后的注意力系数 $\alpha</em>{ij}$ 通过Softmax函数计算：</p><script type="math/tex; mode=display">\alpha_{ij} = \text{softmax}_j(e_{ij}) = \frac{\exp(e_{ij})}{\sum_{k \in \mathcal{N}_i} \exp(e_{ik})}</script><p>其中 $\mathcal{N}_i$ 表示节点 $i$ 的邻居节点集合，包括节点 $i$ 自身。</p><h2 id="3-节点特征的聚合"><a href="#3-节点特征的聚合" class="headerlink" title="3. 节点特征的聚合"></a>3. 节点特征的聚合</h2><p>归一化后的注意力系数用于对邻居节点的特征进行加权平均，得到更新后的节点特征 $\vec{h}’_i$：</p><script type="math/tex; mode=display">\vec{h}'_i = \sigma \left( \sum_{j \in \mathcal{N}_i} \alpha_{ij} \mathbf{W} \vec{h}_j \right)</script><p>其中 $\sigma$ 是激活函数（例如ReLU或ELU）。</p><h2 id="4-多头注意力机制"><a href="#4-多头注意力机制" class="headerlink" title="4. 多头注意力机制"></a>4. 多头注意力机制</h2><p>为了增强模型的表达能力和稳定性，GAT采用了多头注意力机制。每个头独立计算注意力系数和节点特征，然后将它们的输出进行拼接或平均。多头注意力机制的公式如下：</p><script type="math/tex; mode=display">\vec{h}'_i = \big\|_{k=1}^K \sigma \left( \sum_{j \in \mathcal{N}_i} \alpha_{ij}^k \mathbf{W}^k \vec{h}_j \right)</script><p>其中：</p><ul><li><p>$K$ 是注意力头的数量。</p></li><li><p>$\alpha_{ij}^k$ 和 $\mathbf{W}^k$ 分别是第 $k$ 个注意力头的注意力系数和权重矩阵。</p></li><li><p>$|$ 表示拼接操作。</p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240804110346427.png" alt="syt" style="zoom:80%;" /></p></li></ul><p>在最终的输出层，多头注意力机制的结果通常进行平均，而不是拼接：</p><script type="math/tex; mode=display">\vec{h}'_i = \sigma \left( \frac{1}{K} \sum_{k=1}^K \sum_{j \in \mathcal{N}_i} \alpha_{ij}^k \mathbf{W}^k \vec{h}_j \right)</script>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCN</title>
      <link href="/2024/07/26/GCN/"/>
      <url>/2024/07/26/GCN/</url>
      
        <content type="html"><![CDATA[<p>SEMI-SUPERVISED CLASSIFICATION WITH GRAPH CONVOLUTIONAL NETWORKS</p><p><strong>基于图卷积网络的半监督分类</strong></p><p><a href="https://arxiv.org/abs/1609.02907">文献参考</a></p><h1 id="引言（INTRODUCTION）"><a href="#引言（INTRODUCTION）" class="headerlink" title="引言（INTRODUCTION）"></a>引言（INTRODUCTION）</h1><p>我们考虑在图（如引文网络）中对节点（如文档）进行分类的问题，其中只有一小部分节点有标签。这一问题可以被框架化为基于图的半监督学习，其中标签信息通过某种形式的显式图正则化（如使用图拉普拉斯正则化项）在图上进行平滑。然而，这种假设可能会限制模型的容量，因为图边不一定编码节点相似性，还可能包含其他信息。</p><p>在本工作中，我们使用神经网络模型直接编码图结构，并对所有有标签的节点进行监督目标训练，从而避免在损失函数中显式的图正则化。通过条件化神经网络模型于图的邻接矩阵，我们的模型能够从监督损失中分布梯度信息，并能够学习有标签和无标签节点的表示。</p><p>我们的贡献有两方面。</p><p>首先，我们介绍了一种简单且行为良好的逐层传播规则，用于直接在图上操作的神经网络模型，并展示了其可以从频谱图卷积的一阶近似中得到动机。</p><p>其次，我们展示了这种图神经网络模型可以用于快速且可扩展的图中节点的半监督分类。在多个数据集上的实验表明，我们的模型在分类准确率和效率上都优于现有的半监督学习方法。</p><h1 id="快速近似图卷积（FAST-APPROXIMATE-CONVOLUTIONS-ON-GRAPHS）"><a href="#快速近似图卷积（FAST-APPROXIMATE-CONVOLUTIONS-ON-GRAPHS）" class="headerlink" title="快速近似图卷积（FAST APPROXIMATE CONVOLUTIONS ON GRAPHS）"></a>快速近似图卷积（FAST APPROXIMATE CONVOLUTIONS ON GRAPHS）</h1><p>在本节中，我们为特定的基于图的神经网络模型 <script type="math/tex">f(X, A)</script> 提供理论动机，并将在本文其余部分中使用该模型。我们考虑一个多层图卷积网络（GCN），其逐层传播规则如下：</p><script type="math/tex; mode=display">H^{(l+1)} = \sigma \left( \tilde{D}^{- \frac{1}{2}} \tilde{A} \tilde{D}^{- \frac{1}{2}} H^{(l)} W^{(l)} \right)</script><p>这里，<script type="math/tex">\tilde{A} = A + I_N</script> 是无向图 <script type="math/tex">\mathcal{G}</script> 的邻接矩阵，并添加了自环。<script type="math/tex">I_N</script> 是单位矩阵，<script type="math/tex">\tilde{D}_{ii} = \sum_j \tilde{A}_{ij}</script>，<script type="math/tex">W^{(l)}</script> 是第 <script type="math/tex">l</script> 层特定的可训练权重矩阵。<script type="math/tex">\sigma(\cdot)</script> 表示激活函数，例如 ReLU：<script type="math/tex">\text{ReLU}(\cdot) = \max(0, \cdot)</script>。<script type="math/tex">H^{(l)} \in \mathbb{R}^{N \times D}</script> 是第 <script type="math/tex">l</script> 层的激活矩阵，<script type="math/tex">H^{(0)} = X</script>。</p><p>在下文中，我们将展示这种传播规则的形式可以通过局部化的频谱滤波器在图上的一阶近似来动机化（Hammond et al., 2011; Defferrard et al., 2016）。</p><h2 id="频谱图卷积（Spectral-Graph-Convolutions）"><a href="#频谱图卷积（Spectral-Graph-Convolutions）" class="headerlink" title="频谱图卷积（Spectral Graph Convolutions）"></a>频谱图卷积（Spectral Graph Convolutions）</h2><p>我们考虑图上的频谱卷积定义为在傅里叶域中信号与滤波器的乘积，即：</p><script type="math/tex; mode=display">g_{\theta} \star x = U g_{\theta} U^T x</script><p>其中 <script type="math/tex">U</script> 是归一化图拉普拉斯矩阵 <script type="math/tex">L = I_N - D^{-1/2} A D^{-1/2}</script> 的特征向量矩阵。直接计算这种形式的卷积是昂贵的，因为与特征向量矩阵 <script type="math/tex">U</script> 相乘的复杂度是 <script type="math/tex">O(N^2)</script> 。为了规避这一问题，Hammond 等人提出可以通过切比雪夫多项式的截断展开来近似：</p><script type="math/tex; mode=display">g_{\theta'}(\Lambda) \approx \sum_{k=0}^{K} \theta'_k T_k(\tilde{\Lambda})</script><p>其中 <script type="math/tex">\tilde{\Lambda} = \frac{2}{\lambda_{\max}} \Lambda - I</script>， <script type="math/tex">\lambda_{\max}</script>是 <script type="math/tex">L</script> 的最大特征值。切比雪夫多项式 <script type="math/tex">T_k(x)</script> 递归定义为 <script type="math/tex">T_k(x) = 2x T_{k-1}(x) - T_{k-2}(x)</script>， <script type="math/tex">T_0(x) = 1</script>，<script type="math/tex">T_1(x) = x</script> 。</p><h2 id="层级线性模型（Layer-Wise-Linear-Model）"><a href="#层级线性模型（Layer-Wise-Linear-Model）" class="headerlink" title="层级线性模型（Layer-Wise Linear Model）"></a>层级线性模型（Layer-Wise Linear Model）</h2><p>基于这种近似方法，我们可以堆叠多个卷积层，每层后接一个逐点非线性激活函数。假设我们将卷积操作限制为 <script type="math/tex">K = 1</script>，即卷积函数是 <script type="math/tex">L</script> 的线性函数，并假设<script type="math/tex">\lambda_{\max} \approx 2</script>，则公式简化为：</p><script type="math/tex; mode=display">g_{\theta} \star x \approx \theta \left( I_N + D^{-1/2} A D^{-1/2} \right) x</script><p>为了进一步稳定数值计算，引入重新归一化技巧：</p><script type="math/tex; mode=display">\hat{A} = D^{-\frac{1}{2}} (A + I_N) D^{-\frac{1}{2}}</script><p>并将其推广到信号 <script type="math/tex">X</script>：</p><script type="math/tex; mode=display">Z = \hat{A} X \Theta</script><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726152328588.png" alt="gs" style="zoom:80%;" /></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726152818181.png" alt="gs2"></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726161106190.png" alt="gs3"></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726163036846.png" alt="gs4"></p><h1 id="半监督节点分类（SEMI-SUPERVISED-NODE-CLASSIFICATION）"><a href="#半监督节点分类（SEMI-SUPERVISED-NODE-CLASSIFICATION）" class="headerlink" title="半监督节点分类（SEMI-SUPERVISED NODE CLASSIFICATION）"></a>半监督节点分类（SEMI-SUPERVISED NODE CLASSIFICATION）</h1><h2 id="示例（Example）"><a href="#示例（Example）" class="headerlink" title="示例（Example）"></a>示例（Example）</h2><p>在一个对称邻接矩阵 <script type="math/tex">A</script> 的图上进行节点分类时，我们首先计算 <script type="math/tex">\hat{A}</script>，然后我们的前向模型形式如下：</p><script type="math/tex; mode=display">Z = \text{softmax} \left( \hat{A} \ \text{ReLU} \left( \hat{A} X W^{(0)} \right) W^{(1)} \right)</script><p>其中，<script type="math/tex">W^{(0)}</script> 和 <script type="math/tex">W^{(1)}</script> 是可训练的权重矩阵，softmax 激活函数用于输出层。</p><h2 id="实现（Implementation）"><a href="#实现（Implementation）" class="headerlink" title="实现（Implementation）"></a>实现（Implementation）</h2><p>参考PyG文档，<a href="https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GCNConv">GCNConv</a>可以进行学习查看，<a href="https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.GCN.html#torch_geometric.nn.models.GCN">GCN参数</a>可以进行查看，<a href="https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GCNConv.html#torch_geometric.nn.conv.GCNConv">公式结构</a>可以进行查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch_geometric.nn <span class="keyword">import</span> GCNConv</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GCN</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hidden_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        torch.manual_seed(<span class="number">1234567</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = GCNConv(dataset.num_features, hidden_channels)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = GCNConv(hidden_channels, dataset.num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, edge_index</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x, edge_index)</span><br><span class="line">        x = x.relu()</span><br><span class="line">        x = F.dropout(x, p=<span class="number">0.5</span>, training=<span class="variable language_">self</span>.training)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv2(x, edge_index)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 避免重复 softmax：</span></span><br><span class="line"><span class="comment">#在使用 CrossEntropyLoss 时，输出层不需要显式添加 softmax，因为损失函数内部已经包含了 log_softmax 操作。</span></span><br><span class="line">model = GCN(hidden_channels=<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GCN(</span><br><span class="line">  (conv1): GCNConv(<span class="number">1433</span>, <span class="number">16</span>)</span><br><span class="line">  (conv2): GCNConv(<span class="number">16</span>, <span class="number">7</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用Cora数据集（借助）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch_geometric.datasets <span class="keyword">import</span> Planetoid <span class="comment">#下载数据集用的</span></span><br><span class="line"><span class="keyword">from</span> torch_geometric.transforms <span class="keyword">import</span> NormalizeFeatures</span><br><span class="line"></span><br><span class="line">dataset = Planetoid(root=<span class="string">&#x27;data/Planetoid&#x27;</span>, name=<span class="string">&#x27;Cora&#x27;</span>, transform=NormalizeFeatures())<span class="comment">#transform预处理</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Dataset: <span class="subst">&#123;dataset&#125;</span>:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;======================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Number of graphs: <span class="subst">&#123;<span class="built_in">len</span>(dataset)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Number of features: <span class="subst">&#123;dataset.num_features&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Number of classes: <span class="subst">&#123;dataset.num_classes&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = dataset[<span class="number">0</span>]  <span class="comment"># Get the first graph object.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;========================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gather some statistics about the graph.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Number of nodes: <span class="subst">&#123;data.num_nodes&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Number of edges: <span class="subst">&#123;data.num_edges&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Average node degree: <span class="subst">&#123;data.num_edges / data.num_nodes:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Number of training nodes: <span class="subst">&#123;data.train_mask.<span class="built_in">sum</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Training node label rate: <span class="subst">&#123;<span class="built_in">int</span>(data.train_mask.<span class="built_in">sum</span>()) / data.num_nodes:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Has isolated nodes: <span class="subst">&#123;data.has_isolated_nodes()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Has self-loops: <span class="subst">&#123;data.has_self_loops()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Is undirected: <span class="subst">&#123;data.is_undirected()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Dataset: Cora():</span><br><span class="line">======================</span><br><span class="line">Number of graphs: 1</span><br><span class="line">Number of features: 1433</span><br><span class="line">Number of classes: 7</span><br><span class="line"></span><br><span class="line">Data(x=[2708, 1433], edge_index=[2, 10556], y=[2708], train_mask=[2708], val_mask=[2708], test_mask=[2708])</span><br><span class="line">========================================</span><br><span class="line">Number of nodes: 2708</span><br><span class="line">Number of edges: 10556</span><br><span class="line">Average node degree: 3.90</span><br><span class="line">Number of training nodes: 140</span><br><span class="line">Training node label rate: 0.05</span><br><span class="line">Has isolated nodes: False</span><br><span class="line">Has self-loops: False</span><br><span class="line">Is undirected: True</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure><p>可视化数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可视化部分</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize</span>(<span class="params">h, color</span>):</span><br><span class="line">    z = TSNE(n_components=<span class="number">2</span>).fit_transform(h.detach().cpu().numpy())</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.scatter(z[:, <span class="number">0</span>], z[:, <span class="number">1</span>], s=<span class="number">70</span>, c=color, cmap=<span class="string">&quot;Set2&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>该函数将高维节点特征嵌入降维到二维，并使用不同的颜色表示不同类别的节点。</p><p>散点图可以直观地展示节点特征的分布和聚类情况，有助于分析和理解图神经网络的性能和效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = GCN(hidden_channels=<span class="number">16</span>)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">out = model(data.x, data.edge_index)</span><br><span class="line">visualize(out, color=data.y)</span><br></pre></td></tr></table></figure><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240728113851934.png" alt="t1"></p><p>模型训练验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model = GCN(hidden_channels=16)</span></span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=<span class="number">0.01</span>, weight_decay=<span class="number">5e-4</span>)</span><br><span class="line">criterion = torch.nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    model.train()</span><br><span class="line">    optimizer.zero_grad()  </span><br><span class="line">    out = model(data.x, data.edge_index)  </span><br><span class="line">    loss = criterion(out[data.train_mask], data.y[data.train_mask])  </span><br><span class="line">    loss.backward() </span><br><span class="line">    optimizer.step()  </span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    out = model(data.x, data.edge_index)</span><br><span class="line">    pred = out.argmax(dim=<span class="number">1</span>)  </span><br><span class="line">    test_correct = pred[data.test_mask] == data.y[data.test_mask]  </span><br><span class="line">    test_acc = <span class="built_in">int</span>(test_correct.<span class="built_in">sum</span>()) / <span class="built_in">int</span>(data.test_mask.<span class="built_in">sum</span>())  </span><br><span class="line">    <span class="keyword">return</span> test_acc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">201</span>):</span><br><span class="line">    loss = train()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Epoch: <span class="subst">&#123;epoch:03d&#125;</span>, Loss: <span class="subst">&#123;loss:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">test_acc = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Test Accuracy: <span class="subst">&#123;test_acc:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Test Accuracy: 0.8020</span></span><br></pre></td></tr></table></figure><p>结果显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">out = model(data.x, data.edge_index)</span><br><span class="line">visualize(out, color=data.y)</span><br></pre></td></tr></table></figure><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240728114231712.png" alt="t2"></p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图综述</title>
      <link href="/2024/07/18/%E5%9B%BE%E7%BB%BC%E8%BF%B0/"/>
      <url>/2024/07/18/%E5%9B%BE%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>A Comprehensive Survey on Graph Neural Networks</p><p><a href="https://arxiv.org/pdf/1901.00596">文献地址</a></p><p>摘要</p><p>传统深度学习任务中的数据通常在欧几里德空间中表示。然而越来越多的数据从<strong>非欧几里得域</strong>生成，并表示为具有复杂关系和对象之间相互依赖关系的图形。图数据的复杂性给现有的机器学习算法带来了重大挑战。</p><p>提出了新的分类方法，将最先进的GNN模型分为四类：递归图神经网络（RecGNNs）、卷积图神经网络（ConvGNNs）、图自动编码器（GAEs）和时空图神经网络（STGNNs）。</p><p>探讨了GNN在各种领域中的应用，如推荐系统、化学分子分析和引文网络分类。</p><p>总结了开源代码、基准数据集和模型评估方法。</p><p>提出了GNN领域的潜在研究方向，如模型深度、可扩展性、异质性和动态性等。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="深度学习在欧几里得空间成功"><a href="#深度学习在欧几里得空间成功" class="headerlink" title="深度学习在欧几里得空间成功"></a>深度学习在欧几里得空间成功</h2><p>深度学习在图像分类、视频处理、语音识别和自然语言理解等领域的成功，这些领域的数据通常表示在欧几里得空间中。然而，越来越多的应用中，数据来自非欧几里得领域，并表示为图，这些图数据具有复杂的关系和依赖性。这种复杂性对现有的机器学习算法提出了重大挑战。</p><h2 id="图数据的复杂性"><a href="#图数据的复杂性" class="headerlink" title="图数据的复杂性"></a>图数据的复杂性</h2><p>与欧几里得数据不同，图数据是非结构化的。具体表现为：</p><ul><li>图的大小和节点的数量是可变的。</li><li>节点之间的连接关系（邻接关系）也不固定。</li><li>图中节点和边的特征可以是高维的，且节点之间的依赖关系使得常规的机器学习方法难以直接应用。</li></ul><p>例如</p><ul><li>在电子商务中，基于图形的学习系统可以利用用户和产品之间的交互来做出高度准确的推荐。</li><li>在化学中，分子被建模为图形，需要确定它们的生物活性以发现药物。</li><li>在引文网络中，论文通过引文相互链接，需要将它们归类为不同的组。</li></ul><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240725175534144.png" alt="对比"></p><h2 id="现有方法的局限性"><a href="#现有方法的局限性" class="headerlink" title="现有方法的局限性"></a>现有方法的局限性</h2><p>传统的机器学习方法在处理图数据时面临以下挑战：</p><ul><li>图数据的非欧几里得特性使得卷积操作不再像在图像数据中那样简单有效。</li><li>现有方法假设数据实例是相互独立的，这在图数据中并不成立，因为每个节点（实例）都通过各种类型的边与其他节点相关联。</li></ul><h2 id="深度学习在图数据上的扩展"><a href="#深度学习在图数据上的扩展" class="headerlink" title="深度学习在图数据上的扩展"></a>深度学习在图数据上的扩展</h2><p>近年来，许多研究致力于将深度学习方法扩展到图数据上。受到卷积神经网络（CNNs）、递归神经网络（RNNs）和自动编码器（Autoencoders）成功的启发，研究者们开发了多种方法来处理图数据的复杂性。例如，图卷积可以从2D卷积推广到图卷积，通过加权平均节点的邻居信息来实现。</p><h2 id="图神经网络的概述"><a href="#图神经网络的概述" class="headerlink" title="图神经网络的概述"></a>图神经网络的概述</h2><p>本文对图神经网络（GNNs）在数据挖掘和机器学习领域的研究进行了全面综述。作者提出了一种新的分类方法，将最先进的GNN模型分为四类：递归图神经网络（RecGNNs）、卷积图神经网络（ConvGNNs）、图自动编码器（GAEs）和时空图神经网络（STGNNs）。</p><h2 id="综述的贡献"><a href="#综述的贡献" class="headerlink" title="综述的贡献"></a>综述的贡献</h2><p>本文的主要贡献包括：</p><ul><li><strong>新分类方法</strong>：提出了一种新的图神经网络分类方法，将GNN分为四类。</li><li><strong>全面综述</strong>：提供了对现代深度学习技术在图数据上应用的最全面综述，包括代表性模型的详细描述、必要比较和相应算法的总结。</li><li><strong>丰富资源</strong>：收集了关于GNN的丰富资源，包括最先进的模型、基准数据集、开源代码和实际应用。</li><li><strong>未来方向</strong>：讨论了GNN的理论方面，分析了现有方法的局限性，并提出了模型深度、可扩展性、异质性和动态性四个方面的潜在研究方向。</li></ul><h1 id="背景与定义"><a href="#背景与定义" class="headerlink" title="背景与定义"></a>背景与定义</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="图神经网络的简史（A-Brief-History-of-Graph-Neural-Networks）"><a href="#图神经网络的简史（A-Brief-History-of-Graph-Neural-Networks）" class="headerlink" title="图神经网络的简史（A Brief History of Graph Neural Networks）"></a>图神经网络的简史（A Brief History of Graph Neural Networks）</h3><p><strong>早期研究</strong>：图神经网络的概念最早由 Sperduti et al. (1997) 提出，他们将神经网络应用于有向无环图，激发了对图神经网络的早期研究。Gori et al. (2005) 和 Scarselli et al. (2009) 进一步定义了图神经网络的概念，这些早期研究被归类为递归图神经网络（RecGNNs）。</p><p><strong>递归图神经网络（RecGNNs）</strong>：这些网络通过迭代传播节点之间的信息，直到达到稳定的固定点。这种方法计算开销大，最近有越来越多的研究致力于克服这些挑战。</p><p><strong>卷积图神经网络（ConvGNNs）</strong>：受卷积神经网络（CNNs）在计算机视觉领域成功的启发，研究者们开发了许多重新定义图卷积的方法。这些方法分为频谱方法和空间方法。</p><h3 id="图神经网络与图嵌入（Graph-Neural-Networks-vs-Network-Embedding）"><a href="#图神经网络与图嵌入（Graph-Neural-Networks-vs-Network-Embedding）" class="headerlink" title="图神经网络与图嵌入（Graph Neural Networks vs. Network Embedding）"></a>图神经网络与图嵌入（Graph Neural Networks vs. Network Embedding）</h3><p><strong>图嵌入</strong>：旨在将网络节点表示为低维向量表示，保留网络拓扑结构和节点内容信息，以便使用简单的机器学习算法（如支持向量机）进行分类、聚类和推荐等图分析任务。</p><p><strong>图神经网络</strong>：是设计用于处理各种任务的深度学习模型，能够通过端到端的方式解决图相关任务。许多GNNs通过图自动编码器框架显式提取高层次表示。</p><p><strong>主要区别</strong>：GNNs 是一组用于处理各种任务的神经网络模型，而图嵌入包括各种针对同一任务的方法。因此，GNNs 可以通过图自动编码器框架解决图嵌入问题，而图嵌入还包含其他非深度学习方法，如矩阵分解和随机游走。</p><h3 id="图神经网络与图核方法（Graph-Neural-Networks-vs-Graph-Kernel-Methods）"><a href="#图神经网络与图核方法（Graph-Neural-Networks-vs-Graph-Kernel-Methods）" class="headerlink" title="图神经网络与图核方法（Graph Neural Networks vs. Graph Kernel Methods）"></a>图神经网络与图核方法（Graph Neural Networks vs. Graph Kernel Methods）</h3><p><strong>图核方法</strong>：历史上是解决图分类问题的主要技术，通过核函数测量图对之间的相似性，从而使用支持向量机等核算法进行监督学习。图核方法可以将图或节点嵌入到向量空间，但映射函数是确定性的而非可学习的。</p><p><strong>图神经网络的优势</strong>：直接基于提取的图表示进行图分类，比图核方法更高效。此外，图核方法计算相似性时存在计算瓶颈，而GNNs通过直接对图表示进行分类克服了这一问题。</p><h2 id="定义（Definition）"><a href="#定义（Definition）" class="headerlink" title="定义（Definition）"></a>定义（Definition）</h2><h3 id="图的基本定义"><a href="#图的基本定义" class="headerlink" title="图的基本定义"></a>图的基本定义</h3><ul><li>图（Graph）：一个图表示为 $G = (V, E)$，其中 $V$ 是节点集合，$E$ 是边集合。节点 <script type="math/tex">v_i \in V</script> ，边 <script type="math/tex">e_{ij} = (v_i, v_j) \in E</script> 表示从节点 $v_j$ 指向节点 <script type="math/tex">v_i</script> 的边。</li><li>邻居（Neighborhood）：节点 $v$ 的邻居定义为 $N(v) = { u \in V | (v, u) \in E }$。</li><li>邻接矩阵（Adjacency Matrix）：$A$ 是 $n \times n$ 的矩阵，其中 <script type="math/tex">A_{ij} = 1</script> 如果 <script type="math/tex">e_{ij} \in E</script>，否则 <script type="math/tex">A_{ij} = 0</script>。</li><li>节点属性矩阵（Node Feature Matrix）：$X \in \mathbb{R}^{n \times d}$，表示节点特征矩阵，其中 $x_v \in \mathbb{R}^d$ 表示节点 $v$ 的特征向量。</li><li>边属性矩阵（Edge Feature Matrix）：<script type="math/tex">X_e \in \mathbb{R}^{m \times c}</script>，表示边特征矩阵，其中 <script type="math/tex">x_{e_{v,u}} \in \mathbb{R}^c</script> 表示边 $(v, u)$ 的特征向量。</li></ul><h3 id="有向图和无向图"><a href="#有向图和无向图" class="headerlink" title="有向图和无向图"></a>有向图和无向图</h3><ul><li><strong>有向图（Directed Graph）</strong>：所有边都是有向的。</li><li><strong>无向图（Undirected Graph）</strong>：如果图是无向的，那么对于连接的两个节点存在一对具有相反方向的边。无向图的邻接矩阵是对称的。</li></ul><h3 id="时空图（Spatial-Temporal-Graph）"><a href="#时空图（Spatial-Temporal-Graph）" class="headerlink" title="时空图（Spatial-Temporal Graph）"></a>时空图（Spatial-Temporal Graph）</h3><ul><li><strong>定义</strong>：节点属性随时间动态变化的图。表示为 $G(t)=(V,E,X(t))$,其中 $X(t)∈R$ 是图在时间 t 的节点特征矩阵。</li></ul><h3 id="符号说明（Notations）"><a href="#符号说明（Notations）" class="headerlink" title="符号说明（Notations）"></a>符号说明（Notations）</h3><p>文中使用了一些常见的符号来表示图神经网络中的概念，这些符号在文献中列出了详细的说明，如表格中的节点数量 n、边数量 m、节点特征维度 d、边特征维度 c 等。</p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240725170822583.png" alt="符号"></p><h1 id="分类与框架（Categorization-and-Frameworks）"><a href="#分类与框架（Categorization-and-Frameworks）" class="headerlink" title="分类与框架（Categorization and Frameworks）"></a>分类与框架（Categorization and Frameworks）</h1><h2 id="图神经网络的分类（Taxonomy-of-Graph-Neural-Networks-GNNs）"><a href="#图神经网络的分类（Taxonomy-of-Graph-Neural-Networks-GNNs）" class="headerlink" title="图神经网络的分类（Taxonomy of Graph Neural Networks, GNNs）"></a>图神经网络的分类（Taxonomy of Graph Neural Networks, GNNs）</h2><p>作者提出了一种新的图神经网络分类方法，将现有的GNN模型分为以下四类：</p><h3 id="递归图神经网络（Recurrent-Graph-Neural-Networks-RecGNNs）"><a href="#递归图神经网络（Recurrent-Graph-Neural-Networks-RecGNNs）" class="headerlink" title="递归图神经网络（Recurrent Graph Neural Networks, RecGNNs）"></a>递归图神经网络（Recurrent Graph Neural Networks, RecGNNs）</h3><ul><li><strong>基本思想</strong>：这些是图神经网络的早期工作，通过递归神经网络的架构来学习节点表示。假设图中的一个节点不断与其邻居交换信息，直到达到稳定的平衡点。</li><li>代表性模型：<ul><li><strong>GNN*（2009）</strong>：由Scarselli等人提出，通过信息扩散机制递归更新节点状态。</li><li><strong>GGNN（2015）</strong>：使用门控循环单元（GRU）作为递归函数，减少了迭代次数。</li><li><strong>SSE（2018）</strong>：引入了一种更具扩展性的学习算法，以异步方式更新节点状态。</li></ul></li></ul><h3 id="卷积图神经网络（Convolutional-Graph-Neural-Networks-ConvGNNs）"><a href="#卷积图神经网络（Convolutional-Graph-Neural-Networks-ConvGNNs）" class="headerlink" title="卷积图神经网络（Convolutional Graph Neural Networks, ConvGNNs）"></a>卷积图神经网络（Convolutional Graph Neural Networks, ConvGNNs）</h3><ul><li><strong>基本思想</strong>：将卷积操作从网格数据扩展到图数据，通过聚合节点及其邻居的特征来生成节点表示。</li><li>分类：<ul><li><strong>频谱方法（Spectral Methods）</strong>：基于图信号处理理论，通过图拉普拉斯矩阵的特征分解来定义卷积操作。</li><li><strong>空间方法（Spatial Methods）</strong>：直接在图的邻域上进行卷积操作，类似于传统卷积神经网络中的卷积核操作。</li></ul></li><li>代表性模型：<ul><li><strong>GCN（2017）</strong>：通过一阶近似简化了Cheb Net的计算，提出了图卷积层的基本公式。</li><li><strong>GAT（2017）</strong>：使用注意力机制来为邻居节点赋予不同的权重。</li></ul></li></ul><h3 id="图自动编码器（Graph-Autoencoders-GAEs）"><a href="#图自动编码器（Graph-Autoencoders-GAEs）" class="headerlink" title="图自动编码器（Graph Autoencoders, GAEs）"></a>图自动编码器（Graph Autoencoders, GAEs）</h3><ul><li><strong>基本思想</strong>：无监督学习框架，将节点或图编码为潜在空间表示，并从中重构图数据。用于网络嵌入和图生成。</li><li>代表性模型：<ul><li><strong>Variational Graph Autoencoder（VGAE, 2016）</strong>：通过变分推断进行图结构的生成和重构。</li></ul></li></ul><h3 id="时空图神经网络（Spatial-Temporal-Graph-Neural-Networks-STGNNs）"><a href="#时空图神经网络（Spatial-Temporal-Graph-Neural-Networks-STGNNs）" class="headerlink" title="时空图神经网络（Spatial-Temporal Graph Neural Networks, STGNNs）"></a>时空图神经网络（Spatial-Temporal Graph Neural Networks, STGNNs）</h3><ul><li><strong>基本思想</strong>：学习时空图中的隐藏模式，适用于如交通速度预测、驾驶员行为预测和人类动作识别等应用。</li><li>代表性模型：<ul><li><strong>ST-GCN（2018）</strong>：结合图卷积和时间卷积来捕捉空间和时间依赖关系。</li></ul></li></ul><h2 id="图神经网络的框架（Frameworks）"><a href="#图神经网络的框架（Frameworks）" class="headerlink" title="图神经网络的框架（Frameworks）"></a>图神经网络的框架（Frameworks）</h2><p>图神经网络的输出可以针对不同的图分析任务，采用以下机制之一：</p><h3 id="节点级别输出（Node-Level-Outputs）"><a href="#节点级别输出（Node-Level-Outputs）" class="headerlink" title="节点级别输出（Node-Level Outputs）"></a>节点级别输出（Node-Level Outputs）</h3><ul><li>相关任务：节点回归和节点分类任务。</li><li>方法：通过信息传播或图卷积提取高层次的节点表示，使用多层感知器（MLP）或softmax层作为输出层，实现端到端的节点级任务。</li></ul><h3 id="边级别输出（Edge-Level-Outputs）"><a href="#边级别输出（Edge-Level-Outputs）" class="headerlink" title="边级别输出（Edge-Level Outputs）"></a>边级别输出（Edge-Level Outputs）</h3><ul><li>相关任务：边分类和链接预测任务。</li><li>方法：使用两个节点的隐藏表示作为输入，通过相似性函数或神经网络来预测边的标签或连接强度。</li></ul><h3 id="图级别输出（Graph-Level-Outputs）"><a href="#图级别输出（Graph-Level-Outputs）" class="headerlink" title="图级别输出（Graph-Level Outputs）"></a>图级别输出（Graph-Level Outputs）</h3><ul><li>相关任务：图分类任务。</li><li>方法：结合图卷积层、图池化层和/或读出层，获取紧凑的图表示。通过应用多层感知器和SoftMax层实现端到端的图分类任务。</li></ul><h2 id="训练框架（Training-Frameworks）"><a href="#训练框架（Training-Frameworks）" class="headerlink" title="训练框架（Training Frameworks）"></a>训练框架（Training Frameworks）</h2><p>GNNs的训练可以是（半）监督或完全无监督的，取决于任务和标签信息的可用性：</p><h3 id="半监督学习（Semi-Supervised-Learning）"><a href="#半监督学习（Semi-Supervised-Learning）" class="headerlink" title="半监督学习（Semi-Supervised Learning）"></a>半监督学习（Semi-Supervised Learning）</h3><ul><li>节点级分类：在一个部分节点已标记的单一网络中，通过图卷积层和SoftMax层构建端到端框架，学习分类模型。</li></ul><h3 id="监督学习（Supervised-Learning）"><a href="#监督学习（Supervised-Learning）" class="headerlink" title="监督学习（Supervised Learning）"></a>监督学习（Supervised Learning）</h3><ul><li>图级分类：预测整个图的类别标签。通过结合图卷积层、图池化层和读出层，构建端到端的学习框架。</li></ul><h3 id="无监督学习（Unsupervised-Learning）"><a href="#无监督学习（Unsupervised-Learning）" class="headerlink" title="无监督学习（Unsupervised Learning）"></a>无监督学习（Unsupervised Learning）</h3><ul><li>图嵌入：当图中没有可用的类别标签时，可以在端到端框架中学习图嵌入。使用图自动编码器框架，通过编码器提取图的潜在表示，并通过解码器重构图结构。</li></ul><h2 id="代表性模型和方法的总结（Summary-of-Representative-Models-and-Methods）"><a href="#代表性模型和方法的总结（Summary-of-Representative-Models-and-Methods）" class="headerlink" title="代表性模型和方法的总结（Summary of Representative Models and Methods）"></a>代表性模型和方法的总结（Summary of Representative Models and Methods）</h2><p>表格中总结了递归图神经网络（RecGNNs）和卷积图神经网络（ConvGNNs）的主要特征，如输入源、池化层、读出层和时间复杂度。详细比较了不同模型的时间和内存复杂度，以帮助研究者选择合适的模型。</p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726105854299.png" alt="a" style="zoom:50%;" /></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726105952166.png" alt="2" style="zoom:50%;" /></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726110213942.png" alt="c" style="zoom:50%;" /></p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726110056701.png" alt="d" style="zoom:50%;" /></p><p>统计表格</p><p><img src="http://sh66bnaab.sabkt.gdipper.com//pic/image-20240726110626694.png" alt="tab"></p><h1 id="递归图神经网络（Recurrent-Graph-Neural-Networks-RecGNNs）-1"><a href="#递归图神经网络（Recurrent-Graph-Neural-Networks-RecGNNs）-1" class="headerlink" title="递归图神经网络（Recurrent Graph Neural Networks, RecGNNs）"></a>递归图神经网络（Recurrent Graph Neural Networks, RecGNNs）</h1><h2 id="概述（Overview）"><a href="#概述（Overview）" class="headerlink" title="概述（Overview）"></a>概述（Overview）</h2><p>递归图神经网络（RecGNNs）是最早的图神经网络模型，通过递归应用相同的一组参数在图的节点上来提取高层次的节点表示。早期的研究主要集中在有向无环图（DAGs）上。</p><h2 id="代表性模型（Representative-Models）"><a href="#代表性模型（Representative-Models）" class="headerlink" title="代表性模型（Representative Models）"></a>代表性模型（Representative Models）</h2><p> 图神经网络（GNN*，2009）</p><ul><li><strong>核心思想</strong>：基于信息扩散机制，节点的隐藏状态通过与其邻居节点的信息交换进行递归更新，直到达到稳定的固定点。</li><li><strong>公式</strong>：<script type="math/tex">h_v^{(t)} = \sum_{u \in N(v)} f(x_v, x_{e_{v,u}}, x_u, h_u^{(t-1)})</script><br>其中, <script type="math/tex">f(·)</script> 是一个参数化函数，<script type="math/tex">h_v^{(0)}</script>初始为随机值。通过反复应用该公式，节点的隐藏状态最终收敛到稳定点。</li><li><strong>特点</strong>：适用于有向、无向、循环和无循环的图。为了确保收敛，递归函数<script type="math/tex">f(·)</script>必须是收缩映射。</li></ul><p>图回声状态网络（Graph Echo State Network, GraphESN, 2010）</p><ul><li><strong>核心思想</strong>：通过扩展回声状态网络来提高GNN*的训练效率。GraphESN 由编码器和输出层组成，编码器随机初始化且不需要训练，通过收缩状态转移函数递归更新节点状态直到全局图状态收敛。</li><li><strong>公式</strong>：类似于GNN*，但编码器固定，输出层通过节点的固定状态进行训练。</li></ul><p>门控图神经网络（Gated Graph Neural Network, GGNN, 2015）</p><ul><li><strong>核心思想</strong>：采用门控循环单元（GRU）作为递归函数，减少了迭代次数，不再需要对参数进行约束以确保收敛。</li><li><p><strong>公式</strong>：<script type="math/tex">h_v^{(t)} = \text{GRU}(h_v^{(t-1)}, \sum_{u \in N(v)} W h_u^{(t-1)})</script><br>其中，<script type="math/tex">h_v^{(0)} = x_v</script> ，使用时间反向传播算法（BPTT）来学习模型参数。</p><p>随机稳态嵌入（Stochastic Steady-state Embedding, SSE, 2018）</p></li><li><p><strong>核心思想</strong>：引入了一种更具扩展性的学习算法，以异步方式更新节点状态。采用随机和异步方式来交替采样节点进行状态更新和梯度计算。</p></li><li><strong>公式</strong>：<script type="math/tex">h_v^{(t)} = (1 - \alpha) h_v^{(t-1)} + \alpha W_1 \sigma(W_2 [x_v, \sum_{u \in N(v)} [h_u^{(t-1)}, x_u]])</script><br>其中，<script type="math/tex">alpha</script>是超参数。</li></ul><h2 id="总结与讨论（Summary-and-Discussion）"><a href="#总结与讨论（Summary-and-Discussion）" class="headerlink" title="总结与讨论（Summary and Discussion）"></a>总结与讨论（Summary and Discussion）</h2><p>RecGNNs 在概念上很重要，并启发了后续的卷积图神经网络（ConvGNNs）的研究。特别是，消息传递的思想被空间卷积图神经网络所继承。RecGNNs 的训练通常计算开销较大，尤其是在大规模图上，因为它们需要多次在所有节点上运行递归函数，并存储所有节点的中间状态。表格中总结了不同RecGNNs的主要特征和复杂度，帮助读者理解这些模型的异同和适用场景。</p>]]></content>
      
      
      <categories>
          
          <category> 文献学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文综述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day14 || 二叉树2</title>
      <link href="/2024/07/16/15%20%20%E4%BA%8C%E5%8F%89%E6%A0%913/"/>
      <url>/2024/07/16/15%20%20%E4%BA%8C%E5%8F%89%E6%A0%913/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day14 || 二叉树2</title>
      <link href="/2024/07/16/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9_%E4%BA%8C%E5%8F%89%E6%A0%912/"/>
      <url>/2024/07/16/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9_%E4%BA%8C%E5%8F%89%E6%A0%912/</url>
      
        <content type="html"><![CDATA[<h1 id="226-翻转二叉树-（优先掌握递归）"><a href="#226-翻转二叉树-（优先掌握递归）" class="headerlink" title="226.翻转二叉树 （优先掌握递归）"></a>226.翻转二叉树 （优先掌握递归）</h1><p><a href="https://leetcode.cn/problems/invert-binary-tree/">题目链接</a><br>思路：交换每个节点的左右子树即可，尝试使用递归法</p><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>提示：递归三部曲</p><p>1.确定递归函数的参数和返回值</p><p><code>TreeNode* invertTree(TreeNode* root)</code> </p><p>2.确定终止条件</p><p><code>if(root == NULL) return root;</code></p><p>3.确定单层递归的逻辑</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">swap</span>(root-&gt;left,root-&gt;right);</span><br><span class="line"><span class="built_in">intvertTree</span>(root-&gt;left);</span><br><span class="line"><span class="built_in">invertTree</span>(root-&gt;right);</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left,root-&gt;right);</span><br><span class="line"><span class="built_in">intvertTree</span>(root-&gt;left);</span><br><span class="line"><span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>根据昨天的二叉树的前中后序遍历，进行改进。（先序遍历）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            TreeNode* cur = st.<span class="built_in">top</span>(); <span class="comment">//zhong</span></span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">swap</span>(cur-&gt;left,cur-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right) st.<span class="built_in">push</span>(cur-&gt;right);<span class="comment">//you</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left) st.<span class="built_in">push</span>(cur-&gt;left);<span class="comment">//zuo</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>统一写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* cur = st.<span class="built_in">top</span>();              </span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) st.<span class="built_in">push</span>(cur-&gt;right); <span class="comment">// 右 </span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) st.<span class="built_in">push</span>(cur-&gt;left); <span class="comment">// 左</span></span><br><span class="line">                st.<span class="built_in">push</span>(root); <span class="comment">// 中</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                cur=st.<span class="built_in">push</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(cur-&gt;left,cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(cur-&gt;left,cur-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left) que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right) que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="101-对称二叉树-（优先掌握递归）"><a href="#101-对称二叉树-（优先掌握递归）" class="headerlink" title="101. 对称二叉树 （优先掌握递归）"></a>101. 对称二叉树 （优先掌握递归）</h1><p>思路：判断方法分情况：</p><ol><li>左空右空、左右都非空且值相同 对称</li><li>其他情况（左右有一个为空、左右都非空且值不同） 不对称</li></ol><p>按照以上分类情况，</p><h1 id="104-二叉树的最大深度-（优先掌握递归）"><a href="#104-二叉树的最大深度-（优先掌握递归）" class="headerlink" title="104.二叉树的最大深度 （优先掌握递归）"></a>104.二叉树的最大深度 （优先掌握递归）</h1><p>什么是深度，什么是高度，如何求深度，如何求高度，这里有关系到二叉树的遍历方式。</p><p>大家 要先看视频讲解，就知道以上我说的内容了，很多录友刷过这道题，但理解的还不够。</p><h1 id="111-二叉树的最小深度-（优先掌握递归）"><a href="#111-二叉树的最小深度-（优先掌握递归）" class="headerlink" title="111.二叉树的最小深度 （优先掌握递归）"></a>111.二叉树的最小深度 （优先掌握递归）</h1><p>先看视频讲解，和最大深度 看似差不多，其实 差距还挺大，有坑。</p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day13 || 二叉树1</title>
      <link href="/2024/07/15/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9%20_%20%E4%BA%8C%E5%8F%89%E6%A0%911/"/>
      <url>/2024/07/15/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9%20_%20%E4%BA%8C%E5%8F%89%E6%A0%911/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h1><p>写递归需按照这三要素来写：</p><ol><li><p><strong>确定递归函数的参数和返回值</strong>： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</p></li><li><p><strong>确定终止条件</strong>： 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</p></li><li><p><strong>确定单层递归的逻辑</strong>： 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</p></li></ol><p>前序遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a>144. 二叉树的前序遍历</h1><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">题目链接</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(TreeNode* root,vector&lt;<span class="type">int</span>&gt; &amp;ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">pre</span>(root-&gt;left,ans);</span><br><span class="line">        <span class="built_in">pre</span>(root-&gt;right,ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">pre</span>(root,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h1><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">题目链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">pre</span>(root-&gt;left, ans);</span><br><span class="line">        <span class="built_in">pre</span>(root-&gt;right, ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">pre</span>(root,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>懒得改名称</p><h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h1><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">题目链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">pre</span>(root-&gt;left, ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">pre</span>(root-&gt;right, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">pre</span>(root,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="二叉树的迭代遍历"><a href="#二叉树的迭代遍历" class="headerlink" title="二叉树的迭代遍历"></a>二叉树的迭代遍历</h1><p>前序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;right)</span><br><span class="line">                st.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;left)</span><br><span class="line">                st.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>中序（加指针）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// vector&lt;int&gt; ans;</span></span><br><span class="line">        <span class="comment">// pre(root,ans);</span></span><br><span class="line">        <span class="comment">// return ans;</span></span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span> || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后序（=前序+reverse（res））</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// vector&lt;int&gt; ans;</span></span><br><span class="line">        <span class="comment">// pre(root,ans);</span></span><br><span class="line">        <span class="comment">// return ans;</span></span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* cur = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left) st.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right) st.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><h1 id="二叉树的统一迭代法"><a href="#二叉树的统一迭代法" class="headerlink" title="二叉树的统一迭代法"></a>二叉树的统一迭代法</h1><p>思路：无法同时解决访问节点（遍历节点）和处理节点（将元素放进结果集）不一致的情况。那就将访问的节点放入栈中，把要处理的节点也放入栈中但是要做标记。就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。 </p><p>中序（右中左）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="comment">///////////////////////////////////////////////////</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                st.<span class="built_in">push</span>(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">                <span class="comment">///////////////////////////////////////////////////</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.<span class="built_in">pop</span>();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.<span class="built_in">top</span>();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前序（右左中）<br>后续（中右左）</p><h1 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h1><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">题目链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; qu;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        qu.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">            <span class="type">int</span> s = qu.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">                TreeNode* cur = qu.<span class="built_in">front</span>();</span><br><span class="line">                qu.<span class="built_in">pop</span>();</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    qu.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    qu.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归法没想到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">order</span><span class="params">(TreeNode* cur, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="built_in">size</span>() == depth)</span><br><span class="line">            result.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        result[depth].<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;left, result, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;right, result, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">order</span>(root, result, depth);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day11 || 栈与队列2</title>
      <link href="/2024/07/13/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9%20_%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%972/"/>
      <url>/2024/07/13/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9%20_%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%972/</url>
      
        <content type="html"><![CDATA[<h1 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h1><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">题目链接</a><br>状态：错一次<br>错误原因：stoi不会使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st.<span class="built_in">empty</span>() &amp;&amp; (tokens[i] == <span class="string">&quot;+&quot;</span> || tokens[i] == <span class="string">&quot;-&quot;</span> ||</span><br><span class="line">                                tokens[i] == <span class="string">&quot;*&quot;</span> || tokens[i] == <span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                b = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">empty</span>())</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                a = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(a + b);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(a - b);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;*&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(a * b);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    st.<span class="built_in">push</span>(a / b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(tokens[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=st.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实不用判断连续取两次会失败或栈为空的情况 (&gt;_&lt;)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 力扣修改了后台测试数据，需要用longlong</span></span><br><span class="line">        stack&lt;<span class="type">long</span> <span class="type">long</span>&gt; st; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;+&quot;</span> || tokens[i] == <span class="string">&quot;-&quot;</span> || tokens[i] == <span class="string">&quot;*&quot;</span> || tokens[i] == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> num1 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> num2 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;+&quot;</span>) st.<span class="built_in">push</span>(num2 + num1);</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;-&quot;</span>) st.<span class="built_in">push</span>(num2 - num1);</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;*&quot;</span>) st.<span class="built_in">push</span>(num2 * num1);</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;/&quot;</span>) st.<span class="built_in">push</span>(num2 / num1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoll</span>(tokens[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>(); <span class="comment">// 把栈里最后一个元素弹出（其实不弹出也没事）</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h1><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/">题目链接</a><br>状态：超时<br>思路：暴力</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(queue&lt;<span class="type">int</span>&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> max = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            max = max &gt; q.<span class="built_in">front</span>() ? max : q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t != k) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">                t++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = <span class="built_in">qmax</span>(q);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">                <span class="keyword">if</span> (i == nums.<span class="built_in">size</span>())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                q.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>正确方法：单调队列！<br>整体结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>设计单调队列的时候，pop，和push操作要保持如下规则：</p><ul><li>pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</li><li>push(value)：如果push的元素value大于入口元素的数值，那么就将队列入口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止<br>保持如上规则，每次窗口移动的时候，只要问que.front()就可以返回当前窗口的最大值。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Myqueue</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val == que.<span class="built_in">front</span>())</span><br><span class="line">                que.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val &gt; que.<span class="built_in">back</span>())</span><br><span class="line">                que.<span class="built_in">pop_back</span>();</span><br><span class="line">            que.<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> que.<span class="built_in">front</span>(); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        Myqueue que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            que.<span class="built_in">pop</span>(nums[i - k]);</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>值得反复学习</p><h1 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h1><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">题目链接</a><br>状态：想起来使用堆，但代码不会写，学习学习<br>思路：优先级队列！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断标准</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">mycomparison</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">       <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>参考代码！好好学</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">mycomparison</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 要统计元素出现频率</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map; <span class="comment">// map&lt;nums[i],对应出现的次数&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            map[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对频率排序</span></span><br><span class="line">        <span class="comment">// 定义一个小顶堆，大小为k</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, mycomparison&gt; pri_que;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用固定大小为k的小顶堆，扫面所有频率的数值</span></span><br><span class="line">        <span class="keyword">for</span> (unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = map.<span class="built_in">begin</span>(); it != map.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            pri_que.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span> (pri_que.<span class="built_in">size</span>() &gt; k) &#123; <span class="comment">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span></span><br><span class="line">                pri_que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[i] = pri_que.<span class="built_in">top</span>().first;</span><br><span class="line">            pri_que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结：优先队列"><a href="#总结：优先队列" class="headerlink" title="总结：优先队列"></a>总结：优先队列<priority_queue></h1><p>在 C++ 中，<priority_queue> 是标准模板库（STL）的一部分，用于实现优先队列。</p><p>优先队列是一种特殊的队列，它允许我们快速访问队列中具有最高（或最低）优先级的元素。在 C++ 中，priority_queue 默认是一个<strong>最大堆</strong>，这意味着队列的顶部元素总是具有最大的值。</p><p>priority_queue 是一个容器适配器，它提供了对底层容器的堆操作。它不提供迭代器，也不支持随机访问。</p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈与队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day10 || 栈与队列1</title>
      <link href="/2024/07/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9%20_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%971/"/>
      <url>/2024/07/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9%20_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%971/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>栈和队列是STL（C++标准库）里面的两个数据结构。</p><ul><li>HP STL 其他版本的C++ STL，一般是以HP STL为蓝本实现出来的，HP STL是C++ STL的第一个实现版本，而且开放源代码。</li></ul><ul><li><p>P.J.Plauger STL 由P.J.Plauger参照HP STL实现出来的，被Visual C++编译器所采用，不是开源的。</p></li><li><p>SGI STL 由Silicon Graphics Computer Systems公司参照HP STL实现，被Linux的C++编译器GCC所采用，SGI STL是开源软件，源码可读性甚高。</p></li></ul><p>栈和队列也是SGI STL里面的数据结构</p><p><strong>stack</strong></p><ul><li>push(): 在栈顶添加一个元素。 </li><li>pop(): 移除栈顶元素。</li><li>top(): 返回栈顶元素的引用，但不移除它。 </li><li>empty():检查栈是否为空。 </li><li>size(): 返回栈中元素的数量。</li></ul><p><strong>queue</strong></p><ul><li>empty(): 检查队列是否为空。</li><li>size(): 返回队列中的元素数量。</li><li>front(): 返回队首元素的引用。</li><li>back(): 返回队尾元素的引用。</li><li>push(): 在队尾添加一个元素。</li><li>pop(): 移除队首元素。</li></ul><h1 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h1><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">题目链接</a><br>状态：基本功</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sin;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sout;</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        sin.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sout.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!sin.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                sout.<span class="built_in">push</span>(sin.<span class="built_in">top</span>());</span><br><span class="line">                sin.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t=sout.<span class="built_in">top</span>();</span><br><span class="line">        sout.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">pop</span>();</span><br><span class="line">        sout.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sin.<span class="built_in">empty</span>()&amp;&amp;sout.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h1><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">题目链接</a><br>状态：基本功</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=q.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">back</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h1><p><a href="https://leetcode.cn/problems/valid-parentheses/">题目链接</a><br>状态：错一次<br>错误原因：匹配前未检查栈是否为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="type">char</span> t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;(&#x27;</span> || i == <span class="string">&#x27;[&#x27;</span> || i == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!st.<span class="built_in">empty</span>() &amp;&amp; ((i == <span class="string">&#x27;)&#x27;</span> &amp;&amp; st.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) ||</span><br><span class="line">                                     (i == <span class="string">&#x27;]&#x27;</span> &amp;&amp; st.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>) ||</span><br><span class="line">                                     (i == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; st.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>))) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改进版本<br>见前括号，push相应的后括号，然后匹配时直接对比是否相同（其实思路一样）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果s的长度为奇数，一定不符合要求</span></span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="comment">// 第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号 return false</span></span><br><span class="line">            <span class="comment">// 第二种情况：遍历字符串匹配的过程中，发现栈里没有我们要匹配的字符。所以return false</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>() != s[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">pop</span>(); <span class="comment">// st.top() 与 s[i]相等，栈弹出元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一种情况：此时我们已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false，否则就return true</span></span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h1><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">题目链接</a><br>状态：错一次<br>错误原因：reverse参数写错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st.<span class="built_in">top</span>() != i) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>() == i) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans += st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>官解：直接拿字符串当栈！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> s : S) &#123;</span><br><span class="line">            <span class="keyword">if</span>(result.<span class="built_in">empty</span>() || result.<span class="built_in">back</span>() != s) &#123;</span><br><span class="line">                result.<span class="built_in">push_back</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                result.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈与队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day9 || 字符串2</title>
      <link href="/2024/07/11/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B9%9D%E5%A4%A9%20_%E5%AD%97%E7%AC%A6%E4%B8%B22/"/>
      <url>/2024/07/11/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B9%9D%E5%A4%A9%20_%E5%AD%97%E7%AC%A6%E4%B8%B22/</url>
      
        <content type="html"><![CDATA[<h1 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h1><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">题目链接</a><br>状态：一遍过<br>思路：使用栈，先进后出，除去空格</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;string&gt; stack;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            string tmp;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;n&amp;&amp;s[i]!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                tmp+=s[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tmp!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans = stack.<span class="built_in">top</span>();</span><br><span class="line">        stack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span>(!stack.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ans+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            ans+=stack.<span class="built_in">top</span>();</span><br><span class="line">            stack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>官解思路：1.移除多余空格-&gt;2.将整个字符串反转-&gt;3.将每个单词反转<br>1.移除多余空格<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeExtraSpaces</span><span class="params">(string&amp; s)</span> </span>&#123;<span class="comment">//去除所有空格并在相邻单词之间添加空格, 快慢指针。</span></span><br><span class="line">    <span class="type">int</span> slow = <span class="number">0</span>;   <span class="comment">//整体思想参考https://programmercarl.com/0027.移除元素.html</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//遇到非空格就处理，即删除所有空格。</span></span><br><span class="line">            <span class="keyword">if</span> (slow != <span class="number">0</span>) s[slow++] = <span class="string">&#x27; &#x27;</span>; <span class="comment">//手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//补上该单词，遇到空格说明单词结束。</span></span><br><span class="line">                s[slow++] = s[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">resize</span>(slow); <span class="comment">//slow的大小即为去除多余空格后的大小。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2.将整个字符串反转<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转字符串s中左闭右闭的区间[start, end]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.将每个单词反转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">removeExtraSpaces</span>(s); <span class="comment">//去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span></span><br><span class="line">        <span class="built_in">reverse</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>; <span class="comment">//removeExtraSpaces后保证第一个单词的开始下标一定是0。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == s.<span class="built_in">size</span>() || s[i] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//到达空格或者串尾，说明一个单词结束。进行翻转。</span></span><br><span class="line">                <span class="built_in">reverse</span>(s, start, i - <span class="number">1</span>); <span class="comment">//翻转，注意是左闭右闭 []的翻转。</span></span><br><span class="line">                start = i + <span class="number">1</span>; <span class="comment">//更新下一个单词的开始下标start</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结：思路值得研究！</p><h1 id="卡码网：55-右旋转字符串"><a href="#卡码网：55-右旋转字符串" class="headerlink" title="卡码网：55.右旋转字符串"></a>卡码网：55.右旋转字符串</h1><p><a href="https://kamacoder.com/problempage.php?pid=1065">题目链接</a><br>状态：一遍过<br>思路：经典三次旋转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(s,<span class="number">0</span>,n);</span><br><span class="line">    <span class="built_in">reverse</span>(s,<span class="number">0</span>,k);</span><br><span class="line">    <span class="built_in">reverse</span>(s,k,n);</span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以直接调库函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">...</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()); <span class="comment">// 整体反转</span></span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + n); <span class="comment">// 先反转前一段，长度n</span></span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + n, s.<span class="built_in">end</span>()); <span class="comment">// 再反转后一段</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下面较难先占坑，以后回头填</p><h1 id="28-实现-strStr-（本题可以跳过）"><a href="#28-实现-strStr-（本题可以跳过）" class="headerlink" title="28. 实现 strStr()  （本题可以跳过）"></a>28. 实现 strStr()  （本题可以跳过）</h1><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">题目链接</a></p><h1 id="459-重复的子字符串-（本题可以跳过）"><a href="#459-重复的子字符串-（本题可以跳过）" class="headerlink" title="459.重复的子字符串  （本题可以跳过）"></a>459.重复的子字符串  （本题可以跳过）</h1><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day8 || 字符串1</title>
      <link href="/2024/07/10/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AB%E5%A4%A9%20_%E5%AD%97%E7%AC%A6%E4%B8%B21/"/>
      <url>/2024/07/10/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AB%E5%A4%A9%20_%E5%AD%97%E7%AC%A6%E4%B8%B21/</url>
      
        <content type="html"><![CDATA[<h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h1><p><a href="https://leetcode.cn/problems/reverse-string/description/">题目链接</a><br>状态: 一遍过<br>思路: 基础题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="type">char</span> tmp=s[i];</span><br><span class="line">            s[i]=s[n-i<span class="number">-1</span>];</span><br><span class="line">            s[n-i<span class="number">-1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>简洁版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>()/<span class="number">2</span>; i++, j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h1><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/">题目链接</a><br>状态：两遍过<br>错误原因：考虑条件写反了<br>思路： for每次+=2*k，判断条件分两种：第一种未到末尾和到末尾长度大于k，都应该交换前k个；第二种到末尾但小于k，则需和此处到末尾的地方翻转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += (<span class="number">2</span> * k)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + k &lt;= n) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                    <span class="type">char</span> t = s[i + j];</span><br><span class="line">                    s[i + j] = s[i + k - <span class="number">1</span> - j];</span><br><span class="line">                    s[i + k - <span class="number">1</span> - j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (n - i + <span class="number">1</span>) / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                    <span class="type">char</span> t = s[i+j];</span><br><span class="line">                    s[i+j] = s[n<span class="number">-1</span>-j];</span><br><span class="line">                    s[n<span class="number">-1</span>-j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>竟然可以用库函数，不讲武德</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += (<span class="number">2</span> * k)) &#123;</span><br><span class="line">            <span class="comment">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class="line">            <span class="comment">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span></span><br><span class="line">            <span class="keyword">if</span> (i + k &lt;= s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 3. 剩余字符少于 k 个，则将剩余字符全部反转。</span></span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="卡码网：54-替换数字"><a href="#卡码网：54-替换数字" class="headerlink" title="卡码网：54.替换数字"></a>卡码网：54.替换数字</h1><p><a href="https://kamacoder.com/problempage.php?pid=1064">题目链接</a><br>状态：错一次<br>错误原因：”number”错写成‘number’</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> i:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;i&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;number&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day7 || 哈希表2</title>
      <link href="/2024/07/09/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%83%E5%A4%A9%20_%E5%93%88%E5%B8%8C%E8%A1%A82/"/>
      <url>/2024/07/09/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%83%E5%A4%A9%20_%E5%93%88%E5%B8%8C%E8%A1%A82/</url>
      
        <content type="html"><![CDATA[<h1 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h1><p><a href="https://leetcode.cn/problems/4sum-ii/description/">题目链接</a><br>状态：一次过但耗时长<br>思路：和两数加和思路一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3,</span></span></span><br><span class="line"><span class="params"><span class="function">                     vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums2)</span><br><span class="line">                mp[-(i + j)]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums3)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums4)</span><br><span class="line">            res += mp[i + j];<span class="comment">// 如果 mp[i + j] 不存在，默认返回 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>没想到和官方答案一样，时间和空间复杂度都是$O(n^2)$，可以加一句</p><blockquote><p>if (mp.find (i+j) != mp.end()) </p></blockquote><h1 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h1><p><a href="https://leetcode.cn/problems/ransom-note/">题目链接</a><br>昨天写过了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i :magazine) ans[i]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> j :ransomNote)</span><br><span class="line">            <span class="keyword">if</span> (--ans[j] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是在本题的情况下，使用map的空间消耗要比数组大一些的，因为map要维护红黑树或者哈希表，而且还要做哈希函数，是费时的！数据量大的话就能体现出来差别了。 所以数组更加简单直接有效！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        <span class="keyword">if</span> (ransomNote.<span class="built_in">size</span>() &gt; magazine.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; magazine.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 通过record数据记录 magazine里各个字符出现次数</span></span><br><span class="line">            record[magazine[i]-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ransomNote.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">            <span class="comment">// 遍历ransomNote，在record里对应的字符个数做--操作</span></span><br><span class="line">            record[ransomNote[j]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="comment">// 如果小于零说明ransomNote里出现的字符，magazine没有</span></span><br><span class="line">            <span class="keyword">if</span>(record[ransomNote[j]-<span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h1><p><a href="https://leetcode.cn/problems/3sum/">题目链接</a><br>状态：用哈希真难写，快写完了发现要返回数字，白写<br>运行超时代码：暴力三指针遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="comment">// 对数组进行排序</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 遍历数组，尝试找到所有满足条件的三元组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// 跳过重复元素</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="comment">// 跳过重复元素</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                    <span class="comment">// 跳过重复元素</span></span><br><span class="line">                    <span class="keyword">if</span> (k &gt; j + <span class="number">1</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看了答案发现哈希不适合，应该使用双指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 错误去重a方法，将会漏掉-1,-1,2 这种情况</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if (nums[i] == nums[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 正确去重a方法</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                <span class="comment">// 去重复逻辑如果放在这里，0，0，0 的情况，可能直接导致 right&lt;=left 了，从而漏掉了 0,0,0 这种三元组</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对b 和 c去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 找到答案时，双指针同时收缩</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重难点：1.去重方法 2.指针移动判断</p><h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h1><p><a href="https://leetcode.cn/problems/4sum/">题目链接</a><br>状态：没做出来，想着借鉴三数之和的思路，但细节没梳理好<br>重点：剪枝和去重<br>答案参考：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; nums.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">            <span class="comment">// 剪枝处理</span></span><br><span class="line">            <span class="keyword">if</span> (nums[k] &gt; target &amp;&amp; nums[k] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 这里使用break，统一通过最后的return返回</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对nums[k]去重</span></span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="comment">// 2级剪枝处理</span></span><br><span class="line">                <span class="keyword">if</span> (nums[k] + nums[i] &gt; target &amp;&amp; nums[k] + nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 对nums[i]去重</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                    <span class="comment">// nums[k] + nums[i] + nums[left] + nums[right] &gt; target 会溢出</span></span><br><span class="line">                    <span class="keyword">if</span> ((<span class="type">long</span>) nums[k] + nums[i] + nums[left] + nums[right] &gt; target) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    <span class="comment">// nums[k] + nums[i] + nums[left] + nums[right] &lt; target 会溢出</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">long</span>) nums[k] + nums[i] + nums[left] + nums[right]  &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[k], nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                        <span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 找到答案时，双指针同时收缩</span></span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总结：这两天难度越来越高了，尤其后两题，后头仔细研究研究</p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day6 || 哈希表1</title>
      <link href="/2024/07/08/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9%20_%E5%93%88%E5%B8%8C%E8%A1%A81/"/>
      <url>/2024/07/08/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9%20_%E5%93%88%E5%B8%8C%E8%A1%A81/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h1><p>目的：<strong><em>快速判断一个元素是否出现集合里</em></strong><br>常见的三种哈希结构<br><strong><em>数组、set （集合）、map(映射)</em></strong><br>（偷懒直接截图了）<br><img src="https://i-blog.csdnimg.cn/direct/6640e620dd134106a9e59090b32280c9.png#pic_center" alt="1"><br><img src="https://i-blog.csdnimg.cn/direct/664bccc2ae0940dfb7a9fe0b98905dcc.png#pic_center" alt="2"></p><h1 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h1><p><a href="https://leetcode.cn/problems/valid-anagram/description/">题目链接</a><br>状态：两遍过<br>错误原因：为考虑两字符串长度不同可直接返回false<br>思路：之前在《904. 水果成篮》中学到的unordered_map可直接用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">size</span>(), n = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m != n) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//第一次未考虑到</span></span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) ans[s[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (--ans[t[j]] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有更高级写法可以学习借鉴</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i : s)  <span class="comment">// 遍历字符串 s，统计其中每个字符出现的次数，并将其存储在 map1 中</span></span><br><span class="line">    ans[i]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i : t)  <span class="comment">// 遍历字符串 t，对于其中的每个字符，减少其在 map1 中的计数器</span></span><br><span class="line">    ans[i]--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : ans) &#123;  <span class="comment">// 遍历 map1 中的所有键值对</span></span><br><span class="line">    <span class="keyword">if</span> (it.second != <span class="number">0</span>) &#123;  <span class="comment">// 如果有任何一个键值对的值不为零，则表示两个字符串不互为字谜，返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>答案还有一种暴力排序做的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;  <span class="comment">// 定义 isAnagram 方法，接受两个字符串参数</span></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()!=t.<span class="built_in">length</span>())  <span class="comment">// 如果两个字符串的长度不同，直接返回 false，它们不可能互为字谜</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  <span class="comment">// 对字符串 s 进行排序</span></span><br><span class="line">        <span class="built_in">sort</span>(t.<span class="built_in">begin</span>(),t.<span class="built_in">end</span>());  <span class="comment">// 对字符串 t 进行排序</span></span><br><span class="line">        <span class="keyword">return</span> s==t;  <span class="comment">// 返回字符串 s 和 t 是否完全相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">题目链接</a><br>思路一样，甚至无需比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i :magazine) ans[i]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> j :ransomNote)</span><br><span class="line">            <span class="keyword">if</span> (--ans[j] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a>49. 字母异位词分组</h2><p><a href="https://leetcode.cn/problems/group-anagrams/description/">题目链接</a><br>状态：难，没做出来<br>思路：很复杂，<br>答案思路参考：</p><blockquote><p>两个字符串互为字母异位词，当且仅当两个字符串包含的字母相同。同一组字母异位词中的字符串具备相同点，可以使用相同点作为一组字母异位词的标志，使用哈希表存储每一组字母异位词，哈希表的键为一组字母异位词的标志，哈希表的值为一组字母异位词列表。</p><p>遍历每个字符串，对于每个字符串，得到该字符串所在的一组字母异位词的标志，将当前字符串加入该组字母异位词的列表中。遍历全部字符串之后，哈希表中的每个键值对即为一组字母异位词。</p></blockquote><p>官方题解<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (string&amp; str: strs) &#123;</span><br><span class="line">        <span class="comment">//string&amp; str 的使用是为了提高效率，避免在每次迭代中复制字符串，从而减少内存和时间开销。</span></span><br><span class="line">            string key = str;</span><br><span class="line">            <span class="built_in">sort</span>(key.<span class="built_in">begin</span>(), key.<span class="built_in">end</span>());</span><br><span class="line">            mp[key].<span class="built_in">emplace_back</span>(str);</span><br><span class="line">            <span class="comment">//push_back：需要先构造一个临时对象，然后将其拷贝或移动到容器中。对于非平凡构造（例如自定义类的对象），这意味着需要额外的构造和析构开销。</span></span><br><span class="line"><span class="comment">//emplace_back：直接在容器末尾构造对象，避免了临时对象的创建和销毁，通常比 push_back 更高效。</span></span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(it-&gt;second);</span><br><span class="line">            <span class="comment">//每个元素（键值对）包含两个部分：键（first）和值（second）。</span></span><br><span class="line">            <span class="comment">//it-&gt;first：返回当前迭代器 it 指向元素的键.</span></span><br><span class="line">            <span class="comment">//it-&gt;second：返回当前迭代器 it 指向元素的值。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>思路二：使用哈希表<br>思路：使用长度为 26 的数组记录每个字母出现的次数，这也是我最开始想要使用的思路，奈何水平不够，没整理出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt; &amp;strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : strs) &#123;</span><br><span class="line">            string sorted_s = s;</span><br><span class="line">            ranges::<span class="built_in">sort</span>(sorted_s);</span><br><span class="line">            m[sorted_s].<span class="built_in">push_back</span>(s); <span class="comment">// sorted_s 相同的字符串分到同一组</span></span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        ans.<span class="built_in">reserve</span>(m.<span class="built_in">size</span>()); <span class="comment">// 预分配空间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[_, value] : m) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a>438. 找到字符串中所有字母异位词</h2><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/">题目链接</a><br>状态：超时<br>思路：暴力直接将p字符串排序后放到map中，在从s字符串中依次取p长度的子字符串，排序后和map中的比较，若相同返回下标索引，反之继续。<br>初始超时代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">size</span>(), n = p.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        string sub;</span><br><span class="line">        <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line">        mp[p]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m - n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            sub = s.<span class="built_in">substr</span>(j, n);</span><br><span class="line">            <span class="built_in">sort</span>(sub.<span class="built_in">begin</span>(),sub.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">if</span> (mp[sub] != <span class="number">0</span>)</span><br><span class="line">                res.<span class="built_in">push_back</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改版：使用滑动窗口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">size</span>(), n = p.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp_s, mp_p;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : p)</span><br><span class="line">            mp_p[i]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            mp_s[s[j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 滑动窗口</span></span><br><span class="line">        <span class="keyword">if</span> (mp_s == mp_p)</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = n; j &lt; m; i++, j++) &#123;</span><br><span class="line">            mp_s[s[j]]++;           <span class="comment">// 增加滑动窗口右边界字符的频率</span></span><br><span class="line">            <span class="keyword">if</span> (--mp_s[s[i]] == <span class="number">0</span>)  <span class="comment">// 减少滑动窗口左边界字符的频率</span></span><br><span class="line">                mp_s.<span class="built_in">erase</span>(s[i]);   <span class="comment">// 如果频率为零，删除该字符</span></span><br><span class="line">            <span class="keyword">if</span> (mp_s == mp_p) res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>忽然发现 unordered_map 好像没什么用，下附一个关于滑动窗口的链接，学完后无敌<br><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/solutions/9749/hua-dong-chuang-kou-tong-yong-si-xiang-jie-jue-zi-">滑动窗口</a></p><h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">题目链接</a><br>状态：错一次<br>错误原因：未考虑返回数组不重复问题<br>思路：用哈希表先记录一个数组的元素，个数统一为一，再遍历第二个数组，若哈希表里已有则将个数置0，并加入到返回向量中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; ans;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums1) ans[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j:nums2)</span><br><span class="line">            <span class="keyword">if</span>(ans[j]==<span class="number">1</span>)&#123;</span><br><span class="line">                ans[j]=<span class="number">0</span>;</span><br><span class="line">                res.<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;     </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看了标准答案，和他思路一样不过写法我的好像更好一点<br>下面的答案值得学习</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; result_set; <span class="comment">// 存放结果，之所以用set是为了给结果集去重</span></span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">nums_set</span><span class="params">(nums<span class="number">1.</span>begin(), nums<span class="number">1.</span>end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">            <span class="comment">// 发现nums2的元素 在nums_set里又出现过</span></span><br><span class="line">            <span class="keyword">if</span> (nums_set.<span class="built_in">find</span>(num) != nums_set.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                result_set.<span class="built_in">insert</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.<span class="built_in">begin</span>(), result_set.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//当使用 end() 函数时，它并不指向任何有效的元素，而是表示迭代器已经遍历完容器内的所有元素。</span></span><br><span class="line"><span class="comment">//在 unordered_set 的上下文中，由于它是无序的，end() 并不指向一个特定的元素，它仅仅是一个用来表示遍历结束的迭代器。</span></span><br><span class="line"><span class="comment">//在代码中，nums_set.find(num) != nums_set.end() 这行检查 find 函数返回的迭代器是否不等于 end()。</span></span><br><span class="line"><span class="comment">//如果 find 函数找到了元素 num，它将返回指向该元素的迭代器；如果没有找到，它将返回 end()。这个检查用于确定元素是否存在于 nums_set 中。</span></span><br></pre></td></tr></table></figure><p>在这个问题中，使用 unordered_set 而不是 unordered_map 主要基于以下原因：</p><ol><li><p>需求: 问题要求找出两个数组的交集，即找到在两个数组中都存在的元素。这不需要存储任何额外的信息，只需要知道某个元素是否存在。</p></li><li><p>性能: unordered_set 提供平均常数时间复杂度的查找性能，这使得它非常适合快速检查元素是否存在。</p></li><li><p>简洁性: 使用 unordered_set 可以避免不必要的复杂性。unordered_map 存储键值对，而在这个场景中，我们不需要存储任何值，只需要知道元素是否存在。</p></li><li><p>内存使用: unordered_set 只存储元素本身，而 unordered_map 需要额外的空间来存储与每个键关联的值（在这个场景中，值是不必要的）。</p></li><li><p>实现简单性: 使用 unordered_set 可以简化代码实现，因为不需要处理键值对，只需要处理单个元素。</p></li><li><p>自动去重: unordered_set 会自动去除重复元素，这正是寻找两个数组交集所需要的特性。</p></li><li><p>直接使用: unordered_set 可以直接使用 insert 或 emplace 方法添加元素，并利用 count 或 find 方法检查元素是否存在。</p></li><li><p>转换方便: 最终结果需要转换为 vector<int>，而 unordered_set 可以直接转换为 vector，因为集合中的元素已经是排序好的。</p></li></ol><p>使用 unordered_map 在这个场景下可能会引入不必要的复杂性和性能开销，因为 unordered_map 需要额外的内存来存储值，并且在每次查找时都需要处理键值对，这在只需要检查元素存在性的情况下是不必要的。</p><h1 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h1><p><a href="https://leetcode.cn/problems/happy-number/description/">题目链接</a><br>状态：错两次<br>错误原因：1. 未考虑无限循环。2. set.find(num) != set.end()理解出错，应为重复出现而不是未出现<br>初始代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            n = <span class="built_in">func</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (set.<span class="built_in">find</span>(n) != set.<span class="built_in">end</span>())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                set.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>改进写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            n = <span class="built_in">func</span>(n);</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果 n 变为 1，这是一个快乐数</span></span><br><span class="line">            <span class="keyword">auto</span> result = set.<span class="built_in">insert</span>(n).second; <span class="comment">// 尝试插入 n 并获取插入成功与否的状态</span></span><br><span class="line">            <span class="keyword">if</span> (!result) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果插入失败，说明 n 已经出现过，返回 false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>insert 函数的返回值是一个 pair 类型，其中：</p><p>pair::first 是一个迭代器，指向集合中的元素，如果插入成功，它指向新插入的元素；如果元素已存在，则指向已存在的元素。<br>pair::second 是一个布尔值，表示插入操作是否成功。如果 second 为 true，则表示元素被成功插入；如果为 false，则表示元素已存在，没有执行插入操作。</p><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><p><a href="https://leetcode.cn/problems/two-sum/">题目链接</a><br>状态：只想到了暴力方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重点：当需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。本题需要一个集合来存放遍历过的元素，然后在遍历数组的时候去询问这个集合，某元素是否遍历过，也就是 是否出现在这个集合。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        std::unordered_map &lt;<span class="type">int</span>,<span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">            <span class="keyword">auto</span> iter = map.<span class="built_in">find</span>(target - nums[i]); </span><br><span class="line">            <span class="keyword">if</span>(iter != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;iter-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">            map.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(nums[i], i)); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>理解：就遍历一个$nums[i]$，就在哈希表中找他相对应加和为$target$ 的数 $target-nums[i]$ ，若有则返回，否则添加进去。</p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day4 || 链表2</title>
      <link href="/2024/07/06/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9%20_%E9%93%BE%E8%A1%A8%E5%89%A9%E4%BD%99%E9%A2%98%E7%9B%AE/"/>
      <url>/2024/07/06/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9%20_%E9%93%BE%E8%A1%A8%E5%89%A9%E4%BD%99%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">题目链接</a><br>状态： 一遍过<br>思路： 使用虚拟节点放在开头，注意盯住三个节点的变化即可</p><p>原始代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* dummynode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummynode-&gt;next = head;</span><br><span class="line">        ListNode *cur = head-&gt;next, *pre = head, *h = dummynode;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            h-&gt;next = cur;</span><br><span class="line">            h = pre;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (pre != <span class="literal">nullptr</span>)</span><br><span class="line">                cur = pre-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        h = dummynode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummynode;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改进地点：</p><ol><li>在判断while时可以包含空节点或单一节点，统一化判断</li><li>简化每次交换中节点个数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>); <span class="comment">// 设置一个虚拟头结点</span></span><br><span class="line">        dummyHead-&gt;next = head; <span class="comment">// 将虚拟头结点指向head，这样方便后面做删除操作</span></span><br><span class="line">        ListNode* cur = dummyHead,* tmp,*tmp1;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            tmp = cur-&gt;next; <span class="comment">// 记录临时节点</span></span><br><span class="line">            tmp1 = cur-&gt;next-&gt;next-&gt;next; <span class="comment">// 记录临时节点</span></span><br><span class="line"></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;    <span class="comment">// 步骤一</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp;          <span class="comment">// 步骤二</span></span><br><span class="line">            cur-&gt;next-&gt;next-&gt;next = tmp1;   <span class="comment">// 步骤三</span></span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next-&gt;next; <span class="comment">// cur移动两位，准备下一轮交换</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">题目链接</a></p><p>状态：一遍过<br>思路：1.虚拟节点指向head。2. 快慢指针相隔n个节点。3. 前一个节点的后继为空，则后一个节点即为倒数第n个节点（应删除节点）的前驱节点，故直接删除即可。4.最后释放删除节点和虚拟节点内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode *dummynode =<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummynode-&gt;next=head;</span><br><span class="line">        ListNode*p,*q;</span><br><span class="line">        p=q=dummynode;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p=q-&gt;next;</span><br><span class="line">        q-&gt;next=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p=<span class="literal">nullptr</span>;</span><br><span class="line">        q=dummynode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummynode;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h1><p> <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">题目链接</a><br>状态：一遍过<br>思路：先计算短的链表的长度，再计算长的链表与其差值n，目的是使链表右端对齐。接着长的链表先走n个节点，两节点再携手共进，若两个指针所指的节点为同一个，则返回该该节点；否则返回空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>,n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">        ListNode *p=headA,*q=headB;</span><br><span class="line">        <span class="keyword">for</span>(;p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>;p=p-&gt;next,q=q-&gt;next,m++);</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            n1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">            n2++;</span><br><span class="line">        &#125;</span><br><span class="line">        p=headA;q=headB;</span><br><span class="line">        <span class="keyword">while</span>(n1--) p=p-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(n2--) q=q-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q==p)&#123;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改进：看了答案的代码大为震撼<br>A长度为a,B长度为b，将两者末尾再接上对方的链表的头<br>A  —-  A+B<br>B  —-  B+A<br>原理都一样，若A短B长，当B走完自身长度时，A自身已经走完，且多走的距离正是B比A长的距离。这距离本应该在第二次遍历时，让B先走，因此A后接B相当于提前开启第二次遍历，当B走完时接着走A，这时的状态恰好是新一轮的B（A后的B）走了比A多的距离。在此之后携手一同向后走即可找到。<br>只能说牛犇，我还得练。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode *A = headA, *B = headB;</span><br><span class="line">        <span class="keyword">while</span> (A != B) &#123;</span><br><span class="line">            A = A != <span class="literal">nullptr</span> ? A-&gt;next : headB;</span><br><span class="line">            B = B != <span class="literal">nullptr</span> ? B-&gt;next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h1><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">题目链接</a><br>状态： 一遍过<br>思路：之前做过有印象，就是追问题，使用快慢指针。设表头到入口距离为x，相遇点距入口距离为a，环剩余距离为b。因为快慢指针速度为1：2，所以在慢指针进入入口后的第一圈内即可相遇，二者的走过的距离比也是1：2 =x+a:x+a+b+a，计算可得x=b，而环的长度为x+a。由此可知在相遇后从表头重新找个新指针，二者以相同的速度走，待下次相遇时所在的节点即为入口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">detectCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *q = head, *p=head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            p = p-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (q == p) &#123;</span><br><span class="line">                p = head;</span><br><span class="line">                <span class="keyword">while</span> (q != p) &#123;</span><br><span class="line">                    q = q-&gt;next;</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day3 || 链表</title>
      <link href="/2024/07/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9%20_%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/07/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9%20_%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h1 id="一、定义与方法"><a href="#一、定义与方法" class="headerlink" title="一、定义与方法"></a>一、定义与方法</h1><p>使用结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    LNode *next;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LNode *head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedList</span>() : <span class="built_in">head</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">        LNode *newNode = <span class="keyword">new</span> <span class="built_in">LNode</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            LNode* dummyHead = <span class="keyword">new</span> <span class="built_in">LNode</span>(<span class="number">0</span>);</span><br><span class="line">            head=dummyHead;</span><br><span class="line">            head-&gt;next= newNode;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            LNode *cur = head;</span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;next!= <span class="literal">nullptr</span>)</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            cur-&gt;next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LNode *cur = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            std::cout &lt;&lt; cur-&gt;val;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(cur==<span class="literal">nullptr</span>) std::cout&lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LNode *cur = head-&gt;next;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos&gt;<span class="built_in">len</span>()||pos&lt;<span class="number">1</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Insertion position is invalid.&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            LNode *newNode = <span class="keyword">new</span> <span class="built_in">LNode</span>(data);</span><br><span class="line">            LNode *cur = head,*pre;</span><br><span class="line">            <span class="keyword">while</span>(pos--)&#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            newNode-&gt;next=cur;</span><br><span class="line">            pre-&gt;next = newNode;</span><br><span class="line">            <span class="built_in">printList</span>();   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteL</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;<span class="number">1</span>||pos&gt;<span class="built_in">len</span>())</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Deletion position is invalid.&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            LNode *cur = head,*pre;</span><br><span class="line">            <span class="keyword">while</span>(pos--)&#123;</span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;</span><br><span class="line">            <span class="built_in">printList</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="二、相关题目"><a href="#二、相关题目" class="headerlink" title="二、相关题目"></a>二、相关题目</h1><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">题目链接</a></p><blockquote><p>注意：<br>1.使用虚拟头节点方便操作<br>2.注意移除节点后删除内存（包括虚拟头节点）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *dummyhead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead-&gt;next = head;</span><br><span class="line">        ListNode *cur = dummyhead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;</span><br><span class="line">                ListNode *tem = cur-&gt;next;</span><br><span class="line">                cur-&gt;next=tem-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tem;</span><br><span class="line">            &#125;<span class="keyword">else</span> cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        head=dummyhead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyhead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2><p><a href="https://leetcode.cn/problems/design-linked-list/description/">题目链接</a></p><p>类的初始化中，使用私有变量来记录长度和虚拟节点<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">    LinkedNode * _dummyhead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">        _dummyhead = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>删除节点后将tmp指向nullptr<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> tmp;</span><br><span class="line">      <span class="comment">//delete命令指示释放了tmp指针原本所指的那部分内存，</span></span><br><span class="line">      <span class="comment">//被delete后的指针tmp的值（地址）并非就是NULL，而是随机值。也就是被delete后，</span></span><br><span class="line">      <span class="comment">//如果不再加上一句tmp=nullptr,tmp会成为乱指的野指针</span></span><br><span class="line">      <span class="comment">//如果之后的程序不小心使用了tmp，会指向难以预想的内存空间</span></span><br><span class="line">      tmp=<span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><br>完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义链表节点结构体</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkedNode* next;</span><br><span class="line">        <span class="built_in">LinkedNode</span>(<span class="type">int</span> val):<span class="built_in">val</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">        _dummyhead = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;(_size<span class="number">-1</span>)||index&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        LinkedNode *cur=_dummyhead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--)</span><br><span class="line">        &#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode *newLNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        newLNode-&gt;next = _dummyhead-&gt;next;</span><br><span class="line">        _dummyhead-&gt;next = newLNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode *newLNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode *cur=_dummyhead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newLNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newLNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;_size||index&lt;<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">        LinkedNode *newLNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode *pre=_dummyhead;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newLNode-&gt;next = pre-&gt;next;</span><br><span class="line">        pre-&gt;next = newLNode;</span><br><span class="line">        _size++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">index</span>&lt;<span class="number">0</span>||index&gt;(_size<span class="number">-1</span>)) <span class="keyword">return</span>;</span><br><span class="line">        LinkedNode *pre=_dummyhead,*tem;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tem=pre-&gt;next;</span><br><span class="line">        pre-&gt;next=tem-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tem;</span><br><span class="line">        _size--;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">    LinkedNode * _dummyhead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">题目链接</a><br>第一版<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 原地逆置</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ListNode* dummyNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">            ListNode *cur = head, *nex;</span><br><span class="line">            <span class="keyword">while</span> (cur!= <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                nex = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = dummyNode-&gt;next;</span><br><span class="line">                dummyNode-&gt;next = cur;</span><br><span class="line">                <span class="keyword">if</span>(nex==<span class="literal">nullptr</span>)<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cur = nex;</span><br><span class="line">                    nex = nex-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = dummyNode-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> dummyNode;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>缺点: 虚拟头节点</p><p>改进方法1: 双链表法<br>时间复杂度 : $O(n)$<br>空间复杂度 : $O(1)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* temp; <span class="comment">// 保存cur的下一个节点</span></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">            temp = cur-&gt;next;  <span class="comment">// 保存一下 cur的下一个节点，因为接下来要改变cur-&gt;next</span></span><br><span class="line">            cur-&gt;next = pre; <span class="comment">// 翻转操作</span></span><br><span class="line">            <span class="comment">// 更新pre 和 cur指针</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其余方法：递归法<br>时间复杂度 : $O(n)$<br>空间复杂度 : $O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* pre,ListNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">NULL</span>) <span class="keyword">return</span> pre;</span><br><span class="line">        ListNode* temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="comment">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></span><br><span class="line">        <span class="comment">// pre = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(cur,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList1</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 和双指针法初始化是一样的逻辑</span></span><br><span class="line">        <span class="comment">// ListNode* cur = head;</span></span><br><span class="line">        <span class="comment">// ListNode* pre = NULL;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(<span class="literal">NULL</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法2</span></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseList2</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        ListNode *last = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        <span class="comment">// 翻转头节点与第二个节点的指向</span></span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        <span class="comment">// 此时的 head 节点为尾节点，next 需要指向 NULL</span></span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day2 || 数组2</title>
      <link href="/2024/07/04/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%8C%E5%A4%A9%20_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E3%80%81%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
      <url>/2024/07/04/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%8C%E5%A4%A9%20_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E3%80%81%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h1><p><a href="https://leetcode.cn/problems/remove-element/">题目链接</a><br>状态：一遍过<br>思路：直接遍历一遍，若不等则改变</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val)</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>小结：此方法为<strong>双指针法</strong>或<strong>快慢指针法</strong></p><h1 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h1><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">题目链接</a><br>状态：有思路但错了很多次<br>错误原因：下标范围错误，因为要考虑第一个元素的问题，判断错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i]!= nums[k<span class="number">-1</span>])</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i]!= nums[k])</span><br><span class="line">                nums[++k] = nums[i];</span><br><span class="line">        <span class="keyword">return</span> k<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h1><p><a href="https://leetcode.cn/problems/move-zeroes/description/">题目链接</a><br>状态：一遍过<br>思路：双指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>,sum=<span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>) sum++;</span><br><span class="line">            <span class="keyword">else</span> nums[j++]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n-sum;j&lt;n;j++)&#123;</span><br><span class="line">            nums[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>精简代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>(),i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;n;i++) <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>) nums[j++]=nums[i];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n) nums[j++]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a>844. 比较含退格的字符串</h1><p><a href="https://leetcode.cn/problems/backspace-string-compare/description/">题目链接</a><br>状态：有思路但未能实现<br>思路：还是使用双指针，从后往前分别遍历字符串。先处理退格符，使用count1来记录字符串s中‘#’个数，当s[m]==’#’, 若count1=0，则count++;m—; 当s[m]！=’#’,若count1&gt;0,则count—,m—,此外返回；对t也进行同样操作；操作完成后若m和n仍然大于0，则可以进行比较，相同为true，否则都为false。</p><p>错误代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>(), n = t.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> bac;</span><br><span class="line">        <span class="keyword">for</span> (; m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span>; m--, n--) &#123;</span><br><span class="line">            bac=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (m &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[m] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    bac++;m--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bac &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    bac--;m--;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bac=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[n] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    bac++;n--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bac &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    bac--;n--;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[m]!=t[n]||m&lt;<span class="number">0</span>||n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>修改意见<br>将s和t的bac分开计数，本来想着每次执行完会自动变为0，不影响后续操作，但其实也存在前者#过多导致后续t的初始不为0；<br>false判断出错，两种情况会返回false，<br>其一是两者可以比较且两者不同<br>其二是两者其中一方先比完</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>()<span class="number">-1</span>, n = t.<span class="built_in">length</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> back1=<span class="number">0</span>,back2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; m &gt;= <span class="number">0</span> || n &gt;= <span class="number">0</span>; m--, n--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (m &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[m] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    back1++;</span><br><span class="line">                    m--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (back1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    back1--;</span><br><span class="line">                    m--;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[n] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    back2++;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (back2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    back2--;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m&gt;=<span class="number">0</span>&amp;&amp;n&gt;=<span class="number">0</span>&amp;&amp;s[m]!=t[n]||(m &gt;= <span class="number">0</span>) != (n &gt;= <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">题目链接</a><br>状态：使用sort直接排序<br>思路：先平方，再排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> &amp;n:nums) n*=n;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用双指针，左右开弓，放到新数组中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] * nums[left] &lt;= nums[right] * nums[right])&#123;</span><br><span class="line">                res[j--] = nums[right]* nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res[j--] = nums[left]* nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h1><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">题目链接</a></p><ul><li>状态: 超时</li><li>思路：暴力解超时<br>错误代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i,j,n=nums.<span class="built_in">size</span>(),min=n<span class="number">+1</span>,sublen=<span class="number">0</span>,sum;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=i;j&lt;n;j++)&#123;</span><br><span class="line">                sum+=nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    sublen=j-i<span class="number">+1</span>;</span><br><span class="line">                    min=sublen&lt;min?sublen:min;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min==n<span class="number">+1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>正解：滑动窗口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), min = n + <span class="number">1</span>, sublen = <span class="number">0</span>, sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            sum += nums[right++];</span><br><span class="line">            <span class="keyword">while</span> (target &lt;= sum) &#123;</span><br><span class="line">                sublen = right - left;</span><br><span class="line">                min = min &lt; sublen ? min : sublen;</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min==n<span class="number">+1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a>904. 水果成篮</h1><p><a href="https://leetcode.cn/problems/fruit-into-baskets/description/">题目链接</a><br>状态：这存两个数据不会熟练使用map<br>思路：滑动窗口</p><ol><li>使用一个unordered_map（无序映射）来记录数组中每种水果出现的次数。</li><li>初始化三个变量：left和right作为两个指针，分别指向数组的开始和当前检查的位置；ans用来记录最大连续水果数量。</li><li>使用一个循环，right指针从0遍历到数组的末尾。</li><li>每次循环，增加当前fruits[right]水果的计数。</li><li>如果映射中的元素数量超过2，说明有三种或更多不同类型的水果，这时需要移动left指针，减少fruits[left]的计数，直到映射中的元素数量恢复到2或更少。</li><li>每次移动left指针后，如果fruits[left]的计数变为0，则从映射中删除这个水果的记录。</li><li>更新ans为当前窗口的最大长度，即right - left + 1。</li><li>循环结束后，返回ans作为结果。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = fruits.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right++) &#123;</span><br><span class="line">            cnt[fruits[right]]++;</span><br><span class="line">            <span class="keyword">while</span> (cnt.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                cnt[fruits[left]]--;</span><br><span class="line">                <span class="keyword">if</span> (cnt[fruits[left]] == <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt.<span class="built_in">erase</span>(fruits[left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a>76. 最小覆盖子串</h1><p><a href="https://leetcode.cn/problems/minimum-window-substring/">题目链接</a><br>难题不会<br>先存着以后水平高了再做</p><h1 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h1><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">题目链接</a></p><h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a>54. 螺旋矩阵</h1><p><a href="https://leetcode.cn/problems/spiral-matrix/description/">题目链接</a></p><h1 id="LCR-146-螺旋遍历二维数组"><a href="#LCR-146-螺旋遍历二维数组" class="headerlink" title="LCR 146. 螺旋遍历二维数组"></a>LCR 146. 螺旋遍历二维数组</h1><p><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/description/">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录day1 || 数组1</title>
      <link href="/2024/07/03/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9%20_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2024/07/03/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9%20_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h1><p><a href="https://leetcode.cn/problems/binary-search/">题目链接</a></p><p>状态：一遍过<br>思路：基本功</p><h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h1><p><a href="https://leetcode.cn/problems/search-insert-position/description/">题目链接</a><br>状态：有思路且三遍过<br>思路：注意是升序，分两种情况：</p><ol><li>数组中有该元素  =  二分查找</li><li>数组中没有该元素 = 查找失败后情况为： $left&gt;right$<br> left向右超过right，说明nums[right]&lt;target,right+1=left=n<br> right向左超过left，说明位置在开头nums[left ]&lt;target,right+1=left=n</li></ol><p>答案思路：考虑所有情况：</p><blockquote><p>// 分别处理如下四种情况<br>        // 目标值在数组所有元素之前  [0, -1]<br>        // 目标值等于数组中某一个元素  return middle;<br>        // 目标值插入数组中的位置 [left, right]，return  right + 1<br>        // 目标值在数组所有元素之后的情况 [left, right]， 因为是右闭区间，<br>        所以 return right + 1</p></blockquote><p><strong>暴力解法</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// 分别处理如下三种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素</span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt;= target) &#123; <span class="comment">// 一旦发现大于或者等于target的num[i]，那么i就是我们要的结果</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况</span></span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>(); <span class="comment">// 如果target是最大的，或者 nums为空，则返回nums的长度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意区间范围！！！</p><h1 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h1><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">题目链接</a><br>状态：有思路且三遍过<br>失败原因：输出格式错误和vector语法不熟练<br>思路：利用二分查找的结构，先找到一个满足条件的点，在以此为基点向前向后去找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=nums.<span class="built_in">size</span>()<span class="number">-1</span>,mid;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target) right=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target) left=mid<span class="number">+1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> start,end;</span><br><span class="line">                start=end=mid;</span><br><span class="line">                <span class="keyword">while</span>(start&gt;=<span class="number">0</span>&amp;&amp;nums[start]==target) start--;</span><br><span class="line">                <span class="keyword">while</span>(end&lt;nums.<span class="built_in">size</span>()&amp;&amp;nums[end]==target) end++;</span><br><span class="line">                res[<span class="number">0</span>]=start<span class="number">+1</span>;res[<span class="number">1</span>]=end<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>练习思路：<br>两次二分查找，找到左边界和右边界:<br><strong>右边界，小等更新左，右边界为左；<br>左边界，大等更新右，左边界为右。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="built_in">getLeftBorder</span>(nums, target);</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="built_in">getRightBorder</span>(nums, target);</span><br><span class="line">        <span class="comment">// 情况一</span></span><br><span class="line">        <span class="keyword">if</span> (leftBorder == <span class="number">-2</span> || rightBorder == <span class="number">-2</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="comment">// 情况三</span></span><br><span class="line">        <span class="keyword">if</span> (rightBorder - leftBorder &gt; <span class="number">1</span>) <span class="keyword">return</span> &#123;leftBorder + <span class="number">1</span>, rightBorder - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 情况二</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">     <span class="function"><span class="type">int</span> <span class="title">getRightBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="number">-2</span>; <span class="comment">// 记录一下rightBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 寻找右边界，nums[middle] == target的时候更新left</span></span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">                rightBorder = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightBorder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getLeftBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="number">-2</span>; <span class="comment">// 记录一下leftBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt;= target) &#123; <span class="comment">// 寻找左边界，nums[middle] == target的时候更新right</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">                leftBorder = right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a>69. x 的平方根</h1><p><a href="https://leetcode.cn/problems/sqrtx/description/">题目链接</a><br>状态： 两遍过<br>错误原因：使用 $mid*mid&gt;x$ 时运行超时，随即改为 $mid&gt;x/mid$ 成功<br>思路： 利用二分查找思想</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>||x==<span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">1</span>,right=x/<span class="number">2</span>,mid;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;x/mid) right=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;x/mid) left=mid<span class="number">+1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a>367. 有效的完全平方数</h1><p><a href="https://leetcode.cn/problems/valid-perfect-square/description/">题目链接</a><br>状态：两遍<br>错误原因：套用上一题模板，但是未能考虑到当num=5时，mid=2，mid=num/mid但返回为false</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=num;</span><br><span class="line">        <span class="type">long</span> mid;</span><br><span class="line">        <span class="comment">//简单粗暴直接算</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid*mid&gt;num) right=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid*mid&lt;num) left=mid<span class="number">+1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPerfectSquare1</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">1</span>,right=num/<span class="number">2</span>,mid;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;num/mid) right=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;num/mid) left=mid<span class="number">+1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//使用除法避免超时</span></span><br><span class="line">                <span class="keyword">if</span>(num%mid==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>画廊</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-85w3jk_1920x1080.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>好看的壁纸</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/a1.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">动漫</div>  <p>好看的动漫</p>  <a href='/Gallery/Anime'></a>  </figcaption>  </figure>  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/background.css"/>
      <url>/css/background.css</url>
      
        <content type="html"><![CDATA[#web_bg {    /* background-image: url(/image/bg.png); */    background-image: url(http://sh66bnaab.sabkt.gdipper.com//pic/bg.png);    background-size: cover;    /* background: -webkit-linear-gradient(      0deg,      rgba(247, 149, 51, 0.1) 0,      rgba(243, 112, 85, 0.1) 15%,      rgba(239, 78, 123, 0.1) 30%,      rgba(161, 102, 171, 0.1) 44%,      rgba(80, 115, 184, 0.1) 58%,      rgba(16, 152, 173, 0.1) 72%,      rgba(7, 179, 155, 0.1) 86%,      rgba(109, 186, 130, 0.1) 100%    );    background: -moz-linear-gradient(      0deg,      rgba(247, 149, 51, 0.1) 0,      rgba(243, 112, 85, 0.1) 15%,      rgba(239, 78, 123, 0.1) 30%,      rgba(161, 102, 171, 0.1) 44%,      rgba(80, 115, 184, 0.1) 58%,      rgba(16, 152, 173, 0.1) 72%,      rgba(7, 179, 155, 0.1) 86%,      rgba(109, 186, 130, 0.1) 100%    );    background: -o-linear-gradient(      0deg,      rgba(247, 149, 51, 0.1) 0,      rgba(243, 112, 85, 0.1) 15%,      rgba(239, 78, 123, 0.1) 30%,      rgba(161, 102, 171, 0.1) 44%,      rgba(80, 115, 184, 0.1) 58%,      rgba(16, 152, 173, 0.1) 72%,      rgba(7, 179, 155, 0.1) 86%,      rgba(109, 186, 130, 0.1) 100%    );    background: -ms-linear-gradient(      0deg,      rgba(247, 149, 51, 0.1) 0,      rgba(243, 112, 85, 0.1) 15%,      rgba(239, 78, 123, 0.1) 30%,      rgba(161, 102, 171, 0.1) 44%,      rgba(80, 115, 184, 0.1) 58%,      rgba(16, 152, 173, 0.1) 72%,      rgba(7, 179, 155, 0.1) 86%,      rgba(109, 186, 130, 0.1) 100%    );    background: linear-gradient(      90deg,      rgba(247, 149, 51, 0.1) 0,      rgba(243, 112, 85, 0.1) 15%,      rgba(239, 78, 123, 0.1) 30%,      rgba(161, 102, 171, 0.1) 44%,      rgba(80, 115, 184, 0.1) 58%,      rgba(16, 152, 173, 0.1) 72%,      rgba(7, 179, 155, 0.1) 86%,      rgba(109, 186, 130, 0.1) 100%    ); */  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgb(212, 241, 252);  --trans-dark: rgba(25, 25, 25, 0.6);  --border-style: 1px solid rgba(74, 213, 237, 0.775);  --backdrop-filter: none;  /* --backdrop-filter: blur(5px) saturate(150%); */}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}#web_bg {    background-image: url(https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/bg.png);}/* 页脚与头图透明 */#footer {    background: transparent !important;}/* #page-header {background: transparent !important;} *//* 白天模式遮罩透明 */#footer::before {background: transparent !important;}#page-header::before {background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {background: transparent !important;}[data-theme="dark"] #page-header::before {background: transparent !important;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {    background: #1e1e1e;    color: antiquewhite;  }  /* 鼠标悬浮状态 */  [data-theme="dark"] .magnet_link_context:hover {    background: #3ecdf1;    color: #f2f2f2;  }@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'Smiley';  /* 字体文件地址(相对或者绝对路径都可以) */  /* src: url(/font/SmileySans-Oblique.ttf.woff2); */  src: url(/font/HarmonyOS_Sans_SC_Bold.ttf);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'Mono';  /* 字体文件地址(相对或者绝对路径都可以) */  /* src: url(/font/SmileySans-Oblique.ttf.woff2); */  src: url(/font/JetBrainsMono-Bold.woff2);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 魔改菜单栏 *//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -75px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  /* background: rgb(239, 11, 33); */  background: #ff00a6;  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 4px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 7rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden}.pace-inactive .pace-progress {  opacity: 0;  transition: .3s ease-in}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  /* linear-gradient(to right, #3494e6, #ec6ead) */  background: linear-gradient(to right, #43cea2, #3866ca);  animation: gradient 2s ease infinite;  background-size: 200%}.pace.pace-inactive {  opacity: 0;  transition: .3s;  top: -8px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/hexo-butterfly-categories-card.css"/>
      <url>/css/hexo-butterfly-categories-card.css</url>
      
        <content type="html"><![CDATA[#categoryBar {    width: 100% !important;  }  ul.categoryBar-list {    margin: 5px 5px 0 5px !important;    padding: 0 !important;  }  li.categoryBar-list-item {    font-weight: bold;    display: inline-block;    height: 180px !important;    margin: 5px 0.5% 0 0.5% !important;    background-image: linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);    border-radius: 10px;    padding: 25px 0 25px 25px !important;    box-shadow: rgba(50,50,50,0.3) 50px 50px 50px 50px inset;    overflow: hidden;    background-size: 100% !important;    background-position: center !important;  }  li.categoryBar-list-item:hover {    background-size: 110% !important;    box-shadow: inset 500px 50px 50px 50px rgba(50,50,50,0.6);  }  li.categoryBar-list-item:hover span.categoryBar-list-descr {    transition: all 0.5s;    transform: translate(-100%, 0);  }  a.categoryBar-list-link {    color: #fff !important;    font-size: 20px !important;  }  a.categoryBar-list-link::before {    content: '|' !important;    color: #fff !important;    font-size: 20px !important;  }  a.categoryBar-list-link:after {    content: '';    position: relative;    width: 0;    bottom: 0;    display: block;    height: 3px;    border-radius: 3px;    background-color: #fff;  }  a.categoryBar-list-link:hover:after {    width: 90%;    left: 1%;    transition: all 0.5s;  }  span.categoryBar-list-count {    display: block !important;    color: #fff !important;    font-size: 20px !important;  }  span.categoryBar-list-count::before {    content: '\f02d' !important;    padding-right: 15px !important;    display: inline-block;    font-weight: 600;    font-style: normal;    font-variant: normal;    font-family: 'Font Awesome 6 Free';    text-rendering: auto;    -webkit-font-smoothing: antialiased;  }  span.categoryBar-list-descr {    padding: 5px;    display: block !important;    color: #fff !important;    font-size: 20px !important;    position: relative;    right: -100%;  }  @media screen and (max-width: 650px) {    li.categoryBar-list-item {      width: 48% !important;      height: 150px !important;      margin: 5px 1% 0 1% !important;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/swiperstyle.css"/>
      <url>/css/swiperstyle.css</url>
      
        <content type="html"><![CDATA[* {    -webkit-box-sizing:border-box;    -moz-box-sizing:border-box;    box-sizing:border-box}div#swiper_container {    background:rgba(255, 255, 255, 0)}.blog-slider {    width:100%;    position:relative;    border-radius:12px 8px 8px 12px;    margin:auto;    background:var(--global-bg);    padding:10px;    -webkit-transition:all .3s;    -moz-transition:all .3s;    -o-transition:all .3s;    -ms-transition:all .3s;    transition:all .3s}.blog-slider__item {    display:-webkit-box;    display:-moz-box;    display:-webkit-flex;    display:-ms-flexbox;    display:box;    display:flex;    -webkit-box-align:center;    -moz-box-align:center;    -o-box-align:center;    -ms-flex-align:center;    -webkit-align-items:center;    align-items:center}.blog-slider__item.swiper-slide-active .blog-slider__img img {    opacity:1;    -ms-filter:none;    filter:none;    -webkit-transition-delay:.3s;    -moz-transition-delay:.3s;    -o-transition-delay:.3s;    -ms-transition-delay:.3s;    transition-delay:.3s}.blog-slider__item.swiper-slide-active .blog-slider__content>* {    opacity:1;    -ms-filter:none;    filter:none;    -webkit-transform:none;    -moz-transform:none;    -o-transform:none;    -ms-transform:none;    transform:none}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(1) {    -webkit-transition-delay:.3s;    -moz-transition-delay:.3s;    -o-transition-delay:.3s;    -ms-transition-delay:.3s;    transition-delay:.3s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(2) {    -webkit-transition-delay:.4s;    -moz-transition-delay:.4s;    -o-transition-delay:.4s;    -ms-transition-delay:.4s;    transition-delay:.4s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(3) {    -webkit-transition-delay:.5s;    -moz-transition-delay:.5s;    -o-transition-delay:.5s;    -ms-transition-delay:.5s;    transition-delay:.5s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(4) {    -webkit-transition-delay:.6s;    -moz-transition-delay:.6s;    -o-transition-delay:.6s;    -ms-transition-delay:.6s;    transition-delay:.6s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(5) {    -webkit-transition-delay:.7s;    -moz-transition-delay:.7s;    -o-transition-delay:.7s;    -ms-transition-delay:.7s;    transition-delay:.7s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(6) {    -webkit-transition-delay:.8s;    -moz-transition-delay:.8s;    -o-transition-delay:.8s;    -ms-transition-delay:.8s;    transition-delay:.8s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(7) {    -webkit-transition-delay:.9s;    -moz-transition-delay:.9s;    -o-transition-delay:.9s;    -ms-transition-delay:.9s;    transition-delay:.9s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(8) {    -webkit-transition-delay:1s;    -moz-transition-delay:1s;    -o-transition-delay:1s;    -ms-transition-delay:1s;    transition-delay:1s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(9) {    -webkit-transition-delay:1.1s;    -moz-transition-delay:1.1s;    -o-transition-delay:1.1s;    -ms-transition-delay:1.1s;    transition-delay:1.1s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(10) {    -webkit-transition-delay:1.2s;    -moz-transition-delay:1.2s;    -o-transition-delay:1.2s;    -ms-transition-delay:1.2s;    transition-delay:1.2s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(11) {    -webkit-transition-delay:1.3s;    -moz-transition-delay:1.3s;    -o-transition-delay:1.3s;    -ms-transition-delay:1.3s;    transition-delay:1.3s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(12) {    -webkit-transition-delay:1.4s;    -moz-transition-delay:1.4s;    -o-transition-delay:1.4s;    -ms-transition-delay:1.4s;    transition-delay:1.4s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(13) {    -webkit-transition-delay:1.5s;    -moz-transition-delay:1.5s;    -o-transition-delay:1.5s;    -ms-transition-delay:1.5s;    transition-delay:1.5s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(14) {    -webkit-transition-delay:1.6s;    -moz-transition-delay:1.6s;    -o-transition-delay:1.6s;    -ms-transition-delay:1.6s;    transition-delay:1.6s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(15) {    -webkit-transition-delay:1.7s;    -moz-transition-delay:1.7s;    -o-transition-delay:1.7s;    -ms-transition-delay:1.7s;    transition-delay:1.7s}.blog-slider__img {    width:200px;    -webkit-flex-shrink:0;    flex-shrink:0;    height:200px;    padding:10px;    border-radius:5px;    -webkit-transform:translateX(0);    -moz-transform:translateX(0);    -o-transform:translateX(0);    -ms-transform:translateX(0);    transform:translateX(0);    overflow:hidden}.blog-slider__img:after {    content:'';    position:absolute;    top:0;    left:0;    width:100%;    height:100%;    border-radius:5px;    opacity:.8}.blog-slider__img img {    width:100%;    height:100%;    object-fit:cover;    display:block;    opacity:0;    border-radius:5px;    -webkit-transition:all .3s;    -moz-transition:all .3s;    -o-transition:all .3s;    -ms-transition:all .3s;    transition:all .3s}.blog-slider__content {    padding-right:50px;    padding-left:50px}.blog-slider__content>* {    opacity:0;    -webkit-transform:translateY(25px);    -moz-transform:translateY(25px);    -o-transform:translateY(25px);    -ms-transform:translateY(25px);    transform:translateY(25px);    -webkit-transition:all .4s;    -moz-transition:all .4s;    -o-transition:all .4s;    -ms-transition:all .4s;    transition:all .4s}.blog-slider__code {    color:var(--font-color);    margin-bottom:0;    display:block;    font-weight:500}.blog-slider__title {    font-size:18px;    font-weight:700;    color:var(--font-color);    margin-bottom:15px;    -webkit-line-clamp:1;    display:-webkit-box;    overflow:hidden;    -webkit-box-orient:vertical}.blog-slider__text {    color:var(--font-color);    -webkit-line-clamp:1;    display:-webkit-box;    overflow:hidden;    -webkit-box-orient:vertical;    margin-bottom:15px;    line-height:1.5em;    width:100%;    display:block;    word-break:break-all;    word-wrap:break-word}.blog-slider__button {    display:-webkit-inline-box;    display:-moz-inline-box;    display:-webkit-inline-flex;    display:-ms-inline-flexbox;    display:inline-box;    display:inline-flex;    background-color:var(--btn-bg);    padding:4px 14px;    border-radius:8px;    color:var(--btn-color);    text-decoration:none;    font-weight:500;    -webkit-box-pack:center;    -moz-box-pack:center;    -o-box-pack:center;    -ms-flex-pack:center;    -webkit-justify-content:center;    justify-content:center;    text-align:center;    letter-spacing:1px;    display:none}.blog-slider__button:hover {    background-color:var(--btn-hover-color);    color:var(--btn-color)}.blog-slider .swiper-container-horizontal>.swiper-pagination-bullets, .blog-slider .swiper-pagination-custom, .blog-slider .swiper-pagination-fraction {    bottom:10px;    left:0;    width:100%}.blog-slider__pagination {    position:absolute;    z-index:21;    right:20px;    width:11px!important;    text-align:center;    left:auto!important;    top:50%;    bottom:auto!important;    -webkit-transform:translateY(-50%);    -moz-transform:translateY(-50%);    -o-transform:translateY(-50%);    -ms-transform:translateY(-50%);    transform:translateY(-50%)}.blog-slider__pagination.swiper-pagination-bullets .swiper-pagination-bullet {    margin:8px 0}.blog-slider__pagination .swiper-pagination-bullet {    width:11px;    height:11px;    display:block;    border-radius:10px;    background:#858585;    opacity:.2;    -webkit-transition:all .3s;    -moz-transition:all .3s;    -o-transition:all .3s;    -ms-transition:all .3s;    transition:all .3s}.blog-slider__pagination .swiper-pagination-bullet-active {    opacity:1;    -ms-filter:none;    filter:none;    background:var(--btn-bg);    height:30px}@media screen and (max-width:600px) {    .blog-slider__pagination {        -webkit-transform:translateX(-50%);        -moz-transform:translateX(-50%);        -o-transform:translateX(-50%);        -ms-transform:translateX(-50%);        transform:translateX(-50%);        left:50%!important;        top:320px;        width:100%!important;        display:-webkit-box;        display:-moz-box;        display:-webkit-flex;        display:-ms-flexbox;        display:box;        display:flex;        -webkit-box-pack:center;        -moz-box-pack:center;        -o-box-pack:center;        -ms-flex-pack:center;        -webkit-justify-content:center;        justify-content:center;        -webkit-box-align:center;        -moz-box-align:center;        -o-box-align:center;        -ms-flex-align:center;        -webkit-align-items:center;        align-items:center    }    .blog-slider__pagination.swiper-pagination-bullets .swiper-pagination-bullet {        margin:0 5px    }    .blog-slider__pagination .swiper-pagination-bullet-active {        height:11px;        width:30px    }    .blog-slider__button {        display:-webkit-inline-box;        display:-moz-inline-box;        display:-webkit-inline-flex;        display:-ms-inline-flexbox;        display:inline-box;        display:inline-flex;        width:100%    }    .blog-slider__text {        margin-bottom:40px    }    .blog-slider {        min-height:350px;        height:auto;        margin-top:110px;        margin-bottom:10px    }    .blog-slider__content {        margin-top:-80px;        text-align:center;        padding:0 30px    }    .blog-slider__item {        -webkit-box-orient:vertical;        -moz-box-orient:vertical;        -o-box-orient:vertical;        -webkit-flex-direction:column;        -ms-flex-direction:column;        flex-direction:column    }    .blog-slider__img {        -webkit-transform:translateY(-50%);        -moz-transform:translateY(-50%);        -o-transform:translateY(-50%);        -ms-transform:translateY(-50%);        transform:translateY(-50%);        width:90%    }    .blog-slider__content {        padding-left:10px;        padding-right:10px    }    .blog-slider__pagination.swiper-pagination-clickable.swiper-pagination-bullets {        top:110px    }}@media screen and (min-width:600px) {    .blog-slider {        height:200px    }    .blog-slider__img {        height:200px    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(239, 11, 33)'/></svg>") 4 4, auto}`    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图片</title>
      <link href="/image/index.html"/>
      <url>/image/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><img src="https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/bg1.png" alt="图片"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/swiper_init.js"/>
      <url>/js/swiper_init.js</url>
      
        <content type="html"><![CDATA[var swiper = new Swiper('.blog-slider', {  passiveListeners: true,  spaceBetween: 30,  effect: 'fade',  loop: true,  autoplay: {    disableOnInteraction: true,    delay: 3000  },  mousewheel: true,  // autoHeight: true,  pagination: {    el: '.blog-slider__pagination',    clickable: true,  }});var comtainer = document.getElementById('swiper_container');  if (comtainer !== null) {    comtainer.onmouseenter = function() {      swiper.autoplay.stop();    };    comtainer.onmouseleave = function() {      swiper.autoplay.start();      }  } else {}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movie/index.html"/>
      <url>/movie/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>动漫</title>
      <link href="/Gallery/Anime/index.html"/>
      <url>/Gallery/Anime/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>壁紙</title>
      <link href="/Gallery/wallpaper/index.html"/>
      <url>/Gallery/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="true">      <div class="gallery-data">[{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/w1.png","alt":"w1.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/bg.png","alt":"w2.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/bg1.png","alt":"w3.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-2yl6px_1920x1080.png","alt":"w4.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-7p7xwo_1920x1080.png","alt":"w5.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-o5wlp9_1920x1080.png","alt":"w6.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-rrx1em_1920x1080.png","alt":"w7.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-x621xo_1920x1080.png","alt":"w8.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-o5wrj5_1920x1080.png","alt":"w9.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-m3m57k_1920x1080.png","alt":"w10.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/w3.png","alt":"w11.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-o5wlp9_1920x1080.png","alt":"w12.png"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-gpkx1d_1920x1080.png","alt":"w13"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-p9z9qm_1920x1080.png","alt":"w14"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-9dw781_1920x1080.png","alt":"w15"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-p9pry9_1920x1080.png","alt":"w16"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-kxgrg7_1920x1080.png","alt":"w17"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-85m7go_1920x1080.png","alt":"w18"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-gpkx1d_1920x1080.png","alt":"w19"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-d6yjpm_1920x1080.png","alt":"w20"},{"url":"https://jsd.onmicrosoft.cn/gh/JJxXxLL/pic@main/img/wallhaven-85w3jk_1920x1080.png","alt":"w21"}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/swiper.min.css"/>
      <url>/css/swiper.min.css</url>
      
        <content type="html"><![CDATA[/** * Swiper 4.1.6 * Most modern mobile touch slider and framework with hardware accelerated transitions * http://www.idangero.us/swiper/ * * Copyright 2014-2018 Vladimir Kharlampidi * * Released under the MIT License * * Released on: February 11, 2018 */.swiper-container{margin:0 auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-no-flexbox .swiper-slide{float:left}.swiper-container-vertical>.swiper-wrapper{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-transition-property:-webkit-transform;transition-property:-webkit-transform;-o-transition-property:transform;transition-property:transform;transition-property:transform,-webkit-transform;-webkit-box-sizing:content-box;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.swiper-container-multirow>.swiper-wrapper{-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.swiper-container-free-mode>.swiper-wrapper{-webkit-transition-timing-function:ease-out;-o-transition-timing-function:ease-out;transition-timing-function:ease-out;margin:0 auto}.swiper-slide{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;width:100%;height:100%;position:relative;-webkit-transition-property:-webkit-transform;transition-property:-webkit-transform;-o-transition-property:transform;transition-property:transform;transition-property:transform,-webkit-transform}.swiper-invisible-blank-slide{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{-webkit-box-align:start;-webkit-align-items:flex-start;-ms-flex-align:start;align-items:flex-start;-webkit-transition-property:height,-webkit-transform;transition-property:height,-webkit-transform;-o-transition-property:transform,height;transition-property:transform,height;transition-property:transform,height,-webkit-transform}.swiper-container-3d{-webkit-perspective:1200px;perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:-webkit-gradient(linear,right top,left top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:-webkit-gradient(linear,left bottom,left top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:-webkit-gradient(linear,left top,left bottom,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-wp8-horizontal,.swiper-container-wp8-horizontal>.swiper-wrapper{-ms-touch-action:pan-y;touch-action:pan-y}.swiper-container-wp8-vertical,.swiper-container-wp8-vertical>.swiper-wrapper{-ms-touch-action:pan-x;touch-action:pan-x}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:27px;height:44px;margin-top:-22px;z-index:10;cursor:pointer;background-size:27px 44px;background-position:center;background-repeat:no-repeat}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E");left:10px;right:auto}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E");right:10px;left:auto}.swiper-button-prev.swiper-button-white,.swiper-container-rtl .swiper-button-next.swiper-button-white{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E")}.swiper-button-next.swiper-button-white,.swiper-container-rtl .swiper-button-prev.swiper-button-white{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E")}.swiper-button-prev.swiper-button-black,.swiper-container-rtl .swiper-button-next.swiper-button-black{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E")}.swiper-button-next.swiper-button-black,.swiper-container-rtl .swiper-button-prev.swiper-button-black{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E")}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;-webkit-transition:.3s opacity;-o-transition:.3s opacity;transition:.3s opacity;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{-webkit-transform:scale(.33);-ms-transform:scale(.33);transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{-webkit-transform:scale(.66);-ms-transform:scale(.66);transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{-webkit-transform:scale(.33);-ms-transform:scale(.33);transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{-webkit-transform:scale(.66);-ms-transform:scale(.66);transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{-webkit-transform:scale(.33);-ms-transform:scale(.33);transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:100%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;-webkit-box-shadow:none;box-shadow:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:#007aff}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;-webkit-transform:translate3d(0,-50%,0);transform:translate3d(0,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;-webkit-transition:.2s top,.2s -webkit-transform;transition:.2s top,.2s -webkit-transform;-o-transition:.2s transform,.2s top;transition:.2s transform,.2s top;transition:.2s transform,.2s top,.2s -webkit-transform}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{-webkit-transition:.2s left,.2s -webkit-transform;transition:.2s left,.2s -webkit-transform;-o-transition:.2s transform,.2s left;transition:.2s transform,.2s left;transition:.2s transform,.2s left,.2s -webkit-transform}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{-webkit-transition:.2s right,.2s -webkit-transform;transition:.2s right,.2s -webkit-transform;-o-transition:.2s transform,.2s right;transition:.2s transform,.2s right;transition:.2s transform,.2s right,.2s -webkit-transform}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:#007aff;position:absolute;left:0;top:0;width:100%;height:100%;-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-transform-origin:left top;-ms-transform-origin:left top;transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{-webkit-transform-origin:right top;-ms-transform-origin:right top;transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar{width:100%;height:4px;left:0;top:0}.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white .swiper-pagination-bullet-active{background:#fff}.swiper-pagination-progressbar.swiper-pagination-white{background:rgba(255,255,255,.25)}.swiper-pagination-progressbar.swiper-pagination-white .swiper-pagination-progressbar-fill{background:#fff}.swiper-pagination-black .swiper-pagination-bullet-active{background:#000}.swiper-pagination-progressbar.swiper-pagination-black{background:rgba(0,0,0,.25)}.swiper-pagination-progressbar.swiper-pagination-black .swiper-pagination-progressbar-fill{background:#000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;-o-object-fit:contain;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;-webkit-transform-origin:50%;-ms-transform-origin:50%;transform-origin:50%;-webkit-animation:swiper-preloader-spin 1s steps(12,end) infinite;animation:swiper-preloader-spin 1s steps(12,end) infinite}.swiper-lazy-preloader:after{display:block;content:'';width:100%;height:100%;background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%236c6c6c'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");background-position:50%;background-size:100%;background-repeat:no-repeat}.swiper-lazy-preloader-white:after{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%23fff'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E")}@-webkit-keyframes swiper-preloader-spin{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes swiper-preloader-spin{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{-webkit-transition-timing-function:ease-out;-o-transition-timing-function:ease-out;transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;-webkit-transition-property:opacity;-o-transition-property:opacity;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{-webkit-transform-origin:100% 0;-ms-transform-origin:100% 0;transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0;width:100%;height:100%;background:#000;opacity:.6;-webkit-filter:blur(50px);filter:blur(50px);z-index:0}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-coverflow .swiper-wrapper{-ms-perspective:1200px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/swiper.min.js"/>
      <url>/js/swiper.min.js</url>
      
        <content type="html"><![CDATA[/** * Swiper 4.1.6 * Most modern mobile touch slider and framework with hardware accelerated transitions * http://www.idangero.us/swiper/ * * Copyright 2014-2018 Vladimir Kharlampidi * * Released under the MIT License * * Released on: February 11, 2018 */!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Swiper=t()}(this,function(){"use strict";var e="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,t="undefined"==typeof window?{document:e,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,i=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function s(s,a){var r=[],n=0;if(s&&!a&&s instanceof i)return s;if(s)if("string"==typeof s){var o,l,d=s.trim();if(d.indexOf("<")>=0&&d.indexOf(">")>=0){var h="div";for(0===d.indexOf("<li")&&(h="ul"),0===d.indexOf("<tr")&&(h="tbody"),0!==d.indexOf("<td")&&0!==d.indexOf("<th")||(h="tr"),0===d.indexOf("<tbody")&&(h="table"),0===d.indexOf("<option")&&(h="select"),(l=e.createElement(h)).innerHTML=d,n=0;n<l.childNodes.length;n+=1)r.push(l.childNodes[n])}else for(o=a||"#"!==s[0]||s.match(/[ .<>:~]/)?(a||e).querySelectorAll(s.trim()):[e.getElementById(s.trim().split("#")[1])],n=0;n<o.length;n+=1)o[n]&&r.push(o[n])}else if(s.nodeType||s===t||s===e)r.push(s);else if(s.length>0&&s[0].nodeType)for(n=0;n<s.length;n+=1)r.push(s[n]);return new i(r)}function a(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}s.fn=i.prototype,s.Class=i,s.Dom7=i;"resize scroll".split(" ");var r={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s].classList&&this[s].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s].classList&&this[s].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s].classList&&this[s].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var s=0;s<this.length;s+=1)if(2===i.length)this[s].setAttribute(e,t);else for(var a in e)this[s][a]=e[a],this[s].setAttribute(a,e[a]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var s=0;s<this.length;s+=1)(i=this[s]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0]){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];var a=i.getAttribute("data-"+e);return a||void 0}},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,a=e[0],r=e[1],n=e[2],o=e[3];function l(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.unshift(e),s(t).is(r))n.apply(t,i);else for(var a=s(t).parents(),o=0;o<a.length;o+=1)s(a[o]).is(r)&&n.apply(a[o],i)}}function d(e){var t=e&&e.target?e.target.dom7EventData||[]:[];t.unshift(e),n.apply(this,t)}"function"==typeof e[1]&&(a=(i=e)[0],n=i[1],o=i[2],r=void 0),o||(o=!1);for(var h,p=a.split(" "),c=0;c<this.length;c+=1){var u=this[c];if(r)for(h=0;h<p.length;h+=1)u.dom7LiveListeners||(u.dom7LiveListeners=[]),u.dom7LiveListeners.push({type:a,listener:n,proxyListener:l}),u.addEventListener(p[h],l,o);else for(h=0;h<p.length;h+=1)u.dom7Listeners||(u.dom7Listeners=[]),u.dom7Listeners.push({type:a,listener:n,proxyListener:d}),u.addEventListener(p[h],d,o)}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,s=e[0],a=e[1],r=e[2],n=e[3];"function"==typeof e[1]&&(s=(i=e)[0],r=i[1],n=i[2],a=void 0),n||(n=!1);for(var o=s.split(" "),l=0;l<o.length;l+=1)for(var d=0;d<this.length;d+=1){var h=this[d];if(a){if(h.dom7LiveListeners)for(var p=0;p<h.dom7LiveListeners.length;p+=1)r?h.dom7LiveListeners[p].listener===r&&h.removeEventListener(o[l],h.dom7LiveListeners[p].proxyListener,n):h.dom7LiveListeners[p].type===o[l]&&h.removeEventListener(o[l],h.dom7LiveListeners[p].proxyListener,n)}else if(h.dom7Listeners)for(var c=0;c<h.dom7Listeners.length;c+=1)r?h.dom7Listeners[c].listener===r&&h.removeEventListener(o[l],h.dom7Listeners[c].proxyListener,n):h.dom7Listeners[c].type===o[l]&&h.removeEventListener(o[l],h.dom7Listeners[c].proxyListener,n)}return this},trigger:function(){for(var i=[],s=arguments.length;s--;)i[s]=arguments[s];for(var a=i[0].split(" "),r=i[1],n=0;n<a.length;n+=1)for(var o=0;o<this.length;o+=1){var l=void 0;try{l=new t.CustomEvent(a[n],{detail:r,bubbles:!0,cancelable:!0})}catch(t){(l=e.createEvent("Event")).initEvent(a[n],!0,!0),l.detail=r}this[o].dom7EventData=i.filter(function(e,t){return t>0}),this[o].dispatchEvent(l),this[o].dom7EventData=[],delete this[o].dom7EventData}return this},transitionEnd:function(e){var t,i=["webkitTransitionEnd","transitionend"],s=this;function a(r){if(r.target===this)for(e.call(this,r),t=0;t<i.length;t+=1)s.off(i[t],a)}if(e)for(t=0;t<i.length;t+=1)s.on(i[t],a);return this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){var i=this[0],s=i.getBoundingClientRect(),a=e.body,r=i.clientTop||a.clientTop||0,n=i.clientLeft||a.clientLeft||0,o=i===t?t.scrollY:i.scrollTop,l=i===t?t.scrollX:i.scrollLeft;return{top:s.top+o-r,left:s.left+l-n}}return null},css:function(e,i){var s;if(1===arguments.length){if("string"!=typeof e){for(s=0;s<this.length;s+=1)for(var a in e)this[s].style[a]=e[a];return this}if(this[0])return t.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(s=0;s<this.length;s+=1)this[s].style[e]=i;return this}return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(a){var r,n,o=this[0];if(!o||void 0===a)return!1;if("string"==typeof a){if(o.matches)return o.matches(a);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(a);if(o.msMatchesSelector)return o.msMatchesSelector(a);for(r=s(a),n=0;n<r.length;n+=1)if(r[n]===o)return!0;return!1}if(a===e)return o===e;if(a===t)return o===t;if(a.nodeType||a instanceof i){for(r=a.nodeType?[a]:a,n=0;n<r.length;n+=1)if(r[n]===o)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,s=this.length;return new i(e>s-1?[]:e<0?(t=s+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var t,s=[],a=arguments.length;a--;)s[a]=arguments[a];for(var r=0;r<s.length;r+=1){t=s[r];for(var n=0;n<this.length;n+=1)if("string"==typeof t){var o=e.createElement("div");for(o.innerHTML=t;o.firstChild;)this[n].appendChild(o.firstChild)}else if(t instanceof i)for(var l=0;l<t.length;l+=1)this[n].appendChild(t[l]);else this[n].appendChild(t)}return this},prepend:function(t){var s,a;for(s=0;s<this.length;s+=1)if("string"==typeof t){var r=e.createElement("div");for(r.innerHTML=t,a=r.childNodes.length-1;a>=0;a-=1)this[s].insertBefore(r.childNodes[a],this[s].childNodes[0])}else if(t instanceof i)for(a=0;a<t.length;a+=1)this[s].insertBefore(t[a],this[s].childNodes[0]);else this[s].insertBefore(t,this[s].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&s(this[0].nextElementSibling).is(e)?new i([this[0].nextElementSibling]):new i([]):this[0].nextElementSibling?new i([this[0].nextElementSibling]):new i([]):new i([])},nextAll:function(e){var t=[],a=this[0];if(!a)return new i([]);for(;a.nextElementSibling;){var r=a.nextElementSibling;e?s(r).is(e)&&t.push(r):t.push(r),a=r}return new i(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&s(t.previousElementSibling).is(e)?new i([t.previousElementSibling]):new i([]):t.previousElementSibling?new i([t.previousElementSibling]):new i([])}return new i([])},prevAll:function(e){var t=[],a=this[0];if(!a)return new i([]);for(;a.previousElementSibling;){var r=a.previousElementSibling;e?s(r).is(e)&&t.push(r):t.push(r),a=r}return new i(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?s(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return s(a(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].parentNode;r;)e?s(r).is(e)&&t.push(r):t.push(r),r=r.parentNode;return s(a(t))},closest:function(e){var t=this;return void 0===e?new i([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],s=0;s<this.length;s+=1)for(var a=this[s].querySelectorAll(e),r=0;r<a.length;r+=1)t.push(a[r]);return new i(t)},children:function(e){for(var t=[],r=0;r<this.length;r+=1)for(var n=this[r].childNodes,o=0;o<n.length;o+=1)e?1===n[o].nodeType&&s(n[o]).is(e)&&t.push(n[o]):1===n[o].nodeType&&t.push(n[o]);return new i(a(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,a;for(i=0;i<e.length;i+=1){var r=s(e[i]);for(a=0;a<r.length;a+=1)this[this.length]=r[a],this.length+=1}return this},styles:function(){return this[0]?t.getComputedStyle(this[0],null):{}}};Object.keys(r).forEach(function(e){s.fn[e]=r[e]});var n,o,l,d={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,i){var s,a,r;void 0===i&&(i="x");var n=t.getComputedStyle(e,null);return t.WebKitCSSMatrix?((a=n.transform||n.webkitTransform).split(",").length>6&&(a=a.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new t.WebKitCSSMatrix("none"===a?"":a)):s=(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===i&&(a=t.WebKitCSSMatrix?r.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===i&&(a=t.WebKitCSSMatrix?r.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),a||0},parseUrlQuery:function(e){var i,s,a,r,n={},o=e||t.location.href;if("string"==typeof o&&o.length)for(r=(s=(o=o.indexOf("?")>-1?o.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,i=0;i<r;i+=1)a=s[i].replace(/#\S+/g,"").split("="),n[decodeURIComponent(a[0])]=void 0===a[1]?void 0:decodeURIComponent(a[1])||"";return n},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),s=1;s<e.length;s+=1){var a=e[s];if(void 0!==a&&null!==a)for(var r=Object.keys(Object(a)),n=0,o=r.length;n<o;n+=1){var l=r[n],h=Object.getOwnPropertyDescriptor(a,l);void 0!==h&&h.enumerable&&(d.isObject(i[l])&&d.isObject(a[l])?d.extend(i[l],a[l]):!d.isObject(i[l])&&d.isObject(a[l])?(i[l]={},d.extend(i[l],a[l])):i[l]=a[l])}}return i}},h=(l=e.createElement("div"),{touch:t.Modernizr&&!0===t.Modernizr.touch||!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch),pointerEvents:!(!t.navigator.pointerEnabled&&!t.PointerEvent),prefixedPointerEvents:!!t.navigator.msPointerEnabled,transition:(o=l.style,"transition"in o||"webkitTransition"in o||"MozTransition"in o),transforms3d:t.Modernizr&&!0===t.Modernizr.csstransforms3d||(n=l.style,"webkitPerspective"in n||"MozPerspective"in n||"OPerspective"in n||"MsPerspective"in n||"perspective"in n),flexbox:function(){for(var e=l.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i+=1)if(t[i]in e)return!0;return!1}(),observer:"MutationObserver"in t||"WebkitMutationObserver"in t,passiveListener:function(){var e=!1;try{var i=Object.defineProperty({},"passive",{get:function(){e=!0}});t.addEventListener("testPassiveListener",null,i)}catch(e){}return e}(),gestures:"ongesturestart"in t}),p=function(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})},c={components:{configurable:!0}};p.prototype.on=function(e,t){var i=this;return"function"!=typeof t?i:(e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e].push(t)}),i)},p.prototype.once=function(e,t){var i=this;if("function"!=typeof t)return i;return i.on(e,function s(){for(var a=[],r=arguments.length;r--;)a[r]=arguments[r];t.apply(i,a),i.off(e,s)})},p.prototype.off=function(e,t){var i=this;return e.split(" ").forEach(function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e].forEach(function(s,a){s===t&&i.eventsListeners[e].splice(a,1)})}),i},p.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,s,a,r=this;return r.eventsListeners?("string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],s=e.slice(1,e.length),a=r):(i=e[0].events,s=e[0].data,a=e[0].context||r),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){if(r.eventsListeners[e]){var t=[];r.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(a,s)})}}),r):r},p.prototype.useModulesParams=function(e){var t=this;t.modules&&Object.keys(t.modules).forEach(function(i){var s=t.modules[i];s.params&&d.extend(e,s.params)})},p.prototype.useModules=function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach(function(i){var s=t.modules[i],a=e[i]||{};s.instance&&Object.keys(s.instance).forEach(function(e){var i=s.instance[e];t[e]="function"==typeof i?i.bind(t):i}),s.on&&t.on&&Object.keys(s.on).forEach(function(e){t.on(e,s.on[e])}),s.create&&s.create.bind(t)(a)})},c.components.set=function(e){this.use&&this.use(e)},p.installModule=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var s=this;s.prototype.modules||(s.prototype.modules={});var a=e.name||Object.keys(s.prototype.modules).length+"_"+d.now();return s.prototype.modules[a]=e,e.proto&&Object.keys(e.proto).forEach(function(t){s.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(function(t){s[t]=e.static[t]}),e.install&&e.install.apply(s,t),s},p.use=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var s=this;return Array.isArray(e)?(e.forEach(function(e){return s.installModule(e)}),s):s.installModule.apply(s,[e].concat(t))},Object.defineProperties(p,c);var u={updateSize:function(){var e,t,i=this.$el;e=void 0!==this.params.width?this.params.width:i[0].clientWidth,t=void 0!==this.params.height?this.params.height:i[0].clientHeight,0===e&&this.isHorizontal()||0===t&&this.isVertical()||(e=e-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),t=t-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),d.extend(this,{width:e,height:t,size:this.isHorizontal()?e:t}))},updateSlides:function(){var e=this.params,t=this.$wrapperEl,i=this.size,s=this.rtl,a=this.wrongRTL,r=t.children("."+this.params.slideClass),n=this.virtual&&e.virtual.enabled?this.virtual.slides.length:r.length,o=[],l=[],p=[],c=e.slidesOffsetBefore;"function"==typeof c&&(c=e.slidesOffsetBefore.call(this));var u=e.slidesOffsetAfter;"function"==typeof u&&(u=e.slidesOffsetAfter.call(this));var v=n,f=this.snapGrid.length,m=this.snapGrid.length,g=e.spaceBetween,b=-c,w=0,y=0;if(void 0!==i){var x,E;"string"==typeof g&&g.indexOf("%")>=0&&(g=parseFloat(g.replace("%",""))/100*i),this.virtualSize=-g,s?r.css({marginLeft:"",marginTop:""}):r.css({marginRight:"",marginBottom:""}),e.slidesPerColumn>1&&(x=Math.floor(n/e.slidesPerColumn)===n/this.params.slidesPerColumn?n:Math.ceil(n/e.slidesPerColumn)*e.slidesPerColumn,"auto"!==e.slidesPerView&&"row"===e.slidesPerColumnFill&&(x=Math.max(x,e.slidesPerView*e.slidesPerColumn)));for(var T,S=e.slidesPerColumn,C=x/S,M=C-(e.slidesPerColumn*C-n),z=0;z<n;z+=1){E=0;var P=r.eq(z);if(e.slidesPerColumn>1){var k=void 0,$=void 0,L=void 0;"column"===e.slidesPerColumnFill?(L=z-($=Math.floor(z/S))*S,($>M||$===M&&L===S-1)&&(L+=1)>=S&&(L=0,$+=1),k=$+L*x/S,P.css({"-webkit-box-ordinal-group":k,"-moz-box-ordinal-group":k,"-ms-flex-order":k,"-webkit-order":k,order:k})):$=z-(L=Math.floor(z/C))*C,P.css("margin-"+(this.isHorizontal()?"top":"left"),0!==L&&e.spaceBetween&&e.spaceBetween+"px").attr("data-swiper-column",$).attr("data-swiper-row",L)}"none"!==P.css("display")&&("auto"===e.slidesPerView?(E=this.isHorizontal()?P.outerWidth(!0):P.outerHeight(!0),e.roundLengths&&(E=Math.floor(E))):(E=(i-(e.slidesPerView-1)*g)/e.slidesPerView,e.roundLengths&&(E=Math.floor(E)),r[z]&&(this.isHorizontal()?r[z].style.width=E+"px":r[z].style.height=E+"px")),r[z]&&(r[z].swiperSlideSize=E),p.push(E),e.centeredSlides?(b=b+E/2+w/2+g,0===w&&0!==z&&(b=b-i/2-g),0===z&&(b=b-i/2-g),Math.abs(b)<.001&&(b=0),y%e.slidesPerGroup==0&&o.push(b),l.push(b)):(y%e.slidesPerGroup==0&&o.push(b),l.push(b),b=b+E+g),this.virtualSize+=E+g,w=E,y+=1)}if(this.virtualSize=Math.max(this.virtualSize,i)+u,s&&a&&("slide"===e.effect||"coverflow"===e.effect)&&t.css({width:this.virtualSize+e.spaceBetween+"px"}),h.flexbox&&!e.setWrapperSize||(this.isHorizontal()?t.css({width:this.virtualSize+e.spaceBetween+"px"}):t.css({height:this.virtualSize+e.spaceBetween+"px"})),e.slidesPerColumn>1&&(this.virtualSize=(E+e.spaceBetween)*x,this.virtualSize=Math.ceil(this.virtualSize/e.slidesPerColumn)-e.spaceBetween,this.isHorizontal()?t.css({width:this.virtualSize+e.spaceBetween+"px"}):t.css({height:this.virtualSize+e.spaceBetween+"px"}),e.centeredSlides)){T=[];for(var I=0;I<o.length;I+=1)o[I]<this.virtualSize+o[0]&&T.push(o[I]);o=T}if(!e.centeredSlides){T=[];for(var D=0;D<o.length;D+=1)o[D]<=this.virtualSize-i&&T.push(o[D]);o=T,Math.floor(this.virtualSize-i)-Math.floor(o[o.length-1])>1&&o.push(this.virtualSize-i)}0===o.length&&(o=[0]),0!==e.spaceBetween&&(this.isHorizontal()?s?r.css({marginLeft:g+"px"}):r.css({marginRight:g+"px"}):r.css({marginBottom:g+"px"})),d.extend(this,{slides:r,snapGrid:o,slidesGrid:l,slidesSizesGrid:p}),n!==v&&this.emit("slidesLengthChange"),o.length!==f&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),l.length!==m&&this.emit("slidesGridLengthChange"),(e.watchSlidesProgress||e.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(){var e,t=[],i=0;if("auto"!==this.params.slidesPerView&&this.params.slidesPerView>1)for(e=0;e<Math.ceil(this.params.slidesPerView);e+=1){var s=this.activeIndex+e;if(s>this.slides.length)break;t.push(this.slides.eq(s)[0])}else t.push(this.slides.eq(this.activeIndex)[0]);for(e=0;e<t.length;e+=1)if(void 0!==t[e]){var a=t[e].offsetHeight;i=a>i?a:i}i&&this.$wrapperEl.css("height",i+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this.translate||0);var t=this.params,i=this.slides,s=this.rtl;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var a=-e;s&&(a=e),i.removeClass(t.slideVisibleClass);for(var r=0;r<i.length;r+=1){var n=i[r],o=(a+(t.centeredSlides?this.minTranslate():0)-n.swiperSlideOffset)/(n.swiperSlideSize+t.spaceBetween);if(t.watchSlidesVisibility){var l=-(a-n.swiperSlideOffset),d=l+this.slidesSizesGrid[r];(l>=0&&l<this.size||d>0&&d<=this.size||l<=0&&d>=this.size)&&i.eq(r).addClass(t.slideVisibleClass)}n.progress=s?-o:o}}},updateProgress:function(e){void 0===e&&(e=this.translate||0);var t=this.params,i=this.maxTranslate()-this.minTranslate(),s=this.progress,a=this.isBeginning,r=this.isEnd,n=a,o=r;0===i?(s=0,a=!0,r=!0):(a=(s=(e-this.minTranslate())/i)<=0,r=s>=1),d.extend(this,{progress:s,isBeginning:a,isEnd:r}),(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesProgress(e),a&&!n&&this.emit("reachBeginning toEdge"),r&&!o&&this.emit("reachEnd toEdge"),(n&&!a||o&&!r)&&this.emit("fromEdge"),this.emit("progress",s)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,s=this.$wrapperEl,a=this.activeIndex,r=this.realIndex,n=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=n?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+a+'"]'):t.eq(a)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i=this.rtl?this.translate:-this.translate,s=this.slidesGrid,a=this.snapGrid,r=this.params,n=this.activeIndex,o=this.realIndex,l=this.snapIndex,h=e;if(void 0===h){for(var p=0;p<s.length;p+=1)void 0!==s[p+1]?i>=s[p]&&i<s[p+1]-(s[p+1]-s[p])/2?h=p:i>=s[p]&&i<s[p+1]&&(h=p+1):i>=s[p]&&(h=p);r.normalizeSlideIndex&&(h<0||void 0===h)&&(h=0)}if((t=a.indexOf(i)>=0?a.indexOf(i):Math.floor(h/r.slidesPerGroup))>=a.length&&(t=a.length-1),h!==n){var c=parseInt(this.slides.eq(h).attr("data-swiper-slide-index")||h,10);d.extend(this,{snapIndex:t,realIndex:c,previousIndex:n,activeIndex:h}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),o!==c&&this.emit("realIndexChange"),this.emit("slideChange")}else t!==l&&(this.snapIndex=t,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=s(e.target).closest("."+t.slideClass)[0],a=!1;if(i)for(var r=0;r<this.slides.length;r+=1)this.slides[r]===i&&(a=!0);if(!i||!a)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(s(i).attr("data-swiper-slide-index"),10):this.clickedIndex=s(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},v={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtl,s=this.translate,a=this.$wrapperEl;if(t.virtualTranslate)return i?-s:s;var r=d.getTranslate(a[0],e);return i&&(r=-r),r||0},setTranslate:function(e,t){var i=this.rtl,s=this.params,a=this.$wrapperEl,r=this.progress,n=0,o=0;this.isHorizontal()?n=i?-e:e:o=e,s.roundLengths&&(n=Math.floor(n),o=Math.floor(o)),s.virtualTranslate||(h.transforms3d?a.transform("translate3d("+n+"px, "+o+"px, 0px)"):a.transform("translate("+n+"px, "+o+"px)")),this.translate=this.isHorizontal()?n:o;var l=this.maxTranslate()-this.minTranslate();(0===l?0:(e-this.minTranslate())/l)!==r&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}},f={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.params,a=this.previousIndex;s.autoHeight&&this.updateAutoHeight();var r=t;if(r||(r=i>a?"next":i<a?"prev":"reset"),this.emit("transitionStart"),e&&i!==a){if("reset"===r)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===r?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.previousIndex;this.animating=!1,this.setTransition(0);var a=t;if(a||(a=i>s?"next":i<s?"prev":"reset"),this.emit("transitionEnd"),e&&i!==s){if("reset"===a)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===a?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}},m={slideTo:function(e,t,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=this,r=e;r<0&&(r=0);var n=a.params,o=a.snapGrid,l=a.slidesGrid,d=a.previousIndex,p=a.activeIndex,c=a.rtl,u=a.$wrapperEl;if(a.animating&&n.preventIntercationOnTransition)return!1;var v=Math.floor(r/n.slidesPerGroup);v>=o.length&&(v=o.length-1),(p||n.initialSlide||0)===(d||0)&&i&&a.emit("beforeSlideChangeStart");var f,m=-o[v];if(a.updateProgress(m),n.normalizeSlideIndex)for(var g=0;g<l.length;g+=1)-Math.floor(100*m)>=Math.floor(100*l[g])&&(r=g);if(a.initialized&&r!==p){if(!a.allowSlideNext&&m<a.translate&&m<a.minTranslate())return!1;if(!a.allowSlidePrev&&m>a.translate&&m>a.maxTranslate()&&(p||0)!==r)return!1}return f=r>p?"next":r<p?"prev":"reset",c&&-m===a.translate||!c&&m===a.translate?(a.updateActiveIndex(r),n.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==n.effect&&a.setTranslate(m),"reset"!==f&&(a.transitionStart(i,f),a.transitionEnd(i,f)),!1):(0!==t&&h.transition?(a.setTransition(t),a.setTranslate(m),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,f),a.animating||(a.animating=!0,u.transitionEnd(function(){a&&!a.destroyed&&a.transitionEnd(i,f)}))):(a.setTransition(0),a.setTranslate(m),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,f),a.transitionEnd(i,f)),!0)},slideToLoop:function(e,t,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=e;return this.params.loop&&(a+=this.loopedSlides),this.slideTo(a,t,i,s)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,a=this.animating;return s.loop?!a&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,this.slideTo(this.activeIndex+s.slidesPerGroup,e,t,i)):this.slideTo(this.activeIndex+s.slidesPerGroup,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,a=this.animating;return s.loop?!a&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,this.slideTo(this.activeIndex-1,e,t,i)):this.slideTo(this.activeIndex-1,e,t,i)},slideReset:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);return this.slideTo(this.activeIndex,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,a=t.$wrapperEl,r="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,n=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(s(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?n<t.loopedSlides-r/2||n>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),n=a.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),d.nextTick(function(){t.slideTo(n)})):t.slideTo(n):n>t.slides.length-r?(t.loopFix(),n=a.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),d.nextTick(function(){t.slideTo(n)})):t.slideTo(n)}else t.slideTo(n)}},g={loopCreate:function(){var t=this,i=t.params,a=t.$wrapperEl;a.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var r=a.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var n=i.slidesPerGroup-r.length%i.slidesPerGroup;if(n!==i.slidesPerGroup){for(var o=0;o<n;o+=1){var l=s(e.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);a.append(l)}r=a.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=r.length),t.loopedSlides=parseInt(i.loopedSlides||i.slidesPerView,10),t.loopedSlides+=i.loopAdditionalSlides,t.loopedSlides>r.length&&(t.loopedSlides=r.length);var d=[],h=[];r.each(function(e,i){var a=s(i);e<t.loopedSlides&&h.push(i),e<r.length&&e>=r.length-t.loopedSlides&&d.push(i),a.attr("data-swiper-slide-index",e)});for(var p=0;p<h.length;p+=1)a.append(s(h[p].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var c=d.length-1;c>=0;c-=1)a.prepend(s(d[c].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){var e,t=this.params,i=this.activeIndex,s=this.slides,a=this.loopedSlides,r=this.allowSlidePrev,n=this.allowSlideNext,o=this.snapGrid,l=this.rtl;this.allowSlidePrev=!0,this.allowSlideNext=!0;var d=-o[i]-this.getTranslate();i<a?(e=s.length-3*a+i,e+=a,this.slideTo(e,0,!1,!0)&&0!==d&&this.setTranslate((l?-this.translate:this.translate)-d)):("auto"===t.slidesPerView&&i>=2*a||i>s.length-2*t.slidesPerView)&&(e=-s.length+i+a,e+=a,this.slideTo(e,0,!1,!0)&&0!==d&&this.setTranslate((l?-this.translate:this.translate)-d));this.allowSlidePrev=r,this.allowSlideNext=n},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass).remove(),i.removeAttr("data-swiper-slide-index")}},b={setGrabCursor:function(e){if(!h.touch&&this.params.simulateTouch){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){h.touch||(this.el.style.cursor="")}},w={appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&t.append(e[s]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&h.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&this.loopDestroy();var a=s+1;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&i.prepend(e[r]);a=s+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&h.observer||this.update(),this.slideTo(a,0,!1)},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&(this.loopDestroy(),this.slides=i.children("."+t.slideClass));var a,r=s;if("object"==typeof e&&"length"in e){for(var n=0;n<e.length;n+=1)a=e[n],this.slides[a]&&this.slides.eq(a).remove(),a<r&&(r-=1);r=Math.max(r,0)}else a=e,this.slides[a]&&this.slides.eq(a).remove(),a<r&&(r-=1),r=Math.max(r,0);t.loop&&this.loopCreate(),t.observer&&h.observer||this.update(),t.loop?this.slideTo(r+this.loopedSlides,0,!1):this.slideTo(r,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},y=function(){var i=t.navigator.userAgent,s={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:t.cordova||t.phonegap,phonegap:t.cordova||t.phonegap},a=i.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),r=i.match(/(Android);?[\s\/]+([\d.]+)?/),n=i.match(/(iPad).*OS\s([\d_]+)/),o=i.match(/(iPod)(.*OS\s([\d_]+))?/),l=!n&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(a&&(s.os="windows",s.osVersion=a[2],s.windows=!0),r&&!a&&(s.os="android",s.osVersion=r[2],s.android=!0,s.androidChrome=i.toLowerCase().indexOf("chrome")>=0),(n||l||o)&&(s.os="ios",s.ios=!0),l&&!o&&(s.osVersion=l[2].replace(/_/g,"."),s.iphone=!0),n&&(s.osVersion=n[2].replace(/_/g,"."),s.ipad=!0),o&&(s.osVersion=o[3]?o[3].replace(/_/g,"."):null,s.iphone=!0),s.ios&&s.osVersion&&i.indexOf("Version/")>=0&&"10"===s.osVersion.split(".")[0]&&(s.osVersion=i.toLowerCase().split("version/")[1].split(" ")[0]),s.desktop=!(s.os||s.android||s.webView),s.webView=(l||n||o)&&i.match(/.*AppleWebKit(?!.*Safari)/i),s.os&&"ios"===s.os){var d=s.osVersion.split("."),h=e.querySelector('meta[name="viewport"]');s.minimalUi=!s.webView&&(o||l)&&(1*d[0]==7?1*d[1]>=1:1*d[0]>7)&&h&&h.getAttribute("content").indexOf("minimal-ui")>=0}return s.pixelRatio=t.devicePixelRatio||1,s}(),x=function(i){var a=this.touchEventsData,r=this.params,n=this.touches;if(!this.animating||!r.preventIntercationOnTransition){var o=i;if(o.originalEvent&&(o=o.originalEvent),a.isTouchEvent="touchstart"===o.type,(a.isTouchEvent||!("which"in o)||3!==o.which)&&(!a.isTouched||!a.isMoved))if(r.noSwiping&&s(o.target).closest(r.noSwipingSelector?r.noSwipingSelector:"."+r.noSwipingClass)[0])this.allowClick=!0;else if(!r.swipeHandler||s(o).closest(r.swipeHandler)[0]){n.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,n.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;var l=n.currentX,h=n.currentY;if(!(y.ios&&!y.cordova&&r.iOSEdgeSwipeDetection&&l<=r.iOSEdgeSwipeThreshold&&l>=t.screen.width-r.iOSEdgeSwipeThreshold)){if(d.extend(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=l,n.startY=h,a.touchStartTime=d.now(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,r.threshold>0&&(a.allowThresholdMove=!1),"touchstart"!==o.type){var p=!0;s(o.target).is(a.formElements)&&(p=!1),e.activeElement&&s(e.activeElement).is(a.formElements)&&e.activeElement!==o.target&&e.activeElement.blur(),p&&this.allowTouchMove&&o.preventDefault()}this.emit("touchStart",o)}}}},E=function(t){var i=this.touchEventsData,a=this.params,r=this.touches,n=this.rtl,o=t;if(o.originalEvent&&(o=o.originalEvent),i.isTouched){if(!i.isTouchEvent||"mousemove"!==o.type){var l="touchmove"===o.type?o.targetTouches[0].pageX:o.pageX,h="touchmove"===o.type?o.targetTouches[0].pageY:o.pageY;if(o.preventedByNestedSwiper)return r.startX=l,void(r.startY=h);if(!this.allowTouchMove)return this.allowClick=!1,void(i.isTouched&&(d.extend(r,{startX:l,startY:h,currentX:l,currentY:h}),i.touchStartTime=d.now()));if(i.isTouchEvent&&a.touchReleaseOnEdges&&!a.loop)if(this.isVertical()){if(h<r.startY&&this.translate<=this.maxTranslate()||h>r.startY&&this.translate>=this.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(l<r.startX&&this.translate<=this.maxTranslate()||l>r.startX&&this.translate>=this.minTranslate())return;if(i.isTouchEvent&&e.activeElement&&o.target===e.activeElement&&s(o.target).is(i.formElements))return i.isMoved=!0,void(this.allowClick=!1);if(i.allowTouchCallbacks&&this.emit("touchMove",o),!(o.targetTouches&&o.targetTouches.length>1)){r.currentX=l,r.currentY=h;var p,c=r.currentX-r.startX,u=r.currentY-r.startY;if(void 0===i.isScrolling)this.isHorizontal()&&r.currentY===r.startY||this.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:c*c+u*u>=25&&(p=180*Math.atan2(Math.abs(u),Math.abs(c))/Math.PI,i.isScrolling=this.isHorizontal()?p>a.touchAngle:90-p>a.touchAngle);if(i.isScrolling&&this.emit("touchMoveOpposite",o),"undefined"==typeof startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){this.allowClick=!1,o.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&o.stopPropagation(),i.isMoved||(a.loop&&this.loopFix(),i.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!a.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",o)),this.emit("sliderMove",o),i.isMoved=!0;var v=this.isHorizontal()?c:u;r.diff=v,v*=a.touchRatio,n&&(v=-v),this.swipeDirection=v>0?"prev":"next",i.currentTranslate=v+i.startTranslate;var f=!0,m=a.resistanceRatio;if(a.touchReleaseOnEdges&&(m=0),v>0&&i.currentTranslate>this.minTranslate()?(f=!1,a.resistance&&(i.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+i.startTranslate+v,m))):v<0&&i.currentTranslate<this.maxTranslate()&&(f=!1,a.resistance&&(i.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-i.startTranslate-v,m))),f&&(o.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),a.threshold>0){if(!(Math.abs(v)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=this.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}a.followFinger&&((a.freeMode||a.watchSlidesProgress||a.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),a.freeMode&&(0===i.velocities.length&&i.velocities.push({position:r[this.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:r[this.isHorizontal()?"currentX":"currentY"],time:d.now()})),this.updateProgress(i.currentTranslate),this.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&this.emit("touchMoveOpposite",o)},T=function(e){var t=this,i=t.touchEventsData,s=t.params,a=t.touches,r=t.rtl,n=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,h=e;if(h.originalEvent&&(h=h.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",h),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var p,c=d.now(),u=c-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(h),t.emit("tap",h),u<300&&c-i.lastClickTime>300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=d.nextTick(function(){t&&!t.destroyed&&t.emit("click",h)},300)),u<300&&c-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),t.emit("doubleTap",h))),i.lastClickTime=d.now(),d.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,p=s.followFinger?r?t.translate:-t.translate:-i.currentTranslate,s.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(i.velocities.length>1){var v=i.velocities.pop(),f=i.velocities.pop(),m=v.position-f.position,g=v.time-f.time;t.velocity=m/g,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(g>150||d.now()-v.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;var b=1e3*s.freeModeMomentumRatio,w=t.velocity*b,y=t.translate+w;r&&(y=-y);var x,E=!1,T=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;if(y<t.maxTranslate())s.freeModeMomentumBounce?(y+t.maxTranslate()<-T&&(y=t.maxTranslate()-T),x=t.maxTranslate(),E=!0,i.allowMomentumBounce=!0):y=t.maxTranslate();else if(y>t.minTranslate())s.freeModeMomentumBounce?(y-t.minTranslate()>T&&(y=t.minTranslate()+T),x=t.minTranslate(),E=!0,i.allowMomentumBounce=!0):y=t.minTranslate();else if(s.freeModeSticky){for(var S,C=0;C<l.length;C+=1)if(l[C]>-y){S=C;break}y=-(y=Math.abs(l[S]-y)<Math.abs(l[S-1]-y)||"next"===t.swipeDirection?l[S]:l[S-1])}if(0!==t.velocity)b=r?Math.abs((-y-t.translate)/t.velocity):Math.abs((y-t.translate)/t.velocity);else if(s.freeModeSticky)return void t.slideReset();s.freeModeMomentumBounce&&E?(t.updateProgress(x),t.setTransition(b),t.setTranslate(y),t.transitionStart(!0,t.swipeDirection),t.animating=!0,n.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),t.setTranslate(x),n.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(y),t.setTransition(b),t.setTranslate(y),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,n.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(y),t.updateActiveIndex(),t.updateSlidesClasses()}(!s.freeModeMomentum||u>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var M=0,z=t.slidesSizesGrid[0],P=0;P<o.length;P+=s.slidesPerGroup)void 0!==o[P+s.slidesPerGroup]?p>=o[P]&&p<o[P+s.slidesPerGroup]&&(M=P,z=o[P+s.slidesPerGroup]-o[P]):p>=o[P]&&(M=P,z=o[o.length-1]-o[o.length-2]);var k=(p-o[M])/z;if(u>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(k>=s.longSwipesRatio?t.slideTo(M+s.slidesPerGroup):t.slideTo(M)),"prev"===t.swipeDirection&&(k>1-s.longSwipesRatio?t.slideTo(M+s.slidesPerGroup):t.slideTo(M))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(M+s.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(M)}}},S=function(){var e=this.params,t=this.el;if(!t||0!==t.offsetWidth){e.breakpoints&&this.setBreakpoint();var i=this.allowSlideNext,s=this.allowSlidePrev;if(this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),e.freeMode){var a=Math.min(Math.max(this.translate,this.maxTranslate()),this.minTranslate());this.setTranslate(a),this.updateActiveIndex(),this.updateSlidesClasses(),e.autoHeight&&this.updateAutoHeight()}else this.updateSlidesClasses(),("auto"===e.slidesPerView||e.slidesPerView>1)&&this.isEnd&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0);this.allowSlidePrev=s,this.allowSlideNext=i}},C=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))};var M={attachEvents:function(){var t=this.params,i=this.touchEvents,s=this.el,a=this.wrapperEl;this.onTouchStart=x.bind(this),this.onTouchMove=E.bind(this),this.onTouchEnd=T.bind(this),this.onClick=C.bind(this);var r="container"===t.touchEventsTarget?s:a,n=!!t.nested;if(h.touch||!h.pointerEvents&&!h.prefixedPointerEvents){if(h.touch){var o=!("touchstart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};r.addEventListener(i.start,this.onTouchStart,o),r.addEventListener(i.move,this.onTouchMove,h.passiveListener?{passive:!1,capture:n}:n),r.addEventListener(i.end,this.onTouchEnd,o)}(t.simulateTouch&&!y.ios&&!y.android||t.simulateTouch&&!h.touch&&y.ios)&&(r.addEventListener("mousedown",this.onTouchStart,!1),e.addEventListener("mousemove",this.onTouchMove,n),e.addEventListener("mouseup",this.onTouchEnd,!1))}else r.addEventListener(i.start,this.onTouchStart,!1),e.addEventListener(i.move,this.onTouchMove,n),e.addEventListener(i.end,this.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&r.addEventListener("click",this.onClick,!0),this.on("resize observerUpdate",S)},detachEvents:function(){var t=this.params,i=this.touchEvents,s=this.el,a=this.wrapperEl,r="container"===t.touchEventsTarget?s:a,n=!!t.nested;if(h.touch||!h.pointerEvents&&!h.prefixedPointerEvents){if(h.touch){var o=!("onTouchStart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};r.removeEventListener(i.start,this.onTouchStart,o),r.removeEventListener(i.move,this.onTouchMove,n),r.removeEventListener(i.end,this.onTouchEnd,o)}(t.simulateTouch&&!y.ios&&!y.android||t.simulateTouch&&!h.touch&&y.ios)&&(r.removeEventListener("mousedown",this.onTouchStart,!1),e.removeEventListener("mousemove",this.onTouchMove,n),e.removeEventListener("mouseup",this.onTouchEnd,!1))}else r.removeEventListener(i.start,this.onTouchStart,!1),e.removeEventListener(i.move,this.onTouchMove,n),e.removeEventListener(i.end,this.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&r.removeEventListener("click",this.onClick,!0),this.off("resize observerUpdate",S)}},z={setBreakpoint:function(){var e=this.activeIndex,t=this.loopedSlides;void 0===t&&(t=0);var i=this.params,s=i.breakpoints;if(s&&(!s||0!==Object.keys(s).length)){var a=this.getBreakpoint(s);if(a&&this.currentBreakpoint!==a){var r=a in s?s[a]:this.originalParams,n=i.loop&&r.slidesPerView!==i.slidesPerView;d.extend(this.params,r),d.extend(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=a,n&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-t+this.loopedSlides,0,!1)),this.emit("breakpoint",r)}}},getBreakpoint:function(e){if(e){var i=!1,s=[];Object.keys(e).forEach(function(e){s.push(e)}),s.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var a=0;a<s.length;a+=1){var r=s[a];r>=t.innerWidth&&!i&&(i=r)}return i||"max"}}},P=function(){return{isIE:!!t.navigator.userAgent.match(/Trident/g)||!!t.navigator.userAgent.match(/MSIE/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)};var e}();var k={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventIntercationOnTransition:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},$={update:u,translate:v,transition:f,slide:m,loop:g,grabCursor:b,manipulation:w,events:M,breakpoints:z,checkOverflow:{checkOverflow:function(){var e=this.isLocked;this.isLocked=1===this.snapGrid.length,this.allowTouchMove=!this.isLocked,e&&e!==this.isLocked&&(this.isEnd=!1,this.navigation.update())}},classes:{addClasses:function(){var e=this.classNames,t=this.params,i=this.rtl,s=this.$el,a=[];a.push(t.direction),t.freeMode&&a.push("free-mode"),h.flexbox||a.push("no-flexbox"),t.autoHeight&&a.push("autoheight"),i&&a.push("rtl"),t.slidesPerColumn>1&&a.push("multirow"),y.android&&a.push("android"),y.ios&&a.push("ios"),P.isIE&&(h.pointerEvents||h.prefixedPointerEvents)&&a.push("wp8-"+t.direction),a.forEach(function(i){e.push(t.containerModifierClass+i)}),s.addClass(e.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,i,s,a,r,n){var o;function l(){n&&n()}e.complete&&r?l():i?((o=new t.Image).onload=l,o.onerror=l,a&&(o.sizes=a),s&&(o.srcset=s),i&&(o.src=i)):l()},preloadImages:function(){var e=this;function t(){void 0!==e&&null!==e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},L={},I=function(e){function t(){for(var i,a,r,n=[],o=arguments.length;o--;)n[o]=arguments[o];1===n.length&&n[0].constructor&&n[0].constructor===Object?a=n[0]:(i=(r=n)[0],a=r[1]);a||(a={}),a=d.extend({},a),i&&!a.el&&(a.el=i),e.call(this,a),Object.keys($).forEach(function(e){Object.keys($[e]).forEach(function(i){t.prototype[i]||(t.prototype[i]=$[e][i])})});var l=this;void 0===l.modules&&(l.modules={}),Object.keys(l.modules).forEach(function(e){var t=l.modules[e];if(t.params){var i=Object.keys(t.params)[0],s=t.params[i];if("object"!=typeof s)return;if(!(i in a&&"enabled"in s))return;!0===a[i]&&(a[i]={enabled:!0}),"object"!=typeof a[i]||"enabled"in a[i]||(a[i].enabled=!0),a[i]||(a[i]={enabled:!1})}});var p=d.extend({},k);l.useModulesParams(p),l.params=d.extend({},p,L,a),l.originalParams=d.extend({},l.params),l.passedParams=d.extend({},a),l.$=s;var c=s(l.params.el);if(i=c[0]){if(c.length>1){var u=[];return c.each(function(e,i){var s=d.extend({},a,{el:i});u.push(new t(s))}),u}i.swiper=l,c.data("swiper",l);var v,f,m=c.children("."+l.params.wrapperClass);return d.extend(l,{$el:c,el:i,$wrapperEl:m,wrapperEl:m[0],classNames:[],slides:s(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===l.params.direction},isVertical:function(){return"vertical"===l.params.direction},rtl:"horizontal"===l.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===m.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,progress:0,velocity:0,animating:!1,allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEvents:(v=["touchstart","touchmove","touchend"],f=["mousedown","mousemove","mouseup"],h.pointerEvents?f=["pointerdown","pointermove","pointerup"]:h.prefixedPointerEvents&&(f=["MSPointerDown","MSPointerMove","MSPointerUp"]),l.touchEventsTouch={start:v[0],move:v[1],end:v[2]},l.touchEventsDesktop={start:f[0],move:f[1],end:f[2]},h.touch||!l.params.simulateTouch?l.touchEventsTouch:l.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:d.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.useModules(),l.params.init&&l.init(),l}}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var i={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return t.prototype.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,s=this.size,a=this.activeIndex,r=1;if(e.centeredSlides){for(var n,o=t[a].swiperSlideSize,l=a+1;l<t.length;l+=1)t[l]&&!n&&(r+=1,(o+=t[l].swiperSlideSize)>s&&(n=!0));for(var d=a-1;d>=0;d-=1)t[d]&&!n&&(r+=1,(o+=t[d].swiperSlideSize)>s&&(n=!0))}else for(var h=a+1;h<t.length;h+=1)i[h]-i[a]<s&&(r+=1);return r},t.prototype.update=function(){var e=this;e&&!e.destroyed&&(e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(t(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||t(),e.emit("update"));function t(){var t=e.rtl?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},t.prototype.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},t.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,s=i.params,a=i.$el,r=i.$wrapperEl,n=i.slides;i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),a.removeAttr("style"),r.removeAttr("style"),n&&n.length&&n.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),d.deleteProps(i)),i.destroyed=!0},t.extendDefaults=function(e){d.extend(L,e)},i.extendedDefaults.get=function(){return L},i.defaults.get=function(){return k},i.Class.get=function(){return e},i.$.get=function(){return s},Object.defineProperties(t,i),t}(p),D={name:"device",proto:{device:y},static:{device:y}},O={name:"support",proto:{support:h},static:{support:h}},A={name:"browser",proto:{browser:P},static:{browser:P}},H={name:"resize",create:function(){var e=this;d.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){t.addEventListener("resize",this.resize.resizeHandler),t.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){t.removeEventListener("resize",this.resize.resizeHandler),t.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},N={func:t.MutationObserver||t.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,s=new(0,N.func)(function(e){e.forEach(function(e){i.emit("observerUpdate",e)})});s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init:function(){if(h.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:!1}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},X={name:"observer",params:{observer:!1,observeParents:!1},create:function(){d.extend(this,{observer:{init:N.init.bind(this),attach:N.attach.bind(this),destroy:N.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},Y={update:function(e){var t=this,i=t.params,s=i.slidesPerView,a=i.slidesPerGroup,r=i.centeredSlides,n=t.virtual,o=n.from,l=n.to,h=n.slides,p=n.slidesGrid,c=n.renderSlide,u=n.offset;t.updateActiveIndex();var v,f,m,g=t.activeIndex||0;v=t.rtl&&t.isHorizontal()?"right":t.isHorizontal()?"left":"top",r?(f=Math.floor(s/2)+a,m=Math.floor(s/2)+a):(f=s+(a-1),m=a);var b=Math.max((g||0)-m,0),w=Math.min((g||0)+f,h.length-1),y=(t.slidesGrid[b]||0)-(t.slidesGrid[0]||0);function x(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(d.extend(t.virtual,{from:b,to:w,offset:y,slidesGrid:t.slidesGrid}),o===b&&l===w&&!e)return t.slidesGrid!==p&&y!==u&&t.slides.css(v,y+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:y,from:b,to:w,slides:function(){for(var e=[],t=b;t<=w;t+=1)e.push(h[t]);return e}()}),void x();var E=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var S=o;S<=l;S+=1)(S<b||S>w)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+S+'"]').remove();for(var C=0;C<h.length;C+=1)C>=b&&C<=w&&(void 0===l||e?T.push(C):(C>l&&T.push(C),C<o&&E.push(C)));T.forEach(function(e){t.$wrapperEl.append(c(h[e],e))}),E.sort(function(e,t){return e<t}).forEach(function(e){t.$wrapperEl.prepend(c(h[e],e))}),t.$wrapperEl.children(".swiper-slide").css(v,y+"px"),x()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var a=i.renderSlide?s(i.renderSlide.call(this,e,t)):s('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return a.attr("data-swiper-slide-index")||a.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=a),a},appendSlide:function(e){this.virtual.slides.push(e),this.virtual.update(!0)},prependSlide:function(e){if(this.virtual.slides.unshift(e),this.params.virtual.cache){var t=this.virtual.cache,i={};Object.keys(t).forEach(function(e){i[e+1]=t[e]}),this.virtual.cache=i}this.virtual.update(!0),this.slideNext(0)}},B={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create:function(){d.extend(this,{virtual:{update:Y.update.bind(this),appendSlide:Y.appendSlide.bind(this),prependSlide:Y.prependSlide.bind(this),renderSlide:Y.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){if(this.params.virtual.enabled){this.classNames.push(this.params.containerModifierClass+"virtual");var e={watchSlidesProgress:!0};d.extend(this.params,e),d.extend(this.originalParams,e),this.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},G={handle:function(i){var s=i;s.originalEvent&&(s=s.originalEvent);var a=s.keyCode||s.charCode;if(!this.allowSlideNext&&(this.isHorizontal()&&39===a||this.isVertical()&&40===a))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&37===a||this.isVertical()&&38===a))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||e.activeElement&&e.activeElement.nodeName&&("input"===e.activeElement.nodeName.toLowerCase()||"textarea"===e.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(37===a||39===a||38===a||40===a)){var r=!1;if(this.$el.parents("."+this.params.slideClass).length>0&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var n=t.innerWidth,o=t.innerHeight,l=this.$el.offset();this.rtl&&(l.left-=this.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+this.width,l.top],[l.left,l.top+this.height],[l.left+this.width,l.top+this.height]],h=0;h<d.length;h+=1){var p=d[h];p[0]>=0&&p[0]<=n&&p[1]>=0&&p[1]<=o&&(r=!0)}if(!r)return}this.isHorizontal()?(37!==a&&39!==a||(s.preventDefault?s.preventDefault():s.returnValue=!1),(39===a&&!this.rtl||37===a&&this.rtl)&&this.slideNext(),(37===a&&!this.rtl||39===a&&this.rtl)&&this.slidePrev()):(38!==a&&40!==a||(s.preventDefault?s.preventDefault():s.returnValue=!1),40===a&&this.slideNext(),38===a&&this.slidePrev()),this.emit("keyPress",a)}},enable:function(){this.keyboard.enabled||(s(e).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(s(e).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},V={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){d.extend(this,{keyboard:{enabled:!1,enable:G.enable.bind(this),disable:G.disable.bind(this),handle:G.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var R={lastScrollTime:d.now(),event:t.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var t="onwheel"in e;if(!t){var i=e.createElement("div");i.setAttribute("onwheel","return;"),t="function"==typeof i.onwheel}return!t&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(t=e.implementation.hasFeature("Events.wheel","3.0")),t}()?"wheel":"mousewheel",normalize:function(e){var t=0,i=0,s=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(s=e.deltaX),(s||a)&&e.deltaMode&&(1===e.deltaMode?(s*=40,a*=40):(s*=800,a*=800)),s&&!t&&(t=s<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:a}},handle:function(e){var i=e,s=this,a=s.params.mousewheel;i.originalEvent&&(i=i.originalEvent);var r=0,n=s.rtl?-1:1,o=R.normalize(i);if(a.forceToAxis)if(s.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=o.pixelX*n}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*n:-o.pixelY;if(0===r)return!0;if(a.invert&&(r=-r),s.params.freeMode){var l=s.getTranslate()+r*a.sensitivity,h=s.isBeginning,p=s.isEnd;if(l>=s.minTranslate()&&(l=s.minTranslate()),l<=s.maxTranslate()&&(l=s.maxTranslate()),s.setTransition(0),s.setTranslate(l),s.updateProgress(),s.updateActiveIndex(),s.updateSlidesClasses(),(!h&&s.isBeginning||!p&&s.isEnd)&&s.updateSlidesClasses(),s.params.freeModeSticky&&(clearTimeout(s.mousewheel.timeout),s.mousewheel.timeout=d.nextTick(function(){s.slideReset()},300)),s.emit("scroll",i),s.params.autoplay&&s.params.autoplayDisableOnInteraction&&s.stopAutoplay(),l===s.minTranslate()||l===s.maxTranslate())return!0}else{if(d.now()-s.mousewheel.lastScrollTime>60)if(r<0)if(s.isEnd&&!s.params.loop||s.animating){if(a.releaseOnEdges)return!0}else s.slideNext(),s.emit("scroll",i);else if(s.isBeginning&&!s.params.loop||s.animating){if(a.releaseOnEdges)return!0}else s.slidePrev(),s.emit("scroll",i);s.mousewheel.lastScrollTime=(new t.Date).getTime()}return i.preventDefault?i.preventDefault():i.returnValue=!1,!1},enable:function(){if(!R.event)return!1;if(this.mousewheel.enabled)return!1;var e=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(e=s(this.params.mousewheel.eventsTarged)),e.on(R.event,this.mousewheel.handle),this.mousewheel.enabled=!0,!0},disable:function(){if(!R.event)return!1;if(!this.mousewheel.enabled)return!1;var e=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(e=s(this.params.mousewheel.eventsTarged)),e.off(R.event,this.mousewheel.handle),this.mousewheel.enabled=!1,!0}},F={update:function(){var e=this.params.navigation;if(!this.params.loop){var t=this.navigation,i=t.$nextEl,s=t.$prevEl;s&&s.length>0&&(this.isBeginning?s.addClass(e.disabledClass):s.removeClass(e.disabledClass),s[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass)),i&&i.length>0&&(this.isEnd?i.addClass(e.disabledClass):i.removeClass(e.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass))}},init:function(){var e,t,i=this,a=i.params.navigation;(a.nextEl||a.prevEl)&&(a.nextEl&&(e=s(a.nextEl),i.params.uniqueNavElements&&"string"==typeof a.nextEl&&e.length>1&&1===i.$el.find(a.nextEl).length&&(e=i.$el.find(a.nextEl))),a.prevEl&&(t=s(a.prevEl),i.params.uniqueNavElements&&"string"==typeof a.prevEl&&t.length>1&&1===i.$el.find(a.prevEl).length&&(t=i.$el.find(a.prevEl))),e&&e.length>0&&e.on("click",function(e){e.preventDefault(),i.isEnd&&!i.params.loop||i.slideNext()}),t&&t.length>0&&t.on("click",function(e){e.preventDefault(),i.isBeginning&&!i.params.loop||i.slidePrev()}),d.extend(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click"),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click"),i.removeClass(this.params.navigation.disabledClass))}},W={update:function(){var e=this.rtl,t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var i,a=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,r=this.pagination.$el,n=this.params.loop?Math.ceil((a-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((i=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>a-1-2*this.loopedSlides&&(i-=a-2*this.loopedSlides),i>n-1&&(i-=n),i<0&&"bullets"!==this.params.paginationType&&(i=n+i)):i=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===t.type&&this.pagination.bullets&&this.pagination.bullets.length>0){var o,l,d,h=this.pagination.bullets;if(t.dynamicBullets&&(this.pagination.bulletSize=h.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(t.dynamicMainBullets+4)+"px"),t.dynamicMainBullets>1&&void 0!==this.previousIndex&&(i>this.previousIndex&&this.pagination.dynamicBulletIndex<t.dynamicMainBullets-1?this.pagination.dynamicBulletIndex+=1:i<this.previousIndex&&this.pagination.dynamicBulletIndex>0&&(this.pagination.dynamicBulletIndex-=1)),o=i-this.pagination.dynamicBulletIndex,d=((l=o+(t.dynamicMainBullets-1))+o)/2),h.removeClass(t.bulletActiveClass+" "+t.bulletActiveClass+"-next "+t.bulletActiveClass+"-next-next "+t.bulletActiveClass+"-prev "+t.bulletActiveClass+"-prev-prev "+t.bulletActiveClass+"-main"),r.length>1)h.each(function(e,a){var r=s(a),n=r.index();n===i&&r.addClass(t.bulletActiveClass),t.dynamicBullets&&(n>=o&&n<=l&&r.addClass(t.bulletActiveClass+"-main"),n===o&&r.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),n===l&&r.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next"))});else if(h.eq(i).addClass(t.bulletActiveClass),t.dynamicBullets){for(var p=h.eq(o),c=h.eq(l),u=o;u<=l;u+=1)h.eq(u).addClass(t.bulletActiveClass+"-main");p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),c.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next")}if(t.dynamicBullets){var v=Math.min(h.length,t.dynamicMainBullets+4),f=(this.pagination.bulletSize*v-this.pagination.bulletSize)/2-d*this.pagination.bulletSize,m=e?"right":"left";h.css(this.isHorizontal()?m:"top",f+"px")}}if("fraction"===t.type&&(r.find("."+t.currentClass).text(i+1),r.find("."+t.totalClass).text(n)),"progressbar"===t.type){var g=(i+1)/n,b=g,w=1;this.isHorizontal()||(w=g,b=1),r.find("."+t.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+b+") scaleY("+w+")").transition(this.params.speed)}"custom"===t.type&&t.renderCustom?(r.html(t.renderCustom(this,i+1,n)),this.emit("paginationRender",this,r[0])):this.emit("paginationUpdate",this,r[0]),r[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,s="";if("bullets"===e.type){for(var a=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,r=0;r<a;r+=1)e.renderBullet?s+=e.renderBullet.call(this,r,e.bulletClass):s+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(s),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(s=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(s)),"progressbar"===e.type&&(s=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(s)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var i=s(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&1===e.$el.find(t.el).length&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),t.clickable&&i.on("click","."+t.bulletClass,function(t){t.preventDefault();var i=s(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)}),d.extend(e.pagination,{$el:i,el:i[0]}))}},destroy:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}}},q={setTranslate:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=this.rtl,i=this.progress,s=e.dragSize,a=e.trackSize,r=e.$dragEl,n=e.$el,o=this.params.scrollbar,l=s,d=(a-s)*i;t&&this.isHorizontal()?(d=-d)>0?(l=s-d,d=0):-d+s>a&&(l=a+d):d<0?(l=s+d,d=0):d+s>a&&(l=a-d),this.isHorizontal()?(h.transforms3d?r.transform("translate3d("+d+"px, 0, 0)"):r.transform("translateX("+d+"px)"),r[0].style.width=l+"px"):(h.transforms3d?r.transform("translate3d(0px, "+d+"px, 0)"):r.transform("translateY("+d+"px)"),r[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),n[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){n[0].style.opacity=0,n.transition(400)},1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=e.$dragEl,i=e.$el;t[0].style.width="",t[0].style.height="";var s,a=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,r=this.size/this.virtualSize,n=r*(a/this.size);s="auto"===this.params.scrollbar.dragSize?a*r:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=s+"px":t[0].style.height=s+"px",i[0].style.display=r>=1?"none":"",this.params.scrollbarHide&&(i[0].style.opacity=0),d.extend(e,{trackSize:a,divider:r,moveDivider:n,dragSize:s}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass)}},setDragPosition:function(e){var t,i=this.scrollbar,s=i.$el,a=i.dragSize,r=i.trackSize;t=((this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-s.offset()[this.isHorizontal()?"left":"top"]-a/2)/(r-a),t=Math.max(Math.min(t,1),0),this.rtl&&(t=1-t);var n=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*t;this.updateProgress(n),this.setTranslate(n),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,a=i.$el,r=i.$dragEl;this.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),a.transition(0),t.hide&&a.css("opacity",1),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,s=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=d.nextTick(function(){i.css("opacity",0),i.transition(400)},1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideReset())},enableDraggable:function(){if(this.params.scrollbar.el){var t=this.scrollbar,i=this.touchEvents,s=this.touchEventsDesktop,a=this.params,r=t.$el[0],n=!(!h.passiveListener||!a.passiveListener)&&{passive:!1,capture:!1},o=!(!h.passiveListener||!a.passiveListener)&&{passive:!0,capture:!1};h.touch||!h.pointerEvents&&!h.prefixedPointerEvents?(h.touch&&(r.addEventListener(i.start,this.scrollbar.onDragStart,n),r.addEventListener(i.move,this.scrollbar.onDragMove,n),r.addEventListener(i.end,this.scrollbar.onDragEnd,o)),(a.simulateTouch&&!y.ios&&!y.android||a.simulateTouch&&!h.touch&&y.ios)&&(r.addEventListener("mousedown",this.scrollbar.onDragStart,n),e.addEventListener("mousemove",this.scrollbar.onDragMove,n),e.addEventListener("mouseup",this.scrollbar.onDragEnd,o))):(r.addEventListener(s.start,this.scrollbar.onDragStart,n),e.addEventListener(s.move,this.scrollbar.onDragMove,n),e.addEventListener(s.end,this.scrollbar.onDragEnd,o))}},disableDraggable:function(){if(this.params.scrollbar.el){var t=this.scrollbar,i=this.touchEvents,s=this.touchEventsDesktop,a=this.params,r=t.$el[0],n=!(!h.passiveListener||!a.passiveListener)&&{passive:!1,capture:!1},o=!(!h.passiveListener||!a.passiveListener)&&{passive:!0,capture:!1};h.touch||!h.pointerEvents&&!h.prefixedPointerEvents?(h.touch&&(r.removeEventListener(i.start,this.scrollbar.onDragStart,n),r.removeEventListener(i.move,this.scrollbar.onDragMove,n),r.removeEventListener(i.end,this.scrollbar.onDragEnd,o)),(a.simulateTouch&&!y.ios&&!y.android||a.simulateTouch&&!h.touch&&y.ios)&&(r.removeEventListener("mousedown",this.scrollbar.onDragStart,n),e.removeEventListener("mousemove",this.scrollbar.onDragMove,n),e.removeEventListener("mouseup",this.scrollbar.onDragEnd,o))):(r.removeEventListener(s.start,this.scrollbar.onDragStart,n),e.removeEventListener(s.move,this.scrollbar.onDragMove,n),e.removeEventListener(s.end,this.scrollbar.onDragEnd,o))}},init:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.$el,i=this.params.scrollbar,a=s(i.el);this.params.uniqueNavElements&&"string"==typeof i.el&&a.length>1&&1===t.find(i.el).length&&(a=t.find(i.el));var r=a.find("."+this.params.scrollbar.dragClass);0===r.length&&(r=s('<div class="'+this.params.scrollbar.dragClass+'"></div>'),a.append(r)),d.extend(e,{$el:a,el:a[0],$dragEl:r,dragEl:r[0]}),i.draggable&&e.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},j={setTransform:function(e,t){var i=this.rtl,a=s(e),r=i?-1:1,n=a.attr("data-swiper-parallax")||"0",o=a.attr("data-swiper-parallax-x"),l=a.attr("data-swiper-parallax-y"),d=a.attr("data-swiper-parallax-scale"),h=a.attr("data-swiper-parallax-opacity");if(o||l?(o=o||"0",l=l||"0"):this.isHorizontal()?(o=n,l="0"):(l=n,o="0"),o=o.indexOf("%")>=0?parseInt(o,10)*t*r+"%":o*t*r+"px",l=l.indexOf("%")>=0?parseInt(l,10)*t+"%":l*t+"px",void 0!==h&&null!==h){var p=h-(h-1)*(1-Math.abs(t));a[0].style.opacity=p}if(void 0===d||null===d)a.transform("translate3d("+o+", "+l+", 0px)");else{var c=d-(d-1)*(1-Math.abs(t));a.transform("translate3d("+o+", "+l+", 0px) scale("+c+")")}},setTranslate:function(){var e=this,t=e.$el,i=e.slides,a=e.progress,r=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(t,i){e.parallax.setTransform(i,a)}),i.each(function(t,i){var n=i.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(t/2)-a*(r.length-1)),n=Math.min(Math.max(n,-1),1),s(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(t,i){e.parallax.setTransform(i,n)})})},setTransition:function(e){void 0===e&&(e=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(t,i){var a=s(i),r=parseInt(a.attr("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),a.transition(r)})}},K={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(s-t,2)+Math.pow(a-i,2))},onGestureStart:function(e){var t=this.params.zoom,i=this.zoom,a=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!h.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,a.scaleStart=K.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=s(e.target).closest(".swiper-slide"),0===a.$slideEl.length&&(a.$slideEl=this.slides.eq(this.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas"),a.$imageWrapEl=a.$imageEl.parent("."+t.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||t.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl.transition(0),this.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(!h.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,s.scaleMove=K.getDistanceBetweenTouches(e)}s.$imageEl&&0!==s.$imageEl.length&&(h.gestures?this.zoom.scale=e.scale*i.currentScale:i.scale=s.scaleMove/s.scaleStart*i.currentScale,i.scale>s.maxRatio&&(i.scale=s.maxRatio-1+Math.pow(i.scale-s.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),s.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(!h.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!y.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,s.maxRatio),t.minRatio),s.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(s.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,s=t.image;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(y.android&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,s=t.image,a=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=d.getTranslate(i.$imageWrapEl[0],"x")||0,s.startY=d.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(s.startX=-s.startX),this.rtl&&(s.startY=-s.startY));var r=s.width*t.scale,n=s.height*t.scale;if(!(r<i.slideWidth&&n<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-r/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-n/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=s.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=s.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(s.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(s.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(s.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(s.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=s.touchesCurrent.x,a.prevPositionY=s.touchesCurrent.y,a.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,s=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var a=300,r=300,n=s.x*a,o=i.currentX+n,l=s.y*r,d=i.currentY+l;0!==s.x&&(a=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(r=Math.abs((d-i.currentY)/s.y));var h=Math.max(a,r);i.currentX=o,i.currentY=d;var p=i.width*e.scale,c=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-p/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-c/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(h).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0,e.scale=1,e.currentScale=1)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,a,r,n,o,l,d,h,p,c,u,v,f,m,g,b=this.zoom,w=this.params.zoom,y=b.gesture,x=b.image;(y.$slideEl||(y.$slideEl=this.clickedSlide?s(this.clickedSlide):this.slides.eq(this.activeIndex),y.$imageEl=y.$slideEl.find("img, svg, canvas"),y.$imageWrapEl=y.$imageEl.parent("."+w.containerClass)),y.$imageEl&&0!==y.$imageEl.length)&&(y.$slideEl.addClass(""+w.zoomedSlideClass),void 0===x.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,i="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=x.touchesStart.x,i=x.touchesStart.y),b.scale=y.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,b.currentScale=y.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,e?(m=y.$slideEl[0].offsetWidth,g=y.$slideEl[0].offsetHeight,a=y.$slideEl.offset().left+m/2-t,r=y.$slideEl.offset().top+g/2-i,l=y.$imageEl[0].offsetWidth,d=y.$imageEl[0].offsetHeight,h=l*b.scale,p=d*b.scale,v=-(c=Math.min(m/2-h/2,0)),f=-(u=Math.min(g/2-p/2,0)),n=a*b.scale,o=r*b.scale,n<c&&(n=c),n>v&&(n=v),o<u&&(o=u),o>f&&(o=f)):(n=0,o=0),y.$imageWrapEl.transition(300).transform("translate3d("+n+"px, "+o+"px,0)"),y.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+b.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(i.$slideEl=this.clickedSlide?s(this.clickedSlide):this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e=this.zoom;if(!e.enabled){e.enabled=!0;var t=!("touchstart"!==this.touchEvents.start||!h.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1};h.gestures?(this.$wrapperEl.on("gesturestart",".swiper-slide",e.onGestureStart,t),this.$wrapperEl.on("gesturechange",".swiper-slide",e.onGestureChange,t),this.$wrapperEl.on("gestureend",".swiper-slide",e.onGestureEnd,t)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,".swiper-slide",e.onGestureStart,t),this.$wrapperEl.on(this.touchEvents.move,".swiper-slide",e.onGestureChange,t),this.$wrapperEl.on(this.touchEvents.end,".swiper-slide",e.onGestureEnd,t)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove)}},disable:function(){var e=this.zoom;if(e.enabled){this.zoom.enabled=!1;var t=!("touchstart"!==this.touchEvents.start||!h.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1};h.gestures?(this.$wrapperEl.off("gesturestart",".swiper-slide",e.onGestureStart,t),this.$wrapperEl.off("gesturechange",".swiper-slide",e.onGestureChange,t),this.$wrapperEl.off("gestureend",".swiper-slide",e.onGestureEnd,t)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,".swiper-slide",e.onGestureStart,t),this.$wrapperEl.off(this.touchEvents.move,".swiper-slide",e.onGestureChange,t),this.$wrapperEl.off(this.touchEvents.end,".swiper-slide",e.onGestureEnd,t)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove)}}},U={loadInSlide:function(e,t){void 0===t&&(t=!0);var i=this,a=i.params.lazy;if(void 0!==e&&0!==i.slides.length){var r=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children("."+i.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):i.slides.eq(e),n=r.find("."+a.elementClass+":not(."+a.loadedClass+"):not(."+a.loadingClass+")");!r.hasClass(a.elementClass)||r.hasClass(a.loadedClass)||r.hasClass(a.loadingClass)||(n=n.add(r[0])),0!==n.length&&n.each(function(e,n){var o=s(n);o.addClass(a.loadingClass);var l=o.attr("data-background"),d=o.attr("data-src"),h=o.attr("data-srcset"),p=o.attr("data-sizes");i.loadImage(o[0],d||l,h,p,!1,function(){if(void 0!==i&&null!==i&&i&&(!i||i.params)&&!i.destroyed){if(l?(o.css("background-image",'url("'+l+'")'),o.removeAttr("data-background")):(h&&(o.attr("srcset",h),o.removeAttr("data-srcset")),p&&(o.attr("sizes",p),o.removeAttr("data-sizes")),d&&(o.attr("src",d),o.removeAttr("data-src"))),o.addClass(a.loadedClass).removeClass(a.loadingClass),r.find("."+a.preloaderClass).remove(),i.params.loop&&t){var e=r.attr("data-swiper-slide-index");if(r.hasClass(i.params.slideDuplicateClass)){var s=i.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+i.params.slideDuplicateClass+")");i.lazy.loadInSlide(s.index(),!1)}else{var n=i.$wrapperEl.children("."+i.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');i.lazy.loadInSlide(n.index(),!1)}}i.emit("lazyImageReady",r[0],o[0])}}),i.emit("lazyImageLoad",r[0],o[0])})}},load:function(){var e=this,t=e.$wrapperEl,i=e.params,a=e.slides,r=e.activeIndex,n=e.virtual&&i.virtual.enabled,o=i.lazy,l=i.slidesPerView;function d(e){if(n){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(a[e])return!0;return!1}function h(e){return n?s(e).attr("data-swiper-slide-index"):s(e).index()}if("auto"===l&&(l=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(t,i){var a=n?s(i).attr("data-swiper-slide-index"):s(i).index();e.lazy.loadInSlide(a)});else if(l>1)for(var p=r;p<r+l;p+=1)d(p)&&e.lazy.loadInSlide(p);else e.lazy.loadInSlide(r);if(o.loadPrevNext)if(l>1||o.loadPrevNextAmount&&o.loadPrevNextAmount>1){for(var c=o.loadPrevNextAmount,u=l,v=Math.min(r+u+Math.max(c,u),a.length),f=Math.max(r-Math.max(u,c),0),m=r+l;m<v;m+=1)d(m)&&e.lazy.loadInSlide(m);for(var g=f;g<r;g+=1)d(g)&&e.lazy.loadInSlide(g)}else{var b=t.children("."+i.slideNextClass);b.length>0&&e.lazy.loadInSlide(h(b));var w=t.children("."+i.slidePrevClass);w.length>0&&e.lazy.loadInSlide(h(w))}}},_={LinearSpline:function(e,t){var i,s,a,r,n,o=function(e,t){for(s=-1,i=e.length;i-s>1;)e[a=i+s>>1]<=t?s=a:i=a;return i};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),r=n-1,(e-this.x[r])*(this.y[n]-this.y[r])/(this.x[n]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new _.LinearSpline(this.slidesGrid,e.slidesGrid):new _.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,s,a=this,r=a.controller.control;function n(e){var t=e.rtl&&"horizontal"===e.params.direction?-a.translate:a.translate;"slide"===a.params.controller.by&&(a.controller.getInterpolateFunction(e),s=-a.controller.spline.interpolate(-t)),s&&"container"!==a.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(a.maxTranslate()-a.minTranslate()),s=(t-a.minTranslate())*i+e.minTranslate()),a.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,a),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var o=0;o<r.length;o+=1)r[o]!==t&&r[o]instanceof I&&n(r[o]);else r instanceof I&&t!==r&&n(r)},setTransition:function(e,t){var i,s=this,a=s.controller.control;function r(t){t.setTransition(e,s),0!==e&&(t.transitionStart(),t.$wrapperEl.transitionEnd(function(){a&&(t.params.loop&&"slide"===s.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(a))for(i=0;i<a.length;i+=1)a[i]!==t&&a[i]instanceof I&&r(a[i]);else a instanceof I&&t!==a&&r(a)}},Z={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this.params.a11y;if(13===e.keyCode){var i=s(e.target);this.navigation&&this.navigation.$nextEl&&i.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(t.lastSlideMessage):this.a11y.notify(t.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&i.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(t.firstSlideMessage):this.a11y.notify(t.prevSlideMessage)),this.pagination&&i.is("."+this.params.pagination.bulletClass)&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){if(!this.params.loop){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;i&&i.length>0&&(this.isBeginning?this.a11y.disableEl(i):this.a11y.enableEl(i)),t&&t.length>0&&(this.isEnd?this.a11y.disableEl(t):this.a11y.enableEl(t))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each(function(i,a){var r=s(a);e.a11y.makeElFocusable(r),e.a11y.addElRole(r,"button"),e.a11y.addElLabel(r,t.paginationBulletMessage.replace(/{{index}}/,r.index()+1))})},init:function(){this.$el.append(this.a11y.liveRegion);var e,t,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.nextSlideMessage),e.on("keydown",this.a11y.onEnterKey)),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.prevSlideMessage),t.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&this.a11y.liveRegion.length>0&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},Q={init:function(){if(this.params.history){if(!t.history||!t.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=Q.getPathValues(),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||t.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||t.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=Q.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=t.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),i=e.length;return{key:e[i-2],value:e[i-1]}},setHistory:function(e,i){if(this.history.initialized&&this.params.history.enabled){var s=this.slides.eq(i),a=Q.slugify(s.attr("data-history"));t.location.pathname.includes(e)||(a=e+"/"+a);var r=t.history.state;r&&r.value===a||(this.params.history.replaceState?t.history.replaceState({value:a},null,a):t.history.pushState({value:a},null,a))}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var s=0,a=this.slides.length;s<a;s+=1){var r=this.slides.eq(s);if(Q.slugify(r.attr("data-history"))===t&&!r.hasClass(this.params.slideDuplicateClass)){var n=r.index();this.slideTo(n,e,i)}}else this.slideTo(0,e,i)}},J={onHashCange:function(){var t=e.location.hash.replace("#","");t!==this.slides.eq(this.activeIndex).attr("data-hash")&&this.slideTo(this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+t+'"]').index())},setHash:function(){if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||"");else{var i=this.slides.eq(this.activeIndex),s=i.attr("data-hash")||i.attr("data-history");e.location.hash=s||""}},init:function(){if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var i=e.location.hash.replace("#","");if(i)for(var a=0,r=this.slides.length;a<r;a+=1){var n=this.slides.eq(a);if((n.attr("data-hash")||n.attr("data-history"))===i&&!n.hasClass(this.params.slideDuplicateClass)){var o=n.index();this.slideTo(o,0,this.params.runCallbacksOnInit,!0)}}this.params.hashNavigation.watchState&&s(t).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&s(t).off("hashchange",this.hashNavigation.onHashCange)}},ee={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=d.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},i)},start:function(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop:function(){return!!this.autoplay.running&&(void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?t.$wrapperEl.transitionEnd(function(){t&&!t.destroyed&&(t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}):(t.autoplay.paused=!1,t.autoplay.run())))}},te={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),s=-i[0].swiperSlideOffset;this.params.virtualTranslate||(s-=this.translate);var a=0;this.isHorizontal()||(a=s,s=0);var r=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:r}).transform("translate3d("+s+"px, "+a+"px, 0px)")}},setTransition:function(e){var t=this,i=t.slides,s=t.$wrapperEl;if(i.transition(e),t.params.virtualTranslate&&0!==e){var a=!1;i.transitionEnd(function(){if(!a&&t&&!t.destroyed){a=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)s.trigger(e[i])}})}}},ie={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,a=this.slides,r=this.width,n=this.height,o=this.rtl,l=this.size,d=this.params.cubeEffect,h=this.isHorizontal(),p=this.virtual&&this.params.virtual.enabled,c=0;d.shadow&&(h?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=s('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:r+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=s('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var u=0;u<a.length;u+=1){var v=a.eq(u),f=u;p&&(f=parseInt(v.attr("data-swiper-slide-index"),10));var m=90*f,g=Math.floor(m/360);o&&(m=-m,g=Math.floor(-m/360));var b=Math.max(Math.min(v[0].progress,1),-1),w=0,y=0,x=0;f%4==0?(w=4*-g*l,x=0):(f-1)%4==0?(w=0,x=4*-g*l):(f-2)%4==0?(w=l+4*g*l,x=l):(f-3)%4==0&&(w=-l,x=3*l+4*l*g),o&&(w=-w),h||(y=w,w=0);var E="rotateX("+(h?0:-m)+"deg) rotateY("+(h?m:0)+"deg) translate3d("+w+"px, "+y+"px, "+x+"px)";if(b<=1&&b>-1&&(c=90*f+90*b,o&&(c=90*-f-90*b)),v.transform(E),d.slideShadows){var T=h?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),S=h?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===T.length&&(T=s('<div class="swiper-slide-shadow-'+(h?"left":"top")+'"></div>'),v.append(T)),0===S.length&&(S=s('<div class="swiper-slide-shadow-'+(h?"right":"bottom")+'"></div>'),v.append(S)),T.length&&(T[0].style.opacity=Math.max(-b,0)),S.length&&(S[0].style.opacity=Math.max(b,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow)if(h)e.transform("translate3d(0px, "+(r/2+d.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")");else{var C=Math.abs(c)-90*Math.floor(Math.abs(c)/90),M=1.5-(Math.sin(2*C*Math.PI/360)/2+Math.cos(2*C*Math.PI/360)/2),z=d.shadowScale,k=d.shadowScale/M,$=d.shadowOffset;e.transform("scale3d("+z+", 1, "+k+") translate3d(0px, "+(n/2+$)+"px, "+-n/2/k+"px) rotateX(-90deg)")}var L=P.isSafari||P.isUiWebView?-l/2:0;i.transform("translate3d(0px,0,"+L+"px) rotateX("+(this.isHorizontal()?0:c)+"deg) rotateY("+(this.isHorizontal()?-c:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},se={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=e.eq(t),a=i[0].progress;this.params.flipEffect.limitRotation&&(a=Math.max(Math.min(i[0].progress,1),-1));var r=-180*a,n=0,o=-i[0].swiperSlideOffset,l=0;if(this.isHorizontal()?this.rtl&&(r=-r):(l=o,o=0,n=-r,r=0),i[0].style.zIndex=-Math.abs(Math.round(a))+e.length,this.params.flipEffect.slideShadows){var d=this.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),h=this.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===d.length&&(d=s('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),i.append(d)),0===h.length&&(h=s('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),i.append(h)),d.length&&(d[0].style.opacity=Math.max(-a,0)),h.length&&(h[0].style.opacity=Math.max(a,0))}i.transform("translate3d("+o+"px, "+l+"px, 0px) rotateX("+n+"deg) rotateY("+r+"deg)")}},setTransition:function(e){var t=this,i=t.slides,s=t.activeIndex,a=t.$wrapperEl;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var r=!1;i.eq(s).transitionEnd(function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)a.trigger(e[i])}})}}},ae={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,a=this.$wrapperEl,r=this.slidesSizesGrid,n=this.params.coverflowEffect,o=this.isHorizontal(),l=this.translate,d=o?e/2-l:t/2-l,p=o?n.rotate:-n.rotate,c=n.depth,u=0,v=i.length;u<v;u+=1){var f=i.eq(u),m=r[u],g=(d-f[0].swiperSlideOffset-m/2)/m*n.modifier,b=o?p*g:0,w=o?0:p*g,y=-c*Math.abs(g),x=o?0:n.stretch*g,E=o?n.stretch*g:0;Math.abs(E)<.001&&(E=0),Math.abs(x)<.001&&(x=0),Math.abs(y)<.001&&(y=0),Math.abs(b)<.001&&(b=0),Math.abs(w)<.001&&(w=0);var T="translate3d("+E+"px,"+x+"px,"+y+"px)  rotateX("+w+"deg) rotateY("+b+"deg)";if(f.transform(T),f[0].style.zIndex=1-Math.abs(Math.round(g)),n.slideShadows){var S=o?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),C=o?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===S.length&&(S=s('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),f.append(S)),0===C.length&&(C=s('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),f.append(C)),S.length&&(S[0].style.opacity=g>0?g:0),C.length&&(C[0].style.opacity=-g>0?-g:0)}}(h.pointerEvents||h.prefixedPointerEvents)&&(a[0].style.perspectiveOrigin=d+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},re=[D,O,A,H,X,B,V,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){d.extend(this,{mousewheel:{enabled:!1,enable:R.enable.bind(this),disable:R.disable.bind(this),handle:R.handle.bind(this),lastScrollTime:d.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){d.extend(this,{navigation:{init:F.init.bind(this),update:F.update.bind(this),destroy:F.destroy.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t=this.navigation,i=t.$nextEl,a=t.$prevEl;!this.params.navigation.hideOnClick||s(e.target).is(a)||s(e.target).is(i)||(i&&i.toggleClass(this.params.navigation.hiddenClass),a&&a.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){d.extend(this,{pagination:{init:W.init.bind(this),render:W.render.bind(this),update:W.update.bind(this),destroy:W.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){this.params.loop?this.pagination.update():void 0===this.snapIndex&&this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){this.params.pagination.el&&this.params.pagination.hideOnClick&&this.pagination.$el.length>0&&!s(e.target).hasClass(this.params.pagination.bulletClass)&&this.pagination.$el.toggleClass(this.params.pagination.hiddenClass)}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){d.extend(this,{scrollbar:{init:q.init.bind(this),destroy:q.destroy.bind(this),updateSize:q.updateSize.bind(this),setTranslate:q.setTranslate.bind(this),setTransition:q.setTransition.bind(this),enableDraggable:q.enableDraggable.bind(this),disableDraggable:q.disableDraggable.bind(this),setDragPosition:q.setDragPosition.bind(this),onDragStart:q.onDragStart.bind(this),onDragMove:q.onDragMove.bind(this),onDragEnd:q.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){d.extend(this,{parallax:{setTransform:j.setTransform.bind(this),setTranslate:j.setTranslate.bind(this),setTransition:j.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0)},init:function(){this.params.parallax&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(i){t[i]=K[i].bind(e)}),d.extend(e,{zoom:t})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){d.extend(this,{lazy:{initialImageLoaded:!1,load:U.load.bind(this),loadInSlide:U.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){d.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:_.getInterpolateFunction.bind(this),setTranslate:_.setTranslate.bind(this),setTransition:_.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!1,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var e=this;d.extend(e,{a11y:{liveRegion:s('<span class="'+e.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(Z).forEach(function(t){e.a11y[t]=Z[t].bind(e)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){d.extend(this,{history:{init:Q.init.bind(this),setHistory:Q.setHistory.bind(this),setHistoryPopState:Q.setHistoryPopState.bind(this),scrollToSlide:Q.scrollToSlide.bind(this),destroy:Q.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){d.extend(this,{hashNavigation:{initialized:!1,init:J.init.bind(this),destroy:J.destroy.bind(this),setHash:J.setHash.bind(this),onHashCange:J.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){d.extend(this,{autoplay:{running:!1,paused:!1,run:ee.run.bind(this),start:ee.start.bind(this),stop:ee.stop.bind(this),pause:ee.pause.bind(this)}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){d.extend(this,{fadeEffect:{setTranslate:te.setTranslate.bind(this),setTransition:te.setTransition.bind(this)}})},on:{beforeInit:function(){if("fade"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"fade");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};d.extend(this.params,e),d.extend(this.originalParams,e)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){d.extend(this,{cubeEffect:{setTranslate:ie.setTranslate.bind(this),setTransition:ie.setTransition.bind(this)}})},on:{beforeInit:function(){if("cube"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};d.extend(this.params,e),d.extend(this.originalParams,e)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){d.extend(this,{flipEffect:{setTranslate:se.setTranslate.bind(this),setTransition:se.setTransition.bind(this)}})},on:{beforeInit:function(){if("flip"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};d.extend(this.params,e),d.extend(this.originalParams,e)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){d.extend(this,{coverflowEffect:{setTranslate:ae.setTranslate.bind(this),setTransition:ae.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}}];return void 0===I.use&&(I.use=I.Class.use,I.installModule=I.Class.installModule),I.use(re),I});//# sourceMappingURL=swiper.min.js.map]]></content>
      
    </entry>
    
    
  
</search>
